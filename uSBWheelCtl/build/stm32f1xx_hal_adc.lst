ARM GAS  /tmp/cccU0R2Q.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_ADC_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_ADC_Init:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @version V1.1.1
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @date    12-May-2017
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
ARM GAS  /tmp/cccU0R2Q.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
ARM GAS  /tmp/cccU0R2Q.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
ARM GAS  /tmp/cccU0R2Q.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
ARM GAS  /tmp/cccU0R2Q.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     @endverbatim
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      without specific prior written permission.
ARM GAS  /tmp/cccU0R2Q.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************  
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              2U
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             2U
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               1U
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
ARM GAS  /tmp/cccU0R2Q.s 			page 7


 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
ARM GAS  /tmp/cccU0R2Q.s 			page 8


  26              		.loc 1 375 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  42              		.loc 1 376 0
  43 0008 0023     		movs	r3, #0
  44 000a FB75     		strb	r3, [r7, #23]
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0U;
  45              		.loc 1 377 0
  46 000c 0023     		movs	r3, #0
  47 000e 3B61     		str	r3, [r7, #16]
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0U;
  48              		.loc 1 378 0
  49 0010 0023     		movs	r3, #0
  50 0012 BB60     		str	r3, [r7, #8]
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0U;
  51              		.loc 1 379 0
  52 0014 0023     		movs	r3, #0
  53 0016 FB60     		str	r3, [r7, #12]
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  54              		.loc 1 382 0
  55 0018 7B68     		ldr	r3, [r7, #4]
  56 001a 002B     		cmp	r3, #0
  57 001c 01D1     		bne	.L2
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  58              		.loc 1 384 0
  59 001e 0123     		movs	r3, #1
  60 0020 BEE0     		b	.L3
  61              	.L2:
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  62              		.loc 1 394 0
  63 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 9


  64 0024 9B68     		ldr	r3, [r3, #8]
  65 0026 002B     		cmp	r3, #0
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  66              		.loc 1 411 0
  67 0028 7B68     		ldr	r3, [r7, #4]
  68 002a 9B6A     		ldr	r3, [r3, #40]
  69 002c 002B     		cmp	r3, #0
  70 002e 09D1     		bne	.L5
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  71              		.loc 1 414 0
  72 0030 7B68     		ldr	r3, [r7, #4]
  73 0032 0022     		movs	r2, #0
  74 0034 DA62     		str	r2, [r3, #44]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  75              		.loc 1 417 0
  76 0036 7B68     		ldr	r3, [r7, #4]
  77 0038 0022     		movs	r2, #0
  78 003a 83F82420 		strb	r2, [r3, #36]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  79              		.loc 1 420 0
  80 003e 7868     		ldr	r0, [r7, #4]
  81 0040 FFF7FEFF 		bl	HAL_ADC_MspInit
  82              	.L5:
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  83              		.loc 1 428 0
  84 0044 7868     		ldr	r0, [r7, #4]
  85 0046 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  86 004a 0346     		mov	r3, r0
ARM GAS  /tmp/cccU0R2Q.s 			page 10


  87 004c FB75     		strb	r3, [r7, #23]
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  88              		.loc 1 433 0
  89 004e 7B68     		ldr	r3, [r7, #4]
  90 0050 9B6A     		ldr	r3, [r3, #40]
  91 0052 03F01003 		and	r3, r3, #16
  92 0056 002B     		cmp	r3, #0
  93 0058 40F09980 		bne	.L6
  94              		.loc 1 433 0 is_stmt 0 discriminator 1
  95 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  96 005e 002B     		cmp	r3, #0
  97 0060 40F09580 		bne	.L6
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
  98              		.loc 1 437 0 is_stmt 1
  99 0064 7B68     		ldr	r3, [r7, #4]
 100 0066 9B6A     		ldr	r3, [r3, #40]
 101 0068 23F48853 		bic	r3, r3, #4352
 102 006c 23F00203 		bic	r3, r3, #2
 103 0070 43F00202 		orr	r2, r3, #2
 104 0074 7B68     		ldr	r3, [r7, #4]
 105 0076 9A62     		str	r2, [r3, #40]
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                               |
 106              		.loc 1 453 0
 107 0078 7B68     		ldr	r3, [r7, #4]
 108 007a 5A68     		ldr	r2, [r3, #4]
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 109              		.loc 1 454 0
 110 007c 7B68     		ldr	r3, [r7, #4]
 111 007e DB69     		ldr	r3, [r3, #28]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 112              		.loc 1 453 0
 113 0080 1A43     		orrs	r2, r2, r3
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 114              		.loc 1 455 0
 115 0082 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 11


 116 0084 DB68     		ldr	r3, [r3, #12]
 117 0086 5B00     		lsls	r3, r3, #1
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 118              		.loc 1 454 0
 119 0088 1343     		orrs	r3, r3, r2
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 120              		.loc 1 453 0
 121 008a BA68     		ldr	r2, [r7, #8]
 122 008c 1343     		orrs	r3, r3, r2
 123 008e BB60     		str	r3, [r7, #8]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 124              		.loc 1 461 0
 125 0090 7B68     		ldr	r3, [r7, #4]
 126 0092 9B68     		ldr	r3, [r3, #8]
 127 0094 B3F5807F 		cmp	r3, #256
 128 0098 03D0     		beq	.L7
 129              		.loc 1 461 0 is_stmt 0 discriminator 2
 130 009a 7B68     		ldr	r3, [r7, #4]
 131 009c 9B68     		ldr	r3, [r3, #8]
 132 009e 012B     		cmp	r3, #1
 133 00a0 02D1     		bne	.L8
 134              	.L7:
 135              		.loc 1 461 0 discriminator 3
 136 00a2 4FF48073 		mov	r3, #256
 137 00a6 00E0     		b	.L9
 138              	.L8:
 139              		.loc 1 461 0 discriminator 4
 140 00a8 0023     		movs	r3, #0
 141              	.L9:
 142              		.loc 1 461 0 discriminator 6
 143 00aa 3A69     		ldr	r2, [r7, #16]
 144 00ac 1343     		orrs	r3, r3, r2
 145 00ae 3B61     		str	r3, [r7, #16]
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 146              		.loc 1 466 0 is_stmt 1 discriminator 6
 147 00b0 7B68     		ldr	r3, [r7, #4]
 148 00b2 5B69     		ldr	r3, [r3, #20]
 149 00b4 012B     		cmp	r3, #1
 150 00b6 19D1     		bne	.L10
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 151              		.loc 1 468 0
 152 00b8 7B68     		ldr	r3, [r7, #4]
 153 00ba DB68     		ldr	r3, [r3, #12]
 154 00bc 002B     		cmp	r3, #0
 155 00be 09D1     		bne	.L11
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
ARM GAS  /tmp/cccU0R2Q.s 			page 12


 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 156              		.loc 1 472 0
 157 00c0 7B68     		ldr	r3, [r7, #4]
 158 00c2 9B69     		ldr	r3, [r3, #24]
 159 00c4 013B     		subs	r3, r3, #1
 160 00c6 5A03     		lsls	r2, r3, #13
 161 00c8 3B69     		ldr	r3, [r7, #16]
 162 00ca 1343     		orrs	r3, r3, r2
 163 00cc 43F40063 		orr	r3, r3, #2048
 164 00d0 3B61     		str	r3, [r7, #16]
 165 00d2 0BE0     		b	.L10
 166              	.L11:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 167              		.loc 1 481 0
 168 00d4 7B68     		ldr	r3, [r7, #4]
 169 00d6 9B6A     		ldr	r3, [r3, #40]
 170 00d8 43F02002 		orr	r2, r3, #32
 171 00dc 7B68     		ldr	r3, [r7, #4]
 172 00de 9A62     		str	r2, [r3, #40]
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 173              		.loc 1 484 0
 174 00e0 7B68     		ldr	r3, [r7, #4]
 175 00e2 DB6A     		ldr	r3, [r3, #44]
 176 00e4 43F00102 		orr	r2, r3, #1
 177 00e8 7B68     		ldr	r3, [r7, #4]
 178 00ea DA62     		str	r2, [r3, #44]
 179              	.L10:
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 180              		.loc 1 489 0
 181 00ec 7B68     		ldr	r3, [r7, #4]
 182 00ee 1B68     		ldr	r3, [r3]
 183 00f0 5B68     		ldr	r3, [r3, #4]
 184 00f2 23F46941 		bic	r1, r3, #59648
 185 00f6 7B68     		ldr	r3, [r7, #4]
 186 00f8 1B68     		ldr	r3, [r3]
 187 00fa 3A69     		ldr	r2, [r7, #16]
 188 00fc 0A43     		orrs	r2, r2, r1
 189 00fe 5A60     		str	r2, [r3, #4]
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
ARM GAS  /tmp/cccU0R2Q.s 			page 13


 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 190              		.loc 1 496 0
 191 0100 7B68     		ldr	r3, [r7, #4]
 192 0102 1B68     		ldr	r3, [r3]
 193 0104 9A68     		ldr	r2, [r3, #8]
 194 0106 284B     		ldr	r3, .L17
 195 0108 1340     		ands	r3, r3, r2
 196 010a 7A68     		ldr	r2, [r7, #4]
 197 010c 1268     		ldr	r2, [r2]
 198 010e B968     		ldr	r1, [r7, #8]
 199 0110 0B43     		orrs	r3, r3, r1
 200 0112 9360     		str	r3, [r2, #8]
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 201              		.loc 1 512 0
 202 0114 7B68     		ldr	r3, [r7, #4]
 203 0116 9B68     		ldr	r3, [r3, #8]
 204 0118 B3F5807F 		cmp	r3, #256
 205 011c 03D0     		beq	.L12
 206              		.loc 1 512 0 is_stmt 0 discriminator 1
 207 011e 7B68     		ldr	r3, [r7, #4]
 208 0120 9B68     		ldr	r3, [r3, #8]
 209 0122 012B     		cmp	r3, #1
 210 0124 04D1     		bne	.L13
 211              	.L12:
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 212              		.loc 1 514 0 is_stmt 1
 213 0126 7B68     		ldr	r3, [r7, #4]
 214 0128 1B69     		ldr	r3, [r3, #16]
 215 012a 013B     		subs	r3, r3, #1
 216 012c 1B05     		lsls	r3, r3, #20
 217 012e FB60     		str	r3, [r7, #12]
 218              	.L13:
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 219              		.loc 1 517 0
 220 0130 7B68     		ldr	r3, [r7, #4]
 221 0132 1B68     		ldr	r3, [r3]
 222 0134 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cccU0R2Q.s 			page 14


 223 0136 23F47001 		bic	r1, r3, #15728640
 224 013a 7B68     		ldr	r3, [r7, #4]
 225 013c 1B68     		ldr	r3, [r3]
 226 013e FA68     		ldr	r2, [r7, #12]
 227 0140 0A43     		orrs	r2, r2, r1
 228 0142 DA62     		str	r2, [r3, #44]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 229              		.loc 1 527 0
 230 0144 7B68     		ldr	r3, [r7, #4]
 231 0146 1B68     		ldr	r3, [r3]
 232 0148 9A68     		ldr	r2, [r3, #8]
 233 014a 184B     		ldr	r3, .L17+4
 234 014c 1340     		ands	r3, r3, r2
 235 014e BA68     		ldr	r2, [r7, #8]
 236 0150 9A42     		cmp	r2, r3
 237 0152 0BD1     		bne	.L14
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 238              		.loc 1 534 0
 239 0154 7B68     		ldr	r3, [r7, #4]
 240 0156 0022     		movs	r2, #0
 241 0158 DA62     		str	r2, [r3, #44]
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 242              		.loc 1 537 0
 243 015a 7B68     		ldr	r3, [r7, #4]
 244 015c 9B6A     		ldr	r3, [r3, #40]
 245 015e 23F00303 		bic	r3, r3, #3
 246 0162 43F00102 		orr	r2, r3, #1
 247 0166 7B68     		ldr	r3, [r7, #4]
 248 0168 9A62     		str	r2, [r3, #40]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 249              		.loc 1 527 0
 250 016a 18E0     		b	.L16
 251              	.L14:
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cccU0R2Q.s 			page 15


 252              		.loc 1 544 0
 253 016c 7B68     		ldr	r3, [r7, #4]
 254 016e 9B6A     		ldr	r3, [r3, #40]
 255 0170 23F01203 		bic	r3, r3, #18
 256 0174 43F01002 		orr	r2, r3, #16
 257 0178 7B68     		ldr	r3, [r7, #4]
 258 017a 9A62     		str	r2, [r3, #40]
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 259              		.loc 1 549 0
 260 017c 7B68     		ldr	r3, [r7, #4]
 261 017e DB6A     		ldr	r3, [r3, #44]
 262 0180 43F00102 		orr	r2, r3, #1
 263 0184 7B68     		ldr	r3, [r7, #4]
 264 0186 DA62     		str	r2, [r3, #44]
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 265              		.loc 1 551 0
 266 0188 0123     		movs	r3, #1
 267 018a FB75     		strb	r3, [r7, #23]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 268              		.loc 1 527 0
 269 018c 07E0     		b	.L16
 270              	.L6:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 271              		.loc 1 558 0
 272 018e 7B68     		ldr	r3, [r7, #4]
 273 0190 9B6A     		ldr	r3, [r3, #40]
 274 0192 43F01002 		orr	r2, r3, #16
 275 0196 7B68     		ldr	r3, [r7, #4]
 276 0198 9A62     		str	r2, [r3, #40]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 277              		.loc 1 560 0
 278 019a 0123     		movs	r3, #1
 279 019c FB75     		strb	r3, [r7, #23]
 280              	.L16:
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 281              		.loc 1 564 0
 282 019e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 283              	.L3:
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 284              		.loc 1 565 0
 285 01a0 1846     		mov	r0, r3
 286 01a2 1837     		adds	r7, r7, #24
ARM GAS  /tmp/cccU0R2Q.s 			page 16


 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 8
 289 01a4 BD46     		mov	sp, r7
 290              	.LCFI4:
 291              		.cfi_def_cfa_register 13
 292              		@ sp needed
 293 01a6 80BD     		pop	{r7, pc}
 294              	.L18:
 295              		.align	2
 296              	.L17:
 297 01a8 FDF7E1FF 		.word	-1968131
 298 01ac FE0E1FFF 		.word	-14741762
 299              		.cfi_endproc
 300              	.LFE66:
 302              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 303              		.align	1
 304              		.global	HAL_ADC_DeInit
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu softvfp
 310              	HAL_ADC_DeInit:
 311              	.LFB67:
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 312              		.loc 1 576 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 16
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316 0000 80B5     		push	{r7, lr}
 317              	.LCFI5:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 84B0     		sub	sp, sp, #16
 322              	.LCFI6:
 323              		.cfi_def_cfa_offset 24
 324 0004 00AF     		add	r7, sp, #0
 325              	.LCFI7:
 326              		.cfi_def_cfa_register 7
 327 0006 7860     		str	r0, [r7, #4]
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 328              		.loc 1 577 0
 329 0008 0023     		movs	r3, #0
 330 000a FB73     		strb	r3, [r7, #15]
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
ARM GAS  /tmp/cccU0R2Q.s 			page 17


 331              		.loc 1 580 0
 332 000c 7B68     		ldr	r3, [r7, #4]
 333 000e 002B     		cmp	r3, #0
 334 0010 01D1     		bne	.L20
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 335              		.loc 1 582 0
 336 0012 0123     		movs	r3, #1
 337 0014 ADE0     		b	.L21
 338              	.L20:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 339              		.loc 1 589 0
 340 0016 7B68     		ldr	r3, [r7, #4]
 341 0018 9B6A     		ldr	r3, [r3, #40]
 342 001a 43F00202 		orr	r2, r3, #2
 343 001e 7B68     		ldr	r3, [r7, #4]
 344 0020 9A62     		str	r2, [r3, #40]
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 345              		.loc 1 593 0
 346 0022 7868     		ldr	r0, [r7, #4]
 347 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 348 0028 0346     		mov	r3, r0
 349 002a FB73     		strb	r3, [r7, #15]
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 350              		.loc 1 598 0
 351 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 352 002e 002B     		cmp	r3, #0
 353 0030 40F09A80 		bne	.L22
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 354              		.loc 1 606 0
 355 0034 7B68     		ldr	r3, [r7, #4]
 356 0036 1B68     		ldr	r3, [r3]
 357 0038 6FF01F02 		mvn	r2, #31
 358 003c 1A60     		str	r2, [r3]
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
ARM GAS  /tmp/cccU0R2Q.s 			page 18


 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 359              		.loc 1 610 0
 360 003e 7B68     		ldr	r3, [r7, #4]
 361 0040 1B68     		ldr	r3, [r3]
 362 0042 5968     		ldr	r1, [r3, #4]
 363 0044 7B68     		ldr	r3, [r7, #4]
 364 0046 1A68     		ldr	r2, [r3]
 365 0048 4C4B     		ldr	r3, .L23
 366 004a 0B40     		ands	r3, r3, r1
 367 004c 5360     		str	r3, [r2, #4]
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 368              		.loc 1 616 0
 369 004e 7B68     		ldr	r3, [r7, #4]
 370 0050 1B68     		ldr	r3, [r3]
 371 0052 9968     		ldr	r1, [r3, #8]
 372 0054 7B68     		ldr	r3, [r7, #4]
 373 0056 1A68     		ldr	r2, [r3]
 374 0058 494B     		ldr	r3, .L23+4
 375 005a 0B40     		ands	r3, r3, r1
 376 005c 9360     		str	r3, [r2, #8]
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 377              		.loc 1 623 0
 378 005e 7B68     		ldr	r3, [r7, #4]
 379 0060 1B68     		ldr	r3, [r3]
 380 0062 DA68     		ldr	r2, [r3, #12]
 381 0064 7B68     		ldr	r3, [r7, #4]
 382 0066 1B68     		ldr	r3, [r3]
 383 0068 02F07F42 		and	r2, r2, #-16777216
 384 006c DA60     		str	r2, [r3, #12]
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 385              		.loc 1 628 0
 386 006e 7B68     		ldr	r3, [r7, #4]
 387 0070 1B68     		ldr	r3, [r3]
 388 0072 1A69     		ldr	r2, [r3, #16]
 389 0074 7B68     		ldr	r3, [r7, #4]
 390 0076 1B68     		ldr	r3, [r3]
 391 0078 02F04042 		and	r2, r2, #-1073741824
 392 007c 1A61     		str	r2, [r3, #16]
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cccU0R2Q.s 			page 19


 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 393              		.loc 1 634 0
 394 007e 7B68     		ldr	r3, [r7, #4]
 395 0080 1B68     		ldr	r3, [r3]
 396 0082 5B69     		ldr	r3, [r3, #20]
 397 0084 7A68     		ldr	r2, [r7, #4]
 398 0086 1268     		ldr	r2, [r2]
 399 0088 23F47F63 		bic	r3, r3, #4080
 400 008c 23F00F03 		bic	r3, r3, #15
 401 0090 5361     		str	r3, [r2, #20]
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 402              		.loc 1 636 0
 403 0092 7B68     		ldr	r3, [r7, #4]
 404 0094 1B68     		ldr	r3, [r3]
 405 0096 9B69     		ldr	r3, [r3, #24]
 406 0098 7A68     		ldr	r2, [r7, #4]
 407 009a 1268     		ldr	r2, [r2]
 408 009c 23F47F63 		bic	r3, r3, #4080
 409 00a0 23F00F03 		bic	r3, r3, #15
 410 00a4 9361     		str	r3, [r2, #24]
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 411              		.loc 1 638 0
 412 00a6 7B68     		ldr	r3, [r7, #4]
 413 00a8 1B68     		ldr	r3, [r3]
 414 00aa DB69     		ldr	r3, [r3, #28]
 415 00ac 7A68     		ldr	r2, [r7, #4]
 416 00ae 1268     		ldr	r2, [r2]
 417 00b0 23F47F63 		bic	r3, r3, #4080
 418 00b4 23F00F03 		bic	r3, r3, #15
 419 00b8 D361     		str	r3, [r2, #28]
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 420              		.loc 1 640 0
 421 00ba 7B68     		ldr	r3, [r7, #4]
 422 00bc 1B68     		ldr	r3, [r3]
 423 00be 1B6A     		ldr	r3, [r3, #32]
 424 00c0 7A68     		ldr	r2, [r7, #4]
 425 00c2 1268     		ldr	r2, [r2]
 426 00c4 23F47F63 		bic	r3, r3, #4080
 427 00c8 23F00F03 		bic	r3, r3, #15
 428 00cc 1362     		str	r3, [r2, #32]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 429              		.loc 1 643 0
 430 00ce 7B68     		ldr	r3, [r7, #4]
 431 00d0 1B68     		ldr	r3, [r3]
 432 00d2 5B6A     		ldr	r3, [r3, #36]
 433 00d4 7A68     		ldr	r2, [r7, #4]
 434 00d6 1268     		ldr	r2, [r2]
 435 00d8 23F47F63 		bic	r3, r3, #4080
 436 00dc 23F00F03 		bic	r3, r3, #15
 437 00e0 5362     		str	r3, [r2, #36]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
ARM GAS  /tmp/cccU0R2Q.s 			page 20


 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 438              		.loc 1 645 0
 439 00e2 7B68     		ldr	r3, [r7, #4]
 440 00e4 1B68     		ldr	r3, [r3]
 441 00e6 9B6A     		ldr	r3, [r3, #40]
 442 00e8 7A68     		ldr	r2, [r7, #4]
 443 00ea 1268     		ldr	r2, [r2]
 444 00ec 23F47F63 		bic	r3, r3, #4080
 445 00f0 23F00F03 		bic	r3, r3, #15
 446 00f4 9362     		str	r3, [r2, #40]
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 447              		.loc 1 648 0
 448 00f6 7B68     		ldr	r3, [r7, #4]
 449 00f8 1B68     		ldr	r3, [r3]
 450 00fa DA6A     		ldr	r2, [r3, #44]
 451 00fc 7B68     		ldr	r3, [r7, #4]
 452 00fe 1B68     		ldr	r3, [r3]
 453 0100 02F07F42 		and	r2, r2, #-16777216
 454 0104 DA62     		str	r2, [r3, #44]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 455              		.loc 1 653 0
 456 0106 7B68     		ldr	r3, [r7, #4]
 457 0108 1B68     		ldr	r3, [r3]
 458 010a DA6A     		ldr	r2, [r3, #44]
 459 010c 7B68     		ldr	r3, [r7, #4]
 460 010e 1B68     		ldr	r3, [r3]
 461 0110 02F07F42 		and	r2, r2, #-16777216
 462 0114 DA62     		str	r2, [r3, #44]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 463              		.loc 1 658 0
 464 0116 7B68     		ldr	r3, [r7, #4]
 465 0118 1B68     		ldr	r3, [r3]
 466 011a 1A6B     		ldr	r2, [r3, #48]
 467 011c 7B68     		ldr	r3, [r7, #4]
 468 011e 1B68     		ldr	r3, [r3]
 469 0120 02F04042 		and	r2, r2, #-1073741824
 470 0124 1A63     		str	r2, [r3, #48]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 471              		.loc 1 662 0
 472 0126 7B68     		ldr	r3, [r7, #4]
 473 0128 1B68     		ldr	r3, [r3]
 474 012a 5A6B     		ldr	r2, [r3, #52]
 475 012c 7B68     		ldr	r3, [r7, #4]
 476 012e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccU0R2Q.s 			page 21


 477 0130 02F04042 		and	r2, r2, #-1073741824
 478 0134 5A63     		str	r2, [r3, #52]
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 479              		.loc 1 666 0
 480 0136 7B68     		ldr	r3, [r7, #4]
 481 0138 1B68     		ldr	r3, [r3]
 482 013a 9B6B     		ldr	r3, [r3, #56]
 483 013c 7A68     		ldr	r2, [r7, #4]
 484 013e 1268     		ldr	r2, [r2]
 485 0140 9B0D     		lsrs	r3, r3, #22
 486 0142 9B05     		lsls	r3, r3, #22
 487 0144 9363     		str	r3, [r2, #56]
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 488              		.loc 1 671 0
 489 0146 7B68     		ldr	r3, [r7, #4]
 490 0148 1B68     		ldr	r3, [r3]
 491 014a 9B6B     		ldr	r3, [r3, #56]
 492 014c 7A68     		ldr	r2, [r7, #4]
 493 014e 1268     		ldr	r2, [r2]
 494 0150 9B0D     		lsrs	r3, r3, #22
 495 0152 9B05     		lsls	r3, r3, #22
 496 0154 9363     		str	r3, [r2, #56]
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 497              		.loc 1 691 0
 498 0156 7868     		ldr	r0, [r7, #4]
 499 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 500              		.loc 1 694 0
 501 015c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 22


 502 015e 0022     		movs	r2, #0
 503 0160 DA62     		str	r2, [r3, #44]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 504              		.loc 1 697 0
 505 0162 7B68     		ldr	r3, [r7, #4]
 506 0164 0022     		movs	r2, #0
 507 0166 9A62     		str	r2, [r3, #40]
 508              	.L22:
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 509              		.loc 1 702 0
 510 0168 7B68     		ldr	r3, [r7, #4]
 511 016a 0022     		movs	r2, #0
 512 016c 83F82420 		strb	r2, [r3, #36]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 513              		.loc 1 705 0
 514 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 515              	.L21:
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 516              		.loc 1 706 0
 517 0172 1846     		mov	r0, r3
 518 0174 1037     		adds	r7, r7, #16
 519              	.LCFI8:
 520              		.cfi_def_cfa_offset 8
 521 0176 BD46     		mov	sp, r7
 522              	.LCFI9:
 523              		.cfi_def_cfa_register 13
 524              		@ sp needed
 525 0178 80BD     		pop	{r7, pc}
 526              	.L24:
 527 017a 00BF     		.align	2
 528              	.L23:
 529 017c 00003FFF 		.word	-12648448
 530 0180 F00601FF 		.word	-16709904
 531              		.cfi_endproc
 532              	.LFE67:
 534              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 535              		.align	1
 536              		.weak	HAL_ADC_MspInit
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu softvfp
 542              	HAL_ADC_MspInit:
 543              	.LFB68:
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/cccU0R2Q.s 			page 23


 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 544              		.loc 1 714 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 549 0000 80B4     		push	{r7}
 550              	.LCFI10:
 551              		.cfi_def_cfa_offset 4
 552              		.cfi_offset 7, -4
 553 0002 83B0     		sub	sp, sp, #12
 554              	.LCFI11:
 555              		.cfi_def_cfa_offset 16
 556 0004 00AF     		add	r7, sp, #0
 557              	.LCFI12:
 558              		.cfi_def_cfa_register 7
 559 0006 7860     		str	r0, [r7, #4]
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 560              		.loc 1 720 0
 561 0008 00BF     		nop
 562 000a 0C37     		adds	r7, r7, #12
 563              	.LCFI13:
 564              		.cfi_def_cfa_offset 4
 565 000c BD46     		mov	sp, r7
 566              	.LCFI14:
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 000e 80BC     		pop	{r7}
 570              	.LCFI15:
 571              		.cfi_restore 7
 572              		.cfi_def_cfa_offset 0
 573 0010 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE68:
 577              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 578              		.align	1
 579              		.weak	HAL_ADC_MspDeInit
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu softvfp
 585              	HAL_ADC_MspDeInit:
 586              	.LFB69:
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cccU0R2Q.s 			page 24


 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 587              		.loc 1 728 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 8
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592 0000 80B4     		push	{r7}
 593              	.LCFI16:
 594              		.cfi_def_cfa_offset 4
 595              		.cfi_offset 7, -4
 596 0002 83B0     		sub	sp, sp, #12
 597              	.LCFI17:
 598              		.cfi_def_cfa_offset 16
 599 0004 00AF     		add	r7, sp, #0
 600              	.LCFI18:
 601              		.cfi_def_cfa_register 7
 602 0006 7860     		str	r0, [r7, #4]
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 603              		.loc 1 734 0
 604 0008 00BF     		nop
 605 000a 0C37     		adds	r7, r7, #12
 606              	.LCFI19:
 607              		.cfi_def_cfa_offset 4
 608 000c BD46     		mov	sp, r7
 609              	.LCFI20:
 610              		.cfi_def_cfa_register 13
 611              		@ sp needed
 612 000e 80BC     		pop	{r7}
 613              	.LCFI21:
 614              		.cfi_restore 7
 615              		.cfi_def_cfa_offset 0
 616 0010 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE69:
 620              		.section	.text.HAL_ADC_Start,"ax",%progbits
 621              		.align	1
 622              		.global	HAL_ADC_Start
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu softvfp
 628              	HAL_ADC_Start:
 629              	.LFB70:
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
ARM GAS  /tmp/cccU0R2Q.s 			page 25


 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 630              		.loc 1 769 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 16
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634 0000 80B5     		push	{r7, lr}
 635              	.LCFI22:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 7, -8
 638              		.cfi_offset 14, -4
 639 0002 84B0     		sub	sp, sp, #16
 640              	.LCFI23:
 641              		.cfi_def_cfa_offset 24
 642 0004 00AF     		add	r7, sp, #0
 643              	.LCFI24:
 644              		.cfi_def_cfa_register 7
 645 0006 7860     		str	r0, [r7, #4]
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 646              		.loc 1 770 0
 647 0008 0023     		movs	r3, #0
 648 000a FB73     		strb	r3, [r7, #15]
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 649              		.loc 1 776 0
 650 000c 7B68     		ldr	r3, [r7, #4]
 651 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 652 0012 012B     		cmp	r3, #1
 653 0014 01D1     		bne	.L28
ARM GAS  /tmp/cccU0R2Q.s 			page 26


 654              		.loc 1 776 0 is_stmt 0 discriminator 1
 655 0016 0223     		movs	r3, #2
 656 0018 98E0     		b	.L29
 657              	.L28:
 658              		.loc 1 776 0 discriminator 2
 659 001a 7B68     		ldr	r3, [r7, #4]
 660 001c 0122     		movs	r2, #1
 661 001e 83F82420 		strb	r2, [r3, #36]
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 662              		.loc 1 779 0 is_stmt 1 discriminator 2
 663 0022 7868     		ldr	r0, [r7, #4]
 664 0024 FFF7FEFF 		bl	ADC_Enable
 665 0028 0346     		mov	r3, r0
 666 002a FB73     		strb	r3, [r7, #15]
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 667              		.loc 1 782 0 discriminator 2
 668 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 669 002e 002B     		cmp	r3, #0
 670 0030 40F08780 		bne	.L30
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 671              		.loc 1 787 0
 672 0034 7B68     		ldr	r3, [r7, #4]
 673 0036 9B6A     		ldr	r3, [r3, #40]
 674 0038 23F44073 		bic	r3, r3, #768
 675 003c 23F00103 		bic	r3, r3, #1
 676 0040 43F48072 		orr	r2, r3, #256
 677 0044 7B68     		ldr	r3, [r7, #4]
 678 0046 9A62     		str	r2, [r3, #40]
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 679              		.loc 1 794 0
 680 0048 7B68     		ldr	r3, [r7, #4]
 681 004a 1B68     		ldr	r3, [r3]
 682 004c 414A     		ldr	r2, .L42
 683 004e 9342     		cmp	r3, r2
 684 0050 05D1     		bne	.L31
 685              		.loc 1 794 0 is_stmt 0 discriminator 1
 686 0052 414B     		ldr	r3, .L42+4
 687 0054 5B68     		ldr	r3, [r3, #4]
 688 0056 03F47023 		and	r3, r3, #983040
 689 005a 002B     		cmp	r3, #0
 690 005c 15D1     		bne	.L32
 691              	.L31:
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/cccU0R2Q.s 			page 27


 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 692              		.loc 1 797 0 is_stmt 1
 693 005e 7B68     		ldr	r3, [r7, #4]
 694 0060 9B6A     		ldr	r3, [r3, #40]
 695 0062 23F48012 		bic	r2, r3, #1048576
 696 0066 7B68     		ldr	r3, [r7, #4]
 697 0068 9A62     		str	r2, [r3, #40]
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 698              		.loc 1 801 0
 699 006a 7B68     		ldr	r3, [r7, #4]
 700 006c 1B68     		ldr	r3, [r3]
 701 006e 5B68     		ldr	r3, [r3, #4]
 702 0070 03F48063 		and	r3, r3, #1024
 703 0074 002B     		cmp	r3, #0
 704 0076 26D0     		beq	.L34
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 705              		.loc 1 803 0
 706 0078 7B68     		ldr	r3, [r7, #4]
 707 007a 9B6A     		ldr	r3, [r3, #40]
 708 007c 23F44053 		bic	r3, r3, #12288
 709 0080 43F48052 		orr	r2, r3, #4096
 710 0084 7B68     		ldr	r3, [r7, #4]
 711 0086 9A62     		str	r2, [r3, #40]
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 712              		.loc 1 801 0
 713 0088 1DE0     		b	.L34
 714              	.L32:
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 715              		.loc 1 809 0
 716 008a 7B68     		ldr	r3, [r7, #4]
 717 008c 9B6A     		ldr	r3, [r3, #40]
 718 008e 43F48012 		orr	r2, r3, #1048576
 719 0092 7B68     		ldr	r3, [r7, #4]
 720 0094 9A62     		str	r2, [r3, #40]
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 721              		.loc 1 813 0
 722 0096 7B68     		ldr	r3, [r7, #4]
 723 0098 1B68     		ldr	r3, [r3]
 724 009a 2F4A     		ldr	r2, .L42+4
 725 009c 9342     		cmp	r3, r2
 726 009e 04D0     		beq	.L35
 727              		.loc 1 813 0 is_stmt 0 discriminator 2
 728 00a0 7B68     		ldr	r3, [r7, #4]
 729 00a2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccU0R2Q.s 			page 28


 730 00a4 2B4A     		ldr	r2, .L42
 731 00a6 9342     		cmp	r3, r2
 732 00a8 0DD1     		bne	.L34
 733              	.L35:
 734              		.loc 1 813 0 discriminator 3
 735 00aa 2B4B     		ldr	r3, .L42+4
 736 00ac 5B68     		ldr	r3, [r3, #4]
 737 00ae 03F48063 		and	r3, r3, #1024
 738 00b2 002B     		cmp	r3, #0
 739 00b4 07D0     		beq	.L34
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 740              		.loc 1 815 0 is_stmt 1
 741 00b6 7B68     		ldr	r3, [r7, #4]
 742 00b8 9B6A     		ldr	r3, [r3, #40]
 743 00ba 23F44053 		bic	r3, r3, #12288
 744 00be 43F48052 		orr	r2, r3, #4096
 745 00c2 7B68     		ldr	r3, [r7, #4]
 746 00c4 9A62     		str	r2, [r3, #40]
 747              	.L34:
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 748              		.loc 1 820 0
 749 00c6 7B68     		ldr	r3, [r7, #4]
 750 00c8 9B6A     		ldr	r3, [r3, #40]
 751 00ca 03F48053 		and	r3, r3, #4096
 752 00ce 002B     		cmp	r3, #0
 753 00d0 06D0     		beq	.L36
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 754              		.loc 1 823 0
 755 00d2 7B68     		ldr	r3, [r7, #4]
 756 00d4 DB6A     		ldr	r3, [r3, #44]
 757 00d6 23F00602 		bic	r2, r3, #6
 758 00da 7B68     		ldr	r3, [r7, #4]
 759 00dc DA62     		str	r2, [r3, #44]
 760 00de 02E0     		b	.L37
 761              	.L36:
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 762              		.loc 1 828 0
 763 00e0 7B68     		ldr	r3, [r7, #4]
 764 00e2 0022     		movs	r2, #0
 765 00e4 DA62     		str	r2, [r3, #44]
 766              	.L37:
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
ARM GAS  /tmp/cccU0R2Q.s 			page 29


 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 767              		.loc 1 834 0
 768 00e6 7B68     		ldr	r3, [r7, #4]
 769 00e8 0022     		movs	r2, #0
 770 00ea 83F82420 		strb	r2, [r3, #36]
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 771              		.loc 1 838 0
 772 00ee 7B68     		ldr	r3, [r7, #4]
 773 00f0 1B68     		ldr	r3, [r3]
 774 00f2 6FF00202 		mvn	r2, #2
 775 00f6 1A60     		str	r2, [r3]
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 776              		.loc 1 850 0
 777 00f8 7B68     		ldr	r3, [r7, #4]
 778 00fa 1B68     		ldr	r3, [r3]
 779 00fc 9B68     		ldr	r3, [r3, #8]
 780 00fe 03F46023 		and	r3, r3, #917504
 781 0102 B3F5602F 		cmp	r3, #917504
 782 0106 13D1     		bne	.L38
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 783              		.loc 1 851 0 discriminator 1
 784 0108 7B68     		ldr	r3, [r7, #4]
 785 010a 1B68     		ldr	r3, [r3]
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 786              		.loc 1 850 0 discriminator 1
 787 010c 114A     		ldr	r2, .L42
 788 010e 9342     		cmp	r3, r2
 789 0110 05D1     		bne	.L39
 790              		.loc 1 851 0 discriminator 2
 791 0112 114B     		ldr	r3, .L42+4
 792 0114 5B68     		ldr	r3, [r3, #4]
 793 0116 03F47023 		and	r3, r3, #983040
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 794              		.loc 1 850 0 discriminator 2
 795 011a 002B     		cmp	r3, #0
 796 011c 08D1     		bne	.L38
 797              	.L39:
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 798              		.loc 1 854 0
 799 011e 7B68     		ldr	r3, [r7, #4]
 800 0120 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccU0R2Q.s 			page 30


 801 0122 9A68     		ldr	r2, [r3, #8]
 802 0124 7B68     		ldr	r3, [r7, #4]
 803 0126 1B68     		ldr	r3, [r3]
 804 0128 42F4A002 		orr	r2, r2, #5242880
 805 012c 9A60     		str	r2, [r3, #8]
 806 012e 0CE0     		b	.L41
 807              	.L38:
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 808              		.loc 1 859 0
 809 0130 7B68     		ldr	r3, [r7, #4]
 810 0132 1B68     		ldr	r3, [r3]
 811 0134 9A68     		ldr	r2, [r3, #8]
 812 0136 7B68     		ldr	r3, [r7, #4]
 813 0138 1B68     		ldr	r3, [r3]
 814 013a 42F48012 		orr	r2, r2, #1048576
 815 013e 9A60     		str	r2, [r3, #8]
 816 0140 03E0     		b	.L41
 817              	.L30:
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 818              		.loc 1 865 0
 819 0142 7B68     		ldr	r3, [r7, #4]
 820 0144 0022     		movs	r2, #0
 821 0146 83F82420 		strb	r2, [r3, #36]
 822              	.L41:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 823              		.loc 1 869 0
 824 014a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 825              	.L29:
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 826              		.loc 1 870 0
 827 014c 1846     		mov	r0, r3
 828 014e 1037     		adds	r7, r7, #16
 829              	.LCFI25:
 830              		.cfi_def_cfa_offset 8
 831 0150 BD46     		mov	sp, r7
 832              	.LCFI26:
 833              		.cfi_def_cfa_register 13
 834              		@ sp needed
 835 0152 80BD     		pop	{r7, pc}
 836              	.L43:
 837              		.align	2
 838              	.L42:
 839 0154 00280140 		.word	1073817600
 840 0158 00240140 		.word	1073816576
 841              		.cfi_endproc
ARM GAS  /tmp/cccU0R2Q.s 			page 31


 842              	.LFE70:
 844              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 845              		.align	1
 846              		.global	HAL_ADC_Stop
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 852              	HAL_ADC_Stop:
 853              	.LFB71:
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 854              		.loc 1 882 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 16
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858 0000 80B5     		push	{r7, lr}
 859              	.LCFI27:
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 84B0     		sub	sp, sp, #16
 864              	.LCFI28:
 865              		.cfi_def_cfa_offset 24
 866 0004 00AF     		add	r7, sp, #0
 867              	.LCFI29:
 868              		.cfi_def_cfa_register 7
 869 0006 7860     		str	r0, [r7, #4]
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 870              		.loc 1 883 0
 871 0008 0023     		movs	r3, #0
 872 000a FB73     		strb	r3, [r7, #15]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 873              		.loc 1 889 0
 874 000c 7B68     		ldr	r3, [r7, #4]
 875 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 876 0012 012B     		cmp	r3, #1
 877 0014 01D1     		bne	.L45
 878              		.loc 1 889 0 is_stmt 0 discriminator 1
 879 0016 0223     		movs	r3, #2
 880 0018 1AE0     		b	.L46
 881              	.L45:
ARM GAS  /tmp/cccU0R2Q.s 			page 32


 882              		.loc 1 889 0 discriminator 2
 883 001a 7B68     		ldr	r3, [r7, #4]
 884 001c 0122     		movs	r2, #1
 885 001e 83F82420 		strb	r2, [r3, #36]
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 886              		.loc 1 893 0 is_stmt 1 discriminator 2
 887 0022 7868     		ldr	r0, [r7, #4]
 888 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 889 0028 0346     		mov	r3, r0
 890 002a FB73     		strb	r3, [r7, #15]
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 891              		.loc 1 896 0 discriminator 2
 892 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 893 002e 002B     		cmp	r3, #0
 894 0030 09D1     		bne	.L47
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 895              		.loc 1 899 0
 896 0032 7B68     		ldr	r3, [r7, #4]
 897 0034 9B6A     		ldr	r3, [r3, #40]
 898 0036 23F48853 		bic	r3, r3, #4352
 899 003a 23F00103 		bic	r3, r3, #1
 900 003e 43F00102 		orr	r2, r3, #1
 901 0042 7B68     		ldr	r3, [r7, #4]
 902 0044 9A62     		str	r2, [r3, #40]
 903              	.L47:
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 904              		.loc 1 905 0
 905 0046 7B68     		ldr	r3, [r7, #4]
 906 0048 0022     		movs	r2, #0
 907 004a 83F82420 		strb	r2, [r3, #36]
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 908              		.loc 1 908 0
 909 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 910              	.L46:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 911              		.loc 1 909 0
 912 0050 1846     		mov	r0, r3
 913 0052 1037     		adds	r7, r7, #16
 914              	.LCFI30:
 915              		.cfi_def_cfa_offset 8
 916 0054 BD46     		mov	sp, r7
 917              	.LCFI31:
 918              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cccU0R2Q.s 			page 33


 919              		@ sp needed
 920 0056 80BD     		pop	{r7, pc}
 921              		.cfi_endproc
 922              	.LFE71:
 924              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 925              		.align	1
 926              		.global	HAL_ADC_PollForConversion
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu softvfp
 932              	HAL_ADC_PollForConversion:
 933              	.LFB72:
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 934              		.loc 1 926 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 24
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938 0000 90B5     		push	{r4, r7, lr}
 939              	.LCFI32:
 940              		.cfi_def_cfa_offset 12
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 7, -8
 943              		.cfi_offset 14, -4
 944 0002 87B0     		sub	sp, sp, #28
 945              	.LCFI33:
 946              		.cfi_def_cfa_offset 40
 947 0004 00AF     		add	r7, sp, #0
 948              	.LCFI34:
 949              		.cfi_def_cfa_register 7
 950 0006 7860     		str	r0, [r7, #4]
 951 0008 3960     		str	r1, [r7]
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 952              		.loc 1 927 0
 953 000a 0023     		movs	r3, #0
 954 000c 7B61     		str	r3, [r7, #20]
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 955              		.loc 1 931 0
ARM GAS  /tmp/cccU0R2Q.s 			page 34


 956 000e 0023     		movs	r3, #0
 957 0010 FB60     		str	r3, [r7, #12]
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 958              		.loc 1 932 0
 959 0012 0023     		movs	r3, #0
 960 0014 3B61     		str	r3, [r7, #16]
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 961              		.loc 1 938 0
 962 0016 FFF7FEFF 		bl	HAL_GetTick
 963 001a 7861     		str	r0, [r7, #20]
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 964              		.loc 1 943 0
 965 001c 7B68     		ldr	r3, [r7, #4]
 966 001e 1B68     		ldr	r3, [r3]
 967 0020 9B68     		ldr	r3, [r3, #8]
 968 0022 03F48073 		and	r3, r3, #256
 969 0026 002B     		cmp	r3, #0
 970 0028 0BD0     		beq	.L49
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 971              		.loc 1 946 0
 972 002a 7B68     		ldr	r3, [r7, #4]
 973 002c 9B6A     		ldr	r3, [r3, #40]
 974 002e 43F02002 		orr	r2, r3, #32
 975 0032 7B68     		ldr	r3, [r7, #4]
 976 0034 9A62     		str	r2, [r3, #40]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 977              		.loc 1 949 0
 978 0036 7B68     		ldr	r3, [r7, #4]
 979 0038 0022     		movs	r2, #0
 980 003a 83F82420 		strb	r2, [r3, #36]
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 981              		.loc 1 951 0
 982 003e 0123     		movs	r3, #1
 983 0040 C8E0     		b	.L50
 984              	.L49:
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
ARM GAS  /tmp/cccU0R2Q.s 			page 35


 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 985              		.loc 1 968 0
 986 0042 7B68     		ldr	r3, [r7, #4]
 987 0044 1B68     		ldr	r3, [r3]
 988 0046 5B68     		ldr	r3, [r3, #4]
 989 0048 03F48073 		and	r3, r3, #256
 990 004c 002B     		cmp	r3, #0
 991 004e 2AD1     		bne	.L51
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 992              		.loc 1 969 0 discriminator 1
 993 0050 7B68     		ldr	r3, [r7, #4]
 994 0052 1B68     		ldr	r3, [r3]
 995 0054 DB6A     		ldr	r3, [r3, #44]
 996 0056 03F47003 		and	r3, r3, #15728640
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 997              		.loc 1 968 0 discriminator 1
 998 005a 002B     		cmp	r3, #0
 999 005c 23D1     		bne	.L51
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1000              		.loc 1 972 0
 1001 005e 1AE0     		b	.L52
 1002              	.L54:
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1003              		.loc 1 975 0
 1004 0060 3B68     		ldr	r3, [r7]
 1005 0062 B3F1FF3F 		cmp	r3, #-1
 1006 0066 16D0     		beq	.L52
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1007              		.loc 1 977 0
 1008 0068 3B68     		ldr	r3, [r7]
 1009 006a 002B     		cmp	r3, #0
 1010 006c 07D0     		beq	.L53
 1011              		.loc 1 977 0 is_stmt 0 discriminator 1
 1012 006e FFF7FEFF 		bl	HAL_GetTick
 1013 0072 0246     		mov	r2, r0
 1014 0074 7B69     		ldr	r3, [r7, #20]
 1015 0076 D31A     		subs	r3, r2, r3
 1016 0078 3A68     		ldr	r2, [r7]
 1017 007a 9A42     		cmp	r2, r3
 1018 007c 0BD2     		bcs	.L52
 1019              	.L53:
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
ARM GAS  /tmp/cccU0R2Q.s 			page 36


 1020              		.loc 1 980 0 is_stmt 1
 1021 007e 7B68     		ldr	r3, [r7, #4]
 1022 0080 9B6A     		ldr	r3, [r3, #40]
 1023 0082 43F00402 		orr	r2, r3, #4
 1024 0086 7B68     		ldr	r3, [r7, #4]
 1025 0088 9A62     		str	r2, [r3, #40]
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1026              		.loc 1 983 0
 1027 008a 7B68     		ldr	r3, [r7, #4]
 1028 008c 0022     		movs	r2, #0
 1029 008e 83F82420 		strb	r2, [r3, #36]
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1030              		.loc 1 985 0
 1031 0092 0323     		movs	r3, #3
 1032 0094 9EE0     		b	.L50
 1033              	.L52:
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1034              		.loc 1 972 0
 1035 0096 7B68     		ldr	r3, [r7, #4]
 1036 0098 1B68     		ldr	r3, [r3]
 1037 009a 1B68     		ldr	r3, [r3]
 1038 009c 03F00203 		and	r3, r3, #2
 1039 00a0 002B     		cmp	r3, #0
 1040 00a2 DDD0     		beq	.L54
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1041              		.loc 1 968 0
 1042 00a4 6CE0     		b	.L55
 1043              	.L51:
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1044              		.loc 1 997 0
 1045 00a6 4D4B     		ldr	r3, .L69
 1046 00a8 1C68     		ldr	r4, [r3]
 1047 00aa 0220     		movs	r0, #2
 1048 00ac FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 1049 00b0 0346     		mov	r3, r0
 1050 00b2 B4FBF3F2 		udiv	r2, r4, r3
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1051              		.loc 1 998 0
 1052 00b6 7B68     		ldr	r3, [r7, #4]
 1053 00b8 1B68     		ldr	r3, [r3]
 1054 00ba 1969     		ldr	r1, [r3, #16]
 1055 00bc 484B     		ldr	r3, .L69+4
 1056 00be 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/cccU0R2Q.s 			page 37


 1057 00c0 002B     		cmp	r3, #0
 1058 00c2 18D1     		bne	.L56
 1059              		.loc 1 998 0 is_stmt 0 discriminator 1
 1060 00c4 7B68     		ldr	r3, [r7, #4]
 1061 00c6 1B68     		ldr	r3, [r3]
 1062 00c8 D968     		ldr	r1, [r3, #12]
 1063 00ca 464B     		ldr	r3, .L69+8
 1064 00cc 0B40     		ands	r3, r3, r1
 1065 00ce 002B     		cmp	r3, #0
 1066 00d0 11D1     		bne	.L56
 1067              		.loc 1 998 0 discriminator 3
 1068 00d2 7B68     		ldr	r3, [r7, #4]
 1069 00d4 1B68     		ldr	r3, [r3]
 1070 00d6 1969     		ldr	r1, [r3, #16]
 1071 00d8 434B     		ldr	r3, .L69+12
 1072 00da 0B40     		ands	r3, r3, r1
 1073 00dc 002B     		cmp	r3, #0
 1074 00de 08D1     		bne	.L57
 1075              		.loc 1 998 0 discriminator 5
 1076 00e0 7B68     		ldr	r3, [r7, #4]
 1077 00e2 1B68     		ldr	r3, [r3]
 1078 00e4 D968     		ldr	r1, [r3, #12]
 1079 00e6 414B     		ldr	r3, .L69+16
 1080 00e8 0B40     		ands	r3, r3, r1
 1081 00ea 002B     		cmp	r3, #0
 1082 00ec 01D1     		bne	.L57
 1083              		.loc 1 998 0 discriminator 7
 1084 00ee 1423     		movs	r3, #20
 1085 00f0 20E0     		b	.L59
 1086              	.L57:
 1087              		.loc 1 998 0 discriminator 8
 1088 00f2 2923     		movs	r3, #41
 1089 00f4 1EE0     		b	.L59
 1090              	.L56:
 1091              		.loc 1 998 0 discriminator 4
 1092 00f6 7B68     		ldr	r3, [r7, #4]
 1093 00f8 1B68     		ldr	r3, [r3]
 1094 00fa 1969     		ldr	r1, [r3, #16]
 1095 00fc 3A4B     		ldr	r3, .L69+12
 1096 00fe 0B40     		ands	r3, r3, r1
 1097 0100 002B     		cmp	r3, #0
 1098 0102 06D1     		bne	.L60
 1099              		.loc 1 998 0 discriminator 11
 1100 0104 7B68     		ldr	r3, [r7, #4]
 1101 0106 1B68     		ldr	r3, [r3]
 1102 0108 D968     		ldr	r1, [r3, #12]
 1103 010a 384B     		ldr	r3, .L69+16
 1104 010c 0B40     		ands	r3, r3, r1
 1105 010e 002B     		cmp	r3, #0
 1106 0110 0DD0     		beq	.L61
 1107              	.L60:
 1108              		.loc 1 998 0 discriminator 14
 1109 0112 7B68     		ldr	r3, [r7, #4]
 1110 0114 1B68     		ldr	r3, [r3]
 1111 0116 1969     		ldr	r1, [r3, #16]
 1112 0118 354B     		ldr	r3, .L69+20
 1113 011a 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/cccU0R2Q.s 			page 38


 1114 011c 002B     		cmp	r3, #0
 1115 011e 08D1     		bne	.L62
 1116              		.loc 1 998 0 discriminator 15
 1117 0120 7B68     		ldr	r3, [r7, #4]
 1118 0122 1B68     		ldr	r3, [r3]
 1119 0124 D968     		ldr	r1, [r3, #12]
 1120 0126 324B     		ldr	r3, .L69+20
 1121 0128 0B40     		ands	r3, r3, r1
 1122 012a 002B     		cmp	r3, #0
 1123 012c 01D1     		bne	.L62
 1124              	.L61:
 1125              		.loc 1 998 0 discriminator 17
 1126 012e 5423     		movs	r3, #84
 1127 0130 00E0     		b	.L59
 1128              	.L62:
 1129              		.loc 1 998 0 discriminator 18
 1130 0132 FC23     		movs	r3, #252
 1131              	.L59:
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1132              		.loc 1 996 0 is_stmt 1
 1133 0134 02FB03F3 		mul	r3, r2, r3
 1134 0138 3B61     		str	r3, [r7, #16]
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1135              		.loc 1 1000 0
 1136 013a 1DE0     		b	.L64
 1137              	.L67:
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1138              		.loc 1 1003 0
 1139 013c 3B68     		ldr	r3, [r7]
 1140 013e B3F1FF3F 		cmp	r3, #-1
 1141 0142 16D0     		beq	.L65
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1142              		.loc 1 1005 0
 1143 0144 3B68     		ldr	r3, [r7]
 1144 0146 002B     		cmp	r3, #0
 1145 0148 07D0     		beq	.L66
 1146              		.loc 1 1005 0 is_stmt 0 discriminator 1
 1147 014a FFF7FEFF 		bl	HAL_GetTick
 1148 014e 0246     		mov	r2, r0
 1149 0150 7B69     		ldr	r3, [r7, #20]
 1150 0152 D31A     		subs	r3, r2, r3
 1151 0154 3A68     		ldr	r2, [r7]
 1152 0156 9A42     		cmp	r2, r3
 1153 0158 0BD2     		bcs	.L65
 1154              	.L66:
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1155              		.loc 1 1008 0 is_stmt 1
 1156 015a 7B68     		ldr	r3, [r7, #4]
 1157 015c 9B6A     		ldr	r3, [r3, #40]
 1158 015e 43F00402 		orr	r2, r3, #4
 1159 0162 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 39


 1160 0164 9A62     		str	r2, [r3, #40]
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1161              		.loc 1 1011 0
 1162 0166 7B68     		ldr	r3, [r7, #4]
 1163 0168 0022     		movs	r2, #0
 1164 016a 83F82420 		strb	r2, [r3, #36]
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1165              		.loc 1 1013 0
 1166 016e 0323     		movs	r3, #3
 1167 0170 30E0     		b	.L50
 1168              	.L65:
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 1169              		.loc 1 1016 0
 1170 0172 FB68     		ldr	r3, [r7, #12]
 1171 0174 0133     		adds	r3, r3, #1
 1172 0176 FB60     		str	r3, [r7, #12]
 1173              	.L64:
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1174              		.loc 1 1000 0
 1175 0178 FB68     		ldr	r3, [r7, #12]
 1176 017a 3A69     		ldr	r2, [r7, #16]
 1177 017c 9A42     		cmp	r2, r3
 1178 017e DDD8     		bhi	.L67
 1179              	.L55:
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1180              		.loc 1 1021 0
 1181 0180 7B68     		ldr	r3, [r7, #4]
 1182 0182 1B68     		ldr	r3, [r3]
 1183 0184 6FF01202 		mvn	r2, #18
 1184 0188 1A60     		str	r2, [r3]
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1185              		.loc 1 1024 0
 1186 018a 7B68     		ldr	r3, [r7, #4]
 1187 018c 9B6A     		ldr	r3, [r3, #40]
 1188 018e 43F40072 		orr	r2, r3, #512
 1189 0192 7B68     		ldr	r3, [r7, #4]
 1190 0194 9A62     		str	r2, [r3, #40]
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1191              		.loc 1 1031 0
 1192 0196 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 40


 1193 0198 1B68     		ldr	r3, [r3]
 1194 019a 9B68     		ldr	r3, [r3, #8]
 1195 019c 03F46023 		and	r3, r3, #917504
 1196 01a0 B3F5602F 		cmp	r3, #917504
 1197 01a4 15D1     		bne	.L68
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1198              		.loc 1 1032 0 discriminator 1
 1199 01a6 7B68     		ldr	r3, [r7, #4]
 1200 01a8 DB68     		ldr	r3, [r3, #12]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1201              		.loc 1 1031 0 discriminator 1
 1202 01aa 002B     		cmp	r3, #0
 1203 01ac 11D1     		bne	.L68
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1204              		.loc 1 1035 0
 1205 01ae 7B68     		ldr	r3, [r7, #4]
 1206 01b0 9B6A     		ldr	r3, [r3, #40]
 1207 01b2 23F48072 		bic	r2, r3, #256
 1208 01b6 7B68     		ldr	r3, [r7, #4]
 1209 01b8 9A62     		str	r2, [r3, #40]
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1210              		.loc 1 1037 0
 1211 01ba 7B68     		ldr	r3, [r7, #4]
 1212 01bc 9B6A     		ldr	r3, [r3, #40]
 1213 01be 03F48053 		and	r3, r3, #4096
 1214 01c2 002B     		cmp	r3, #0
 1215 01c4 05D1     		bne	.L68
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1216              		.loc 1 1039 0
 1217 01c6 7B68     		ldr	r3, [r7, #4]
 1218 01c8 9B6A     		ldr	r3, [r3, #40]
 1219 01ca 43F00102 		orr	r2, r3, #1
 1220 01ce 7B68     		ldr	r3, [r7, #4]
 1221 01d0 9A62     		str	r2, [r3, #40]
 1222              	.L68:
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1223              		.loc 1 1044 0
 1224 01d2 0023     		movs	r3, #0
 1225              	.L50:
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1226              		.loc 1 1045 0
 1227 01d4 1846     		mov	r0, r3
 1228 01d6 1C37     		adds	r7, r7, #28
 1229              	.LCFI35:
 1230              		.cfi_def_cfa_offset 12
 1231 01d8 BD46     		mov	sp, r7
 1232              	.LCFI36:
 1233              		.cfi_def_cfa_register 13
 1234              		@ sp needed
ARM GAS  /tmp/cccU0R2Q.s 			page 41


 1235 01da 90BD     		pop	{r4, r7, pc}
 1236              	.L70:
 1237              		.align	2
 1238              	.L69:
 1239 01dc 00000000 		.word	SystemCoreClock
 1240 01e0 24499224 		.word	613566756
 1241 01e4 24499200 		.word	9586980
 1242 01e8 92244912 		.word	306783378
 1243 01ec 92244900 		.word	4793490
 1244 01f0 49922400 		.word	2396745
 1245              		.cfi_endproc
 1246              	.LFE72:
 1248              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1249              		.align	1
 1250              		.global	HAL_ADC_PollForEvent
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu softvfp
 1256              	HAL_ADC_PollForEvent:
 1257              	.LFB73:
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1258              		.loc 1 1057 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 24
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262 0000 80B5     		push	{r7, lr}
 1263              	.LCFI37:
 1264              		.cfi_def_cfa_offset 8
 1265              		.cfi_offset 7, -8
 1266              		.cfi_offset 14, -4
 1267 0002 86B0     		sub	sp, sp, #24
 1268              	.LCFI38:
 1269              		.cfi_def_cfa_offset 32
 1270 0004 00AF     		add	r7, sp, #0
 1271              	.LCFI39:
 1272              		.cfi_def_cfa_register 7
 1273 0006 F860     		str	r0, [r7, #12]
 1274 0008 B960     		str	r1, [r7, #8]
 1275 000a 7A60     		str	r2, [r7, #4]
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1276              		.loc 1 1058 0
 1277 000c 0023     		movs	r3, #0
 1278 000e 7B61     		str	r3, [r7, #20]
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/cccU0R2Q.s 			page 42


1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1279              		.loc 1 1065 0
 1280 0010 FFF7FEFF 		bl	HAL_GetTick
 1281 0014 7861     		str	r0, [r7, #20]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1282              		.loc 1 1068 0
 1283 0016 1AE0     		b	.L72
 1284              	.L75:
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1285              		.loc 1 1071 0
 1286 0018 7B68     		ldr	r3, [r7, #4]
 1287 001a B3F1FF3F 		cmp	r3, #-1
 1288 001e 16D0     		beq	.L72
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1289              		.loc 1 1073 0
 1290 0020 7B68     		ldr	r3, [r7, #4]
 1291 0022 002B     		cmp	r3, #0
 1292 0024 07D0     		beq	.L73
 1293              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1294 0026 FFF7FEFF 		bl	HAL_GetTick
 1295 002a 0246     		mov	r2, r0
 1296 002c 7B69     		ldr	r3, [r7, #20]
 1297 002e D31A     		subs	r3, r2, r3
 1298 0030 7A68     		ldr	r2, [r7, #4]
 1299 0032 9A42     		cmp	r2, r3
 1300 0034 0BD2     		bcs	.L72
 1301              	.L73:
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1302              		.loc 1 1076 0 is_stmt 1
 1303 0036 FB68     		ldr	r3, [r7, #12]
 1304 0038 9B6A     		ldr	r3, [r3, #40]
 1305 003a 43F00402 		orr	r2, r3, #4
 1306 003e FB68     		ldr	r3, [r7, #12]
 1307 0040 9A62     		str	r2, [r3, #40]
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1308              		.loc 1 1079 0
 1309 0042 FB68     		ldr	r3, [r7, #12]
 1310 0044 0022     		movs	r2, #0
 1311 0046 83F82420 		strb	r2, [r3, #36]
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
 1312              		.loc 1 1081 0
 1313 004a 0323     		movs	r3, #3
 1314 004c 13E0     		b	.L74
ARM GAS  /tmp/cccU0R2Q.s 			page 43


 1315              	.L72:
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1316              		.loc 1 1068 0
 1317 004e FB68     		ldr	r3, [r7, #12]
 1318 0050 1B68     		ldr	r3, [r3]
 1319 0052 1A68     		ldr	r2, [r3]
 1320 0054 BB68     		ldr	r3, [r7, #8]
 1321 0056 1340     		ands	r3, r3, r2
 1322 0058 BA68     		ldr	r2, [r7, #8]
 1323 005a 9A42     		cmp	r2, r3
 1324 005c DCD1     		bne	.L75
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1325              		.loc 1 1088 0
 1326 005e FB68     		ldr	r3, [r7, #12]
 1327 0060 9B6A     		ldr	r3, [r3, #40]
 1328 0062 43F48032 		orr	r2, r3, #65536
 1329 0066 FB68     		ldr	r3, [r7, #12]
 1330 0068 9A62     		str	r2, [r3, #40]
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1331              		.loc 1 1091 0
 1332 006a FB68     		ldr	r3, [r7, #12]
 1333 006c 1B68     		ldr	r3, [r3]
 1334 006e 6FF00102 		mvn	r2, #1
 1335 0072 1A60     		str	r2, [r3]
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1336              		.loc 1 1094 0
 1337 0074 0023     		movs	r3, #0
 1338              	.L74:
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1339              		.loc 1 1095 0
 1340 0076 1846     		mov	r0, r3
 1341 0078 1837     		adds	r7, r7, #24
 1342              	.LCFI40:
 1343              		.cfi_def_cfa_offset 8
 1344 007a BD46     		mov	sp, r7
 1345              	.LCFI41:
 1346              		.cfi_def_cfa_register 13
 1347              		@ sp needed
 1348 007c 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE73:
 1352              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1353              		.align	1
 1354              		.global	HAL_ADC_Start_IT
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
ARM GAS  /tmp/cccU0R2Q.s 			page 44


 1358              		.fpu softvfp
 1360              	HAL_ADC_Start_IT:
 1361              	.LFB74:
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1362              		.loc 1 1106 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 16
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0000 80B5     		push	{r7, lr}
 1367              	.LCFI42:
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0002 84B0     		sub	sp, sp, #16
 1372              	.LCFI43:
 1373              		.cfi_def_cfa_offset 24
 1374 0004 00AF     		add	r7, sp, #0
 1375              	.LCFI44:
 1376              		.cfi_def_cfa_register 7
 1377 0006 7860     		str	r0, [r7, #4]
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1378              		.loc 1 1107 0
 1379 0008 0023     		movs	r3, #0
 1380 000a FB73     		strb	r3, [r7, #15]
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1381              		.loc 1 1113 0
 1382 000c 7B68     		ldr	r3, [r7, #4]
 1383 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1384 0012 012B     		cmp	r3, #1
 1385 0014 01D1     		bne	.L77
 1386              		.loc 1 1113 0 is_stmt 0 discriminator 1
 1387 0016 0223     		movs	r3, #2
 1388 0018 A0E0     		b	.L78
 1389              	.L77:
 1390              		.loc 1 1113 0 discriminator 2
 1391 001a 7B68     		ldr	r3, [r7, #4]
 1392 001c 0122     		movs	r2, #1
 1393 001e 83F82420 		strb	r2, [r3, #36]
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1394              		.loc 1 1116 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/cccU0R2Q.s 			page 45


 1395 0022 7868     		ldr	r0, [r7, #4]
 1396 0024 FFF7FEFF 		bl	ADC_Enable
 1397 0028 0346     		mov	r3, r0
 1398 002a FB73     		strb	r3, [r7, #15]
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1399              		.loc 1 1119 0 discriminator 2
 1400 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1401 002e 002B     		cmp	r3, #0
 1402 0030 40F08F80 		bne	.L79
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1403              		.loc 1 1124 0
 1404 0034 7B68     		ldr	r3, [r7, #4]
 1405 0036 9B6A     		ldr	r3, [r3, #40]
 1406 0038 23F47063 		bic	r3, r3, #3840
 1407 003c 23F00103 		bic	r3, r3, #1
 1408 0040 43F48072 		orr	r2, r3, #256
 1409 0044 7B68     		ldr	r3, [r7, #4]
 1410 0046 9A62     		str	r2, [r3, #40]
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1411              		.loc 1 1131 0
 1412 0048 7B68     		ldr	r3, [r7, #4]
 1413 004a 1B68     		ldr	r3, [r3]
 1414 004c 454A     		ldr	r2, .L91
 1415 004e 9342     		cmp	r3, r2
 1416 0050 05D1     		bne	.L80
 1417              		.loc 1 1131 0 is_stmt 0 discriminator 1
 1418 0052 454B     		ldr	r3, .L91+4
 1419 0054 5B68     		ldr	r3, [r3, #4]
 1420 0056 03F47023 		and	r3, r3, #983040
 1421 005a 002B     		cmp	r3, #0
 1422 005c 15D1     		bne	.L81
 1423              	.L80:
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1424              		.loc 1 1134 0 is_stmt 1
 1425 005e 7B68     		ldr	r3, [r7, #4]
 1426 0060 9B6A     		ldr	r3, [r3, #40]
 1427 0062 23F48012 		bic	r2, r3, #1048576
 1428 0066 7B68     		ldr	r3, [r7, #4]
 1429 0068 9A62     		str	r2, [r3, #40]
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
ARM GAS  /tmp/cccU0R2Q.s 			page 46


 1430              		.loc 1 1138 0
 1431 006a 7B68     		ldr	r3, [r7, #4]
 1432 006c 1B68     		ldr	r3, [r3]
 1433 006e 5B68     		ldr	r3, [r3, #4]
 1434 0070 03F48063 		and	r3, r3, #1024
 1435 0074 002B     		cmp	r3, #0
 1436 0076 26D0     		beq	.L83
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1437              		.loc 1 1140 0
 1438 0078 7B68     		ldr	r3, [r7, #4]
 1439 007a 9B6A     		ldr	r3, [r3, #40]
 1440 007c 23F44053 		bic	r3, r3, #12288
 1441 0080 43F48052 		orr	r2, r3, #4096
 1442 0084 7B68     		ldr	r3, [r7, #4]
 1443 0086 9A62     		str	r2, [r3, #40]
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1444              		.loc 1 1138 0
 1445 0088 1DE0     		b	.L83
 1446              	.L81:
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1447              		.loc 1 1146 0
 1448 008a 7B68     		ldr	r3, [r7, #4]
 1449 008c 9B6A     		ldr	r3, [r3, #40]
 1450 008e 43F48012 		orr	r2, r3, #1048576
 1451 0092 7B68     		ldr	r3, [r7, #4]
 1452 0094 9A62     		str	r2, [r3, #40]
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1453              		.loc 1 1150 0
 1454 0096 7B68     		ldr	r3, [r7, #4]
 1455 0098 1B68     		ldr	r3, [r3]
 1456 009a 334A     		ldr	r2, .L91+4
 1457 009c 9342     		cmp	r3, r2
 1458 009e 04D0     		beq	.L84
 1459              		.loc 1 1150 0 is_stmt 0 discriminator 2
 1460 00a0 7B68     		ldr	r3, [r7, #4]
 1461 00a2 1B68     		ldr	r3, [r3]
 1462 00a4 2F4A     		ldr	r2, .L91
 1463 00a6 9342     		cmp	r3, r2
 1464 00a8 0DD1     		bne	.L83
 1465              	.L84:
 1466              		.loc 1 1150 0 discriminator 3
 1467 00aa 2F4B     		ldr	r3, .L91+4
 1468 00ac 5B68     		ldr	r3, [r3, #4]
 1469 00ae 03F48063 		and	r3, r3, #1024
 1470 00b2 002B     		cmp	r3, #0
 1471 00b4 07D0     		beq	.L83
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
ARM GAS  /tmp/cccU0R2Q.s 			page 47


 1472              		.loc 1 1152 0 is_stmt 1
 1473 00b6 7B68     		ldr	r3, [r7, #4]
 1474 00b8 9B6A     		ldr	r3, [r3, #40]
 1475 00ba 23F44053 		bic	r3, r3, #12288
 1476 00be 43F48052 		orr	r2, r3, #4096
 1477 00c2 7B68     		ldr	r3, [r7, #4]
 1478 00c4 9A62     		str	r2, [r3, #40]
 1479              	.L83:
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1480              		.loc 1 1157 0
 1481 00c6 7B68     		ldr	r3, [r7, #4]
 1482 00c8 9B6A     		ldr	r3, [r3, #40]
 1483 00ca 03F48053 		and	r3, r3, #4096
 1484 00ce 002B     		cmp	r3, #0
 1485 00d0 06D0     		beq	.L85
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1486              		.loc 1 1160 0
 1487 00d2 7B68     		ldr	r3, [r7, #4]
 1488 00d4 DB6A     		ldr	r3, [r3, #44]
 1489 00d6 23F00602 		bic	r2, r3, #6
 1490 00da 7B68     		ldr	r3, [r7, #4]
 1491 00dc DA62     		str	r2, [r3, #44]
 1492 00de 02E0     		b	.L86
 1493              	.L85:
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1494              		.loc 1 1165 0
 1495 00e0 7B68     		ldr	r3, [r7, #4]
 1496 00e2 0022     		movs	r2, #0
 1497 00e4 DA62     		str	r2, [r3, #44]
 1498              	.L86:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1499              		.loc 1 1171 0
 1500 00e6 7B68     		ldr	r3, [r7, #4]
 1501 00e8 0022     		movs	r2, #0
 1502 00ea 83F82420 		strb	r2, [r3, #36]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1503              		.loc 1 1175 0
 1504 00ee 7B68     		ldr	r3, [r7, #4]
 1505 00f0 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccU0R2Q.s 			page 48


 1506 00f2 6FF00202 		mvn	r2, #2
 1507 00f6 1A60     		str	r2, [r3]
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1508              		.loc 1 1178 0
 1509 00f8 7B68     		ldr	r3, [r7, #4]
 1510 00fa 1B68     		ldr	r3, [r3]
 1511 00fc 5A68     		ldr	r2, [r3, #4]
 1512 00fe 7B68     		ldr	r3, [r7, #4]
 1513 0100 1B68     		ldr	r3, [r3]
 1514 0102 42F02002 		orr	r2, r2, #32
 1515 0106 5A60     		str	r2, [r3, #4]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1516              		.loc 1 1187 0
 1517 0108 7B68     		ldr	r3, [r7, #4]
 1518 010a 1B68     		ldr	r3, [r3]
 1519 010c 9B68     		ldr	r3, [r3, #8]
 1520 010e 03F46023 		and	r3, r3, #917504
 1521 0112 B3F5602F 		cmp	r3, #917504
 1522 0116 13D1     		bne	.L87
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1523              		.loc 1 1188 0 discriminator 1
 1524 0118 7B68     		ldr	r3, [r7, #4]
 1525 011a 1B68     		ldr	r3, [r3]
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1526              		.loc 1 1187 0 discriminator 1
 1527 011c 114A     		ldr	r2, .L91
 1528 011e 9342     		cmp	r3, r2
 1529 0120 05D1     		bne	.L88
 1530              		.loc 1 1188 0 discriminator 2
 1531 0122 114B     		ldr	r3, .L91+4
 1532 0124 5B68     		ldr	r3, [r3, #4]
 1533 0126 03F47023 		and	r3, r3, #983040
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1534              		.loc 1 1187 0 discriminator 2
 1535 012a 002B     		cmp	r3, #0
 1536 012c 08D1     		bne	.L87
 1537              	.L88:
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1538              		.loc 1 1191 0
 1539 012e 7B68     		ldr	r3, [r7, #4]
 1540 0130 1B68     		ldr	r3, [r3]
 1541 0132 9A68     		ldr	r2, [r3, #8]
 1542 0134 7B68     		ldr	r3, [r7, #4]
 1543 0136 1B68     		ldr	r3, [r3]
 1544 0138 42F4A002 		orr	r2, r2, #5242880
ARM GAS  /tmp/cccU0R2Q.s 			page 49


 1545 013c 9A60     		str	r2, [r3, #8]
 1546 013e 0CE0     		b	.L90
 1547              	.L87:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1548              		.loc 1 1196 0
 1549 0140 7B68     		ldr	r3, [r7, #4]
 1550 0142 1B68     		ldr	r3, [r3]
 1551 0144 9A68     		ldr	r2, [r3, #8]
 1552 0146 7B68     		ldr	r3, [r7, #4]
 1553 0148 1B68     		ldr	r3, [r3]
 1554 014a 42F48012 		orr	r2, r2, #1048576
 1555 014e 9A60     		str	r2, [r3, #8]
 1556 0150 03E0     		b	.L90
 1557              	.L79:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1558              		.loc 1 1202 0
 1559 0152 7B68     		ldr	r3, [r7, #4]
 1560 0154 0022     		movs	r2, #0
 1561 0156 83F82420 		strb	r2, [r3, #36]
 1562              	.L90:
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1563              		.loc 1 1206 0
 1564 015a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1565              	.L78:
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1566              		.loc 1 1207 0
 1567 015c 1846     		mov	r0, r3
 1568 015e 1037     		adds	r7, r7, #16
 1569              	.LCFI45:
 1570              		.cfi_def_cfa_offset 8
 1571 0160 BD46     		mov	sp, r7
 1572              	.LCFI46:
 1573              		.cfi_def_cfa_register 13
 1574              		@ sp needed
 1575 0162 80BD     		pop	{r7, pc}
 1576              	.L92:
 1577              		.align	2
 1578              	.L91:
 1579 0164 00280140 		.word	1073817600
 1580 0168 00240140 		.word	1073816576
 1581              		.cfi_endproc
 1582              	.LFE74:
 1584              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1585              		.align	1
 1586              		.global	HAL_ADC_Stop_IT
ARM GAS  /tmp/cccU0R2Q.s 			page 50


 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu softvfp
 1592              	HAL_ADC_Stop_IT:
 1593              	.LFB75:
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1594              		.loc 1 1217 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 16
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              	.LCFI47:
 1600              		.cfi_def_cfa_offset 8
 1601              		.cfi_offset 7, -8
 1602              		.cfi_offset 14, -4
 1603 0002 84B0     		sub	sp, sp, #16
 1604              	.LCFI48:
 1605              		.cfi_def_cfa_offset 24
 1606 0004 00AF     		add	r7, sp, #0
 1607              	.LCFI49:
 1608              		.cfi_def_cfa_register 7
 1609 0006 7860     		str	r0, [r7, #4]
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1610              		.loc 1 1218 0
 1611 0008 0023     		movs	r3, #0
 1612 000a FB73     		strb	r3, [r7, #15]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1613              		.loc 1 1224 0
 1614 000c 7B68     		ldr	r3, [r7, #4]
 1615 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1616 0012 012B     		cmp	r3, #1
 1617 0014 01D1     		bne	.L94
 1618              		.loc 1 1224 0 is_stmt 0 discriminator 1
 1619 0016 0223     		movs	r3, #2
 1620 0018 22E0     		b	.L95
 1621              	.L94:
 1622              		.loc 1 1224 0 discriminator 2
 1623 001a 7B68     		ldr	r3, [r7, #4]
 1624 001c 0122     		movs	r2, #1
 1625 001e 83F82420 		strb	r2, [r3, #36]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
ARM GAS  /tmp/cccU0R2Q.s 			page 51


1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1626              		.loc 1 1228 0 is_stmt 1 discriminator 2
 1627 0022 7868     		ldr	r0, [r7, #4]
 1628 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1629 0028 0346     		mov	r3, r0
 1630 002a FB73     		strb	r3, [r7, #15]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1631              		.loc 1 1231 0 discriminator 2
 1632 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1633 002e 002B     		cmp	r3, #0
 1634 0030 11D1     		bne	.L96
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1635              		.loc 1 1234 0
 1636 0032 7B68     		ldr	r3, [r7, #4]
 1637 0034 1B68     		ldr	r3, [r3]
 1638 0036 5A68     		ldr	r2, [r3, #4]
 1639 0038 7B68     		ldr	r3, [r7, #4]
 1640 003a 1B68     		ldr	r3, [r3]
 1641 003c 22F02002 		bic	r2, r2, #32
 1642 0040 5A60     		str	r2, [r3, #4]
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1643              		.loc 1 1237 0
 1644 0042 7B68     		ldr	r3, [r7, #4]
 1645 0044 9B6A     		ldr	r3, [r3, #40]
 1646 0046 23F48853 		bic	r3, r3, #4352
 1647 004a 23F00103 		bic	r3, r3, #1
 1648 004e 43F00102 		orr	r2, r3, #1
 1649 0052 7B68     		ldr	r3, [r7, #4]
 1650 0054 9A62     		str	r2, [r3, #40]
 1651              	.L96:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1652              		.loc 1 1243 0
 1653 0056 7B68     		ldr	r3, [r7, #4]
 1654 0058 0022     		movs	r2, #0
 1655 005a 83F82420 		strb	r2, [r3, #36]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1656              		.loc 1 1246 0
 1657 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1658              	.L95:
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1659              		.loc 1 1247 0
 1660 0060 1846     		mov	r0, r3
 1661 0062 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cccU0R2Q.s 			page 52


 1662              	.LCFI50:
 1663              		.cfi_def_cfa_offset 8
 1664 0064 BD46     		mov	sp, r7
 1665              	.LCFI51:
 1666              		.cfi_def_cfa_register 13
 1667              		@ sp needed
 1668 0066 80BD     		pop	{r7, pc}
 1669              		.cfi_endproc
 1670              	.LFE75:
 1672              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1673              		.align	1
 1674              		.global	HAL_ADC_Start_DMA
 1675              		.syntax unified
 1676              		.thumb
 1677              		.thumb_func
 1678              		.fpu softvfp
 1680              	HAL_ADC_Start_DMA:
 1681              	.LFB76:
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1682              		.loc 1 1274 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 24
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686 0000 80B5     		push	{r7, lr}
 1687              	.LCFI52:
 1688              		.cfi_def_cfa_offset 8
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
 1691 0002 86B0     		sub	sp, sp, #24
 1692              	.LCFI53:
 1693              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cccU0R2Q.s 			page 53


 1694 0004 00AF     		add	r7, sp, #0
 1695              	.LCFI54:
 1696              		.cfi_def_cfa_register 7
 1697 0006 F860     		str	r0, [r7, #12]
 1698 0008 B960     		str	r1, [r7, #8]
 1699 000a 7A60     		str	r2, [r7, #4]
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1700              		.loc 1 1275 0
 1701 000c 0023     		movs	r3, #0
 1702 000e FB75     		strb	r3, [r7, #23]
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 1703              		.loc 1 1283 0
 1704 0010 FB68     		ldr	r3, [r7, #12]
 1705 0012 1B68     		ldr	r3, [r3]
 1706 0014 644A     		ldr	r2, .L115
 1707 0016 9342     		cmp	r3, r2
 1708 0018 04D0     		beq	.L98
 1709              		.loc 1 1283 0 is_stmt 0 discriminator 1
 1710 001a FB68     		ldr	r3, [r7, #12]
 1711 001c 1B68     		ldr	r3, [r3]
 1712 001e 634A     		ldr	r2, .L115+4
 1713 0020 9342     		cmp	r3, r2
 1714 0022 06D1     		bne	.L99
 1715              	.L98:
 1716              		.loc 1 1283 0 discriminator 3
 1717 0024 604B     		ldr	r3, .L115
 1718 0026 5B68     		ldr	r3, [r3, #4]
 1719 0028 03F47023 		and	r3, r3, #983040
 1720 002c 002B     		cmp	r3, #0
 1721 002e 40F0B380 		bne	.L100
 1722              	.L99:
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1723              		.loc 1 1286 0 is_stmt 1
 1724 0032 FB68     		ldr	r3, [r7, #12]
 1725 0034 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1726 0038 012B     		cmp	r3, #1
 1727 003a 01D1     		bne	.L101
 1728              		.loc 1 1286 0 is_stmt 0 discriminator 1
 1729 003c 0223     		movs	r3, #2
 1730 003e AEE0     		b	.L102
 1731              	.L101:
 1732              		.loc 1 1286 0 discriminator 2
 1733 0040 FB68     		ldr	r3, [r7, #12]
 1734 0042 0122     		movs	r2, #1
 1735 0044 83F82420 		strb	r2, [r3, #36]
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
ARM GAS  /tmp/cccU0R2Q.s 			page 54


 1736              		.loc 1 1289 0 is_stmt 1 discriminator 2
 1737 0048 F868     		ldr	r0, [r7, #12]
 1738 004a FFF7FEFF 		bl	ADC_Enable
 1739 004e 0346     		mov	r3, r0
 1740 0050 FB75     		strb	r3, [r7, #23]
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1741              		.loc 1 1292 0 discriminator 2
 1742 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1743 0054 002B     		cmp	r3, #0
 1744 0056 40F09A80 		bne	.L103
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1745              		.loc 1 1297 0
 1746 005a FB68     		ldr	r3, [r7, #12]
 1747 005c 9B6A     		ldr	r3, [r3, #40]
 1748 005e 23F47063 		bic	r3, r3, #3840
 1749 0062 23F00103 		bic	r3, r3, #1
 1750 0066 43F48072 		orr	r2, r3, #256
 1751 006a FB68     		ldr	r3, [r7, #12]
 1752 006c 9A62     		str	r2, [r3, #40]
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1753              		.loc 1 1304 0
 1754 006e FB68     		ldr	r3, [r7, #12]
 1755 0070 1B68     		ldr	r3, [r3]
 1756 0072 4E4A     		ldr	r2, .L115+4
 1757 0074 9342     		cmp	r3, r2
 1758 0076 05D1     		bne	.L104
 1759              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1760 0078 4B4B     		ldr	r3, .L115
 1761 007a 5B68     		ldr	r3, [r3, #4]
 1762 007c 03F47023 		and	r3, r3, #983040
 1763 0080 002B     		cmp	r3, #0
 1764 0082 15D1     		bne	.L105
 1765              	.L104:
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1766              		.loc 1 1307 0 is_stmt 1
 1767 0084 FB68     		ldr	r3, [r7, #12]
 1768 0086 9B6A     		ldr	r3, [r3, #40]
 1769 0088 23F48012 		bic	r2, r3, #1048576
 1770 008c FB68     		ldr	r3, [r7, #12]
 1771 008e 9A62     		str	r2, [r3, #40]
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
ARM GAS  /tmp/cccU0R2Q.s 			page 55


1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1772              		.loc 1 1311 0
 1773 0090 FB68     		ldr	r3, [r7, #12]
 1774 0092 1B68     		ldr	r3, [r3]
 1775 0094 5B68     		ldr	r3, [r3, #4]
 1776 0096 03F48063 		and	r3, r3, #1024
 1777 009a 002B     		cmp	r3, #0
 1778 009c 26D0     		beq	.L107
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1779              		.loc 1 1313 0
 1780 009e FB68     		ldr	r3, [r7, #12]
 1781 00a0 9B6A     		ldr	r3, [r3, #40]
 1782 00a2 23F44053 		bic	r3, r3, #12288
 1783 00a6 43F48052 		orr	r2, r3, #4096
 1784 00aa FB68     		ldr	r3, [r7, #12]
 1785 00ac 9A62     		str	r2, [r3, #40]
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1786              		.loc 1 1311 0
 1787 00ae 1DE0     		b	.L107
 1788              	.L105:
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1789              		.loc 1 1319 0
 1790 00b0 FB68     		ldr	r3, [r7, #12]
 1791 00b2 9B6A     		ldr	r3, [r3, #40]
 1792 00b4 43F48012 		orr	r2, r3, #1048576
 1793 00b8 FB68     		ldr	r3, [r7, #12]
 1794 00ba 9A62     		str	r2, [r3, #40]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1795              		.loc 1 1323 0
 1796 00bc FB68     		ldr	r3, [r7, #12]
 1797 00be 1B68     		ldr	r3, [r3]
 1798 00c0 394A     		ldr	r2, .L115
 1799 00c2 9342     		cmp	r3, r2
 1800 00c4 04D0     		beq	.L108
 1801              		.loc 1 1323 0 is_stmt 0 discriminator 2
 1802 00c6 FB68     		ldr	r3, [r7, #12]
 1803 00c8 1B68     		ldr	r3, [r3]
 1804 00ca 384A     		ldr	r2, .L115+4
 1805 00cc 9342     		cmp	r3, r2
 1806 00ce 0DD1     		bne	.L107
 1807              	.L108:
 1808              		.loc 1 1323 0 discriminator 3
 1809 00d0 354B     		ldr	r3, .L115
 1810 00d2 5B68     		ldr	r3, [r3, #4]
 1811 00d4 03F48063 		and	r3, r3, #1024
 1812 00d8 002B     		cmp	r3, #0
 1813 00da 07D0     		beq	.L107
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
ARM GAS  /tmp/cccU0R2Q.s 			page 56


1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1814              		.loc 1 1325 0 is_stmt 1
 1815 00dc FB68     		ldr	r3, [r7, #12]
 1816 00de 9B6A     		ldr	r3, [r3, #40]
 1817 00e0 23F44053 		bic	r3, r3, #12288
 1818 00e4 43F48052 		orr	r2, r3, #4096
 1819 00e8 FB68     		ldr	r3, [r7, #12]
 1820 00ea 9A62     		str	r2, [r3, #40]
 1821              	.L107:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1822              		.loc 1 1330 0
 1823 00ec FB68     		ldr	r3, [r7, #12]
 1824 00ee 9B6A     		ldr	r3, [r3, #40]
 1825 00f0 03F48053 		and	r3, r3, #4096
 1826 00f4 002B     		cmp	r3, #0
 1827 00f6 06D0     		beq	.L109
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1828              		.loc 1 1333 0
 1829 00f8 FB68     		ldr	r3, [r7, #12]
 1830 00fa DB6A     		ldr	r3, [r3, #44]
 1831 00fc 23F00602 		bic	r2, r3, #6
 1832 0100 FB68     		ldr	r3, [r7, #12]
 1833 0102 DA62     		str	r2, [r3, #44]
 1834 0104 02E0     		b	.L110
 1835              	.L109:
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1836              		.loc 1 1338 0
 1837 0106 FB68     		ldr	r3, [r7, #12]
 1838 0108 0022     		movs	r2, #0
 1839 010a DA62     		str	r2, [r3, #44]
 1840              	.L110:
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1841              		.loc 1 1344 0
 1842 010c FB68     		ldr	r3, [r7, #12]
 1843 010e 0022     		movs	r2, #0
 1844 0110 83F82420 		strb	r2, [r3, #36]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1845              		.loc 1 1347 0
 1846 0114 FB68     		ldr	r3, [r7, #12]
 1847 0116 1B6A     		ldr	r3, [r3, #32]
ARM GAS  /tmp/cccU0R2Q.s 			page 57


 1848 0118 254A     		ldr	r2, .L115+8
 1849 011a 9A62     		str	r2, [r3, #40]
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1850              		.loc 1 1350 0
 1851 011c FB68     		ldr	r3, [r7, #12]
 1852 011e 1B6A     		ldr	r3, [r3, #32]
 1853 0120 244A     		ldr	r2, .L115+12
 1854 0122 DA62     		str	r2, [r3, #44]
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1855              		.loc 1 1353 0
 1856 0124 FB68     		ldr	r3, [r7, #12]
 1857 0126 1B6A     		ldr	r3, [r3, #32]
 1858 0128 234A     		ldr	r2, .L115+16
 1859 012a 1A63     		str	r2, [r3, #48]
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1860              		.loc 1 1362 0
 1861 012c FB68     		ldr	r3, [r7, #12]
 1862 012e 1B68     		ldr	r3, [r3]
 1863 0130 6FF00202 		mvn	r2, #2
 1864 0134 1A60     		str	r2, [r3]
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1865              		.loc 1 1365 0
 1866 0136 FB68     		ldr	r3, [r7, #12]
 1867 0138 1B68     		ldr	r3, [r3]
 1868 013a 9A68     		ldr	r2, [r3, #8]
 1869 013c FB68     		ldr	r3, [r7, #12]
 1870 013e 1B68     		ldr	r3, [r3]
 1871 0140 42F48072 		orr	r2, r2, #256
 1872 0144 9A60     		str	r2, [r3, #8]
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1873              		.loc 1 1368 0
 1874 0146 FB68     		ldr	r3, [r7, #12]
 1875 0148 186A     		ldr	r0, [r3, #32]
 1876 014a FB68     		ldr	r3, [r7, #12]
 1877 014c 1B68     		ldr	r3, [r3]
 1878 014e 4C33     		adds	r3, r3, #76
 1879 0150 1946     		mov	r1, r3
 1880 0152 BA68     		ldr	r2, [r7, #8]
 1881 0154 7B68     		ldr	r3, [r7, #4]
 1882 0156 FFF7FEFF 		bl	HAL_DMA_Start_IT
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/cccU0R2Q.s 			page 58


1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1883              		.loc 1 1374 0
 1884 015a FB68     		ldr	r3, [r7, #12]
 1885 015c 1B68     		ldr	r3, [r3]
 1886 015e 9B68     		ldr	r3, [r3, #8]
 1887 0160 03F46023 		and	r3, r3, #917504
 1888 0164 B3F5602F 		cmp	r3, #917504
 1889 0168 08D1     		bne	.L111
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1890              		.loc 1 1377 0
 1891 016a FB68     		ldr	r3, [r7, #12]
 1892 016c 1B68     		ldr	r3, [r3]
 1893 016e 9A68     		ldr	r2, [r3, #8]
 1894 0170 FB68     		ldr	r3, [r7, #12]
 1895 0172 1B68     		ldr	r3, [r3]
 1896 0174 42F4A002 		orr	r2, r2, #5242880
 1897 0178 9A60     		str	r2, [r3, #8]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1898              		.loc 1 1292 0
 1899 017a 0FE0     		b	.L114
 1900              	.L111:
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1901              		.loc 1 1382 0
 1902 017c FB68     		ldr	r3, [r7, #12]
 1903 017e 1B68     		ldr	r3, [r3]
 1904 0180 9A68     		ldr	r2, [r3, #8]
 1905 0182 FB68     		ldr	r3, [r7, #12]
 1906 0184 1B68     		ldr	r3, [r3]
 1907 0186 42F48012 		orr	r2, r2, #1048576
 1908 018a 9A60     		str	r2, [r3, #8]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1909              		.loc 1 1292 0
 1910 018c 06E0     		b	.L114
 1911              	.L103:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1912              		.loc 1 1388 0
 1913 018e FB68     		ldr	r3, [r7, #12]
 1914 0190 0022     		movs	r2, #0
 1915 0192 83F82420 		strb	r2, [r3, #36]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1916              		.loc 1 1292 0
 1917 0196 01E0     		b	.L114
ARM GAS  /tmp/cccU0R2Q.s 			page 59


 1918              	.L100:
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 1919              		.loc 1 1393 0
 1920 0198 0123     		movs	r3, #1
 1921 019a FB75     		strb	r3, [r7, #23]
 1922              	.L114:
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1923              		.loc 1 1397 0
 1924 019c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1925              	.L102:
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1926              		.loc 1 1398 0
 1927 019e 1846     		mov	r0, r3
 1928 01a0 1837     		adds	r7, r7, #24
 1929              	.LCFI55:
 1930              		.cfi_def_cfa_offset 8
 1931 01a2 BD46     		mov	sp, r7
 1932              	.LCFI56:
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 01a4 80BD     		pop	{r7, pc}
 1936              	.L116:
 1937 01a6 00BF     		.align	2
 1938              	.L115:
 1939 01a8 00240140 		.word	1073816576
 1940 01ac 00280140 		.word	1073817600
 1941 01b0 00000000 		.word	ADC_DMAConvCplt
 1942 01b4 00000000 		.word	ADC_DMAHalfConvCplt
 1943 01b8 00000000 		.word	ADC_DMAError
 1944              		.cfi_endproc
 1945              	.LFE76:
 1947              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1948              		.align	1
 1949              		.global	HAL_ADC_Stop_DMA
 1950              		.syntax unified
 1951              		.thumb
 1952              		.thumb_func
 1953              		.fpu softvfp
 1955              	HAL_ADC_Stop_DMA:
 1956              	.LFB77:
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
ARM GAS  /tmp/cccU0R2Q.s 			page 60


1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1957              		.loc 1 1415 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 16
 1960              		@ frame_needed = 1, uses_anonymous_args = 0
 1961 0000 80B5     		push	{r7, lr}
 1962              	.LCFI57:
 1963              		.cfi_def_cfa_offset 8
 1964              		.cfi_offset 7, -8
 1965              		.cfi_offset 14, -4
 1966 0002 84B0     		sub	sp, sp, #16
 1967              	.LCFI58:
 1968              		.cfi_def_cfa_offset 24
 1969 0004 00AF     		add	r7, sp, #0
 1970              	.LCFI59:
 1971              		.cfi_def_cfa_register 7
 1972 0006 7860     		str	r0, [r7, #4]
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1973              		.loc 1 1416 0
 1974 0008 0023     		movs	r3, #0
 1975 000a FB73     		strb	r3, [r7, #15]
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1976              		.loc 1 1422 0
 1977 000c 7B68     		ldr	r3, [r7, #4]
 1978 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1979 0012 012B     		cmp	r3, #1
 1980 0014 01D1     		bne	.L118
 1981              		.loc 1 1422 0 is_stmt 0 discriminator 1
 1982 0016 0223     		movs	r3, #2
 1983 0018 33E0     		b	.L119
 1984              	.L118:
 1985              		.loc 1 1422 0 discriminator 2
 1986 001a 7B68     		ldr	r3, [r7, #4]
 1987 001c 0122     		movs	r2, #1
 1988 001e 83F82420 		strb	r2, [r3, #36]
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1989              		.loc 1 1426 0 is_stmt 1 discriminator 2
 1990 0022 7868     		ldr	r0, [r7, #4]
 1991 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1992 0028 0346     		mov	r3, r0
 1993 002a FB73     		strb	r3, [r7, #15]
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
ARM GAS  /tmp/cccU0R2Q.s 			page 61


1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1994              		.loc 1 1429 0 discriminator 2
 1995 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1996 002e 002B     		cmp	r3, #0
 1997 0030 22D1     		bne	.L120
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1998              		.loc 1 1432 0
 1999 0032 7B68     		ldr	r3, [r7, #4]
 2000 0034 1B68     		ldr	r3, [r3]
 2001 0036 9A68     		ldr	r2, [r3, #8]
 2002 0038 7B68     		ldr	r3, [r7, #4]
 2003 003a 1B68     		ldr	r3, [r3]
 2004 003c 22F48072 		bic	r2, r2, #256
 2005 0040 9A60     		str	r2, [r3, #8]
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2006              		.loc 1 1436 0
 2007 0042 7B68     		ldr	r3, [r7, #4]
 2008 0044 1B6A     		ldr	r3, [r3, #32]
 2009 0046 1846     		mov	r0, r3
 2010 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 2011 004c 0346     		mov	r3, r0
 2012 004e FB73     		strb	r3, [r7, #15]
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 2013              		.loc 1 1439 0
 2014 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2015 0052 002B     		cmp	r3, #0
 2016 0054 0AD1     		bne	.L121
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 2017              		.loc 1 1442 0
 2018 0056 7B68     		ldr	r3, [r7, #4]
 2019 0058 9B6A     		ldr	r3, [r3, #40]
 2020 005a 23F48853 		bic	r3, r3, #4352
 2021 005e 23F00103 		bic	r3, r3, #1
 2022 0062 43F00102 		orr	r2, r3, #1
 2023 0066 7B68     		ldr	r3, [r7, #4]
 2024 0068 9A62     		str	r2, [r3, #40]
 2025 006a 05E0     		b	.L120
 2026              	.L121:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2027              		.loc 1 1449 0
 2028 006c 7B68     		ldr	r3, [r7, #4]
 2029 006e 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/cccU0R2Q.s 			page 62


 2030 0070 43F04002 		orr	r2, r3, #64
 2031 0074 7B68     		ldr	r3, [r7, #4]
 2032 0076 9A62     		str	r2, [r3, #40]
 2033              	.L120:
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2034              		.loc 1 1454 0
 2035 0078 7B68     		ldr	r3, [r7, #4]
 2036 007a 0022     		movs	r2, #0
 2037 007c 83F82420 		strb	r2, [r3, #36]
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2038              		.loc 1 1457 0
 2039 0080 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2040              	.L119:
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2041              		.loc 1 1458 0
 2042 0082 1846     		mov	r0, r3
 2043 0084 1037     		adds	r7, r7, #16
 2044              	.LCFI60:
 2045              		.cfi_def_cfa_offset 8
 2046 0086 BD46     		mov	sp, r7
 2047              	.LCFI61:
 2048              		.cfi_def_cfa_register 13
 2049              		@ sp needed
 2050 0088 80BD     		pop	{r7, pc}
 2051              		.cfi_endproc
 2052              	.LFE77:
 2054              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2055              		.align	1
 2056              		.global	HAL_ADC_GetValue
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu softvfp
 2062              	HAL_ADC_GetValue:
 2063              	.LFB78:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
ARM GAS  /tmp/cccU0R2Q.s 			page 63


1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2064              		.loc 1 1480 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 8
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0000 80B4     		push	{r7}
 2070              	.LCFI62:
 2071              		.cfi_def_cfa_offset 4
 2072              		.cfi_offset 7, -4
 2073 0002 83B0     		sub	sp, sp, #12
 2074              	.LCFI63:
 2075              		.cfi_def_cfa_offset 16
 2076 0004 00AF     		add	r7, sp, #0
 2077              	.LCFI64:
 2078              		.cfi_def_cfa_register 7
 2079 0006 7860     		str	r0, [r7, #4]
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 2080              		.loc 1 1488 0
 2081 0008 7B68     		ldr	r3, [r7, #4]
 2082 000a 1B68     		ldr	r3, [r3]
 2083 000c DB6C     		ldr	r3, [r3, #76]
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2084              		.loc 1 1489 0
 2085 000e 1846     		mov	r0, r3
 2086 0010 0C37     		adds	r7, r7, #12
 2087              	.LCFI65:
 2088              		.cfi_def_cfa_offset 4
 2089 0012 BD46     		mov	sp, r7
 2090              	.LCFI66:
 2091              		.cfi_def_cfa_register 13
 2092              		@ sp needed
 2093 0014 80BC     		pop	{r7}
 2094              	.LCFI67:
 2095              		.cfi_restore 7
 2096              		.cfi_def_cfa_offset 0
 2097 0016 7047     		bx	lr
 2098              		.cfi_endproc
 2099              	.LFE78:
 2101              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2102              		.align	1
 2103              		.global	HAL_ADC_IRQHandler
 2104              		.syntax unified
 2105              		.thumb
 2106              		.thumb_func
ARM GAS  /tmp/cccU0R2Q.s 			page 64


 2107              		.fpu softvfp
 2109              	HAL_ADC_IRQHandler:
 2110              	.LFB79:
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2111              		.loc 1 1497 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 8
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115 0000 80B5     		push	{r7, lr}
 2116              	.LCFI68:
 2117              		.cfi_def_cfa_offset 8
 2118              		.cfi_offset 7, -8
 2119              		.cfi_offset 14, -4
 2120 0002 82B0     		sub	sp, sp, #8
 2121              	.LCFI69:
 2122              		.cfi_def_cfa_offset 16
 2123 0004 00AF     		add	r7, sp, #0
 2124              	.LCFI70:
 2125              		.cfi_def_cfa_register 7
 2126 0006 7860     		str	r0, [r7, #4]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 2127              		.loc 1 1505 0
 2128 0008 7B68     		ldr	r3, [r7, #4]
 2129 000a 1B68     		ldr	r3, [r3]
 2130 000c 5B68     		ldr	r3, [r3, #4]
 2131 000e 03F02003 		and	r3, r3, #32
 2132 0012 202B     		cmp	r3, #32
 2133 0014 40D1     		bne	.L125
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 2134              		.loc 1 1507 0
 2135 0016 7B68     		ldr	r3, [r7, #4]
 2136 0018 1B68     		ldr	r3, [r3]
 2137 001a 1B68     		ldr	r3, [r3]
 2138 001c 03F00203 		and	r3, r3, #2
 2139 0020 022B     		cmp	r3, #2
 2140 0022 39D1     		bne	.L125
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2141              		.loc 1 1510 0
 2142 0024 7B68     		ldr	r3, [r7, #4]
 2143 0026 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/cccU0R2Q.s 			page 65


 2144 0028 03F01003 		and	r3, r3, #16
 2145 002c 002B     		cmp	r3, #0
 2146 002e 05D1     		bne	.L126
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2147              		.loc 1 1513 0
 2148 0030 7B68     		ldr	r3, [r7, #4]
 2149 0032 9B6A     		ldr	r3, [r3, #40]
 2150 0034 43F40072 		orr	r2, r3, #512
 2151 0038 7B68     		ldr	r3, [r7, #4]
 2152 003a 9A62     		str	r2, [r3, #40]
 2153              	.L126:
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2154              		.loc 1 1521 0
 2155 003c 7B68     		ldr	r3, [r7, #4]
 2156 003e 1B68     		ldr	r3, [r3]
 2157 0040 9B68     		ldr	r3, [r3, #8]
 2158 0042 03F46023 		and	r3, r3, #917504
 2159 0046 B3F5602F 		cmp	r3, #917504
 2160 004a 1DD1     		bne	.L127
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2161              		.loc 1 1522 0 discriminator 1
 2162 004c 7B68     		ldr	r3, [r7, #4]
 2163 004e DB68     		ldr	r3, [r3, #12]
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2164              		.loc 1 1521 0 discriminator 1
 2165 0050 002B     		cmp	r3, #0
 2166 0052 19D1     		bne	.L127
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 2167              		.loc 1 1525 0
 2168 0054 7B68     		ldr	r3, [r7, #4]
 2169 0056 1B68     		ldr	r3, [r3]
 2170 0058 5A68     		ldr	r2, [r3, #4]
 2171 005a 7B68     		ldr	r3, [r7, #4]
 2172 005c 1B68     		ldr	r3, [r3]
 2173 005e 22F02002 		bic	r2, r2, #32
 2174 0062 5A60     		str	r2, [r3, #4]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 2175              		.loc 1 1528 0
 2176 0064 7B68     		ldr	r3, [r7, #4]
 2177 0066 9B6A     		ldr	r3, [r3, #40]
 2178 0068 23F48072 		bic	r2, r3, #256
 2179 006c 7B68     		ldr	r3, [r7, #4]
 2180 006e 9A62     		str	r2, [r3, #40]
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
ARM GAS  /tmp/cccU0R2Q.s 			page 66


1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2181              		.loc 1 1530 0
 2182 0070 7B68     		ldr	r3, [r7, #4]
 2183 0072 9B6A     		ldr	r3, [r3, #40]
 2184 0074 03F48053 		and	r3, r3, #4096
 2185 0078 002B     		cmp	r3, #0
 2186 007a 05D1     		bne	.L127
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2187              		.loc 1 1532 0
 2188 007c 7B68     		ldr	r3, [r7, #4]
 2189 007e 9B6A     		ldr	r3, [r3, #40]
 2190 0080 43F00102 		orr	r2, r3, #1
 2191 0084 7B68     		ldr	r3, [r7, #4]
 2192 0086 9A62     		str	r2, [r3, #40]
 2193              	.L127:
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2194              		.loc 1 1537 0
 2195 0088 7868     		ldr	r0, [r7, #4]
 2196 008a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2197              		.loc 1 1540 0
 2198 008e 7B68     		ldr	r3, [r7, #4]
 2199 0090 1B68     		ldr	r3, [r3]
 2200 0092 6FF01202 		mvn	r2, #18
 2201 0096 1A60     		str	r2, [r3]
 2202              	.L125:
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 2203              		.loc 1 1545 0
 2204 0098 7B68     		ldr	r3, [r7, #4]
 2205 009a 1B68     		ldr	r3, [r3]
 2206 009c 5B68     		ldr	r3, [r3, #4]
 2207 009e 03F08003 		and	r3, r3, #128
 2208 00a2 802B     		cmp	r3, #128
 2209 00a4 4FD1     		bne	.L128
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 2210              		.loc 1 1547 0
 2211 00a6 7B68     		ldr	r3, [r7, #4]
 2212 00a8 1B68     		ldr	r3, [r3]
 2213 00aa 1B68     		ldr	r3, [r3]
 2214 00ac 03F00403 		and	r3, r3, #4
 2215 00b0 042B     		cmp	r3, #4
 2216 00b2 48D1     		bne	.L128
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
ARM GAS  /tmp/cccU0R2Q.s 			page 67


 2217              		.loc 1 1550 0
 2218 00b4 7B68     		ldr	r3, [r7, #4]
 2219 00b6 9B6A     		ldr	r3, [r3, #40]
 2220 00b8 03F01003 		and	r3, r3, #16
 2221 00bc 002B     		cmp	r3, #0
 2222 00be 05D1     		bne	.L129
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2223              		.loc 1 1553 0
 2224 00c0 7B68     		ldr	r3, [r7, #4]
 2225 00c2 9B6A     		ldr	r3, [r3, #40]
 2226 00c4 43F40052 		orr	r2, r3, #8192
 2227 00c8 7B68     		ldr	r3, [r7, #4]
 2228 00ca 9A62     		str	r2, [r3, #40]
 2229              	.L129:
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2230              		.loc 1 1563 0
 2231 00cc 7B68     		ldr	r3, [r7, #4]
 2232 00ce 1B68     		ldr	r3, [r3]
 2233 00d0 9B68     		ldr	r3, [r3, #8]
 2234 00d2 03F4E043 		and	r3, r3, #28672
 2235 00d6 B3F5E04F 		cmp	r3, #28672
 2236 00da 12D0     		beq	.L130
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2237              		.loc 1 1564 0 discriminator 1
 2238 00dc 7B68     		ldr	r3, [r7, #4]
 2239 00de 1B68     		ldr	r3, [r3]
 2240 00e0 5B68     		ldr	r3, [r3, #4]
 2241 00e2 03F48063 		and	r3, r3, #1024
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2242              		.loc 1 1563 0 discriminator 1
 2243 00e6 002B     		cmp	r3, #0
 2244 00e8 25D1     		bne	.L131
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2245              		.loc 1 1565 0
 2246 00ea 7B68     		ldr	r3, [r7, #4]
 2247 00ec 1B68     		ldr	r3, [r3]
 2248 00ee 9B68     		ldr	r3, [r3, #8]
 2249 00f0 03F46023 		and	r3, r3, #917504
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2250              		.loc 1 1564 0
 2251 00f4 B3F5602F 		cmp	r3, #917504
 2252 00f8 1DD1     		bne	.L131
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2253              		.loc 1 1566 0
 2254 00fa 7B68     		ldr	r3, [r7, #4]
 2255 00fc DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cccU0R2Q.s 			page 68


1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2256              		.loc 1 1565 0
 2257 00fe 002B     		cmp	r3, #0
 2258 0100 19D1     		bne	.L131
 2259              	.L130:
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2260              		.loc 1 1569 0
 2261 0102 7B68     		ldr	r3, [r7, #4]
 2262 0104 1B68     		ldr	r3, [r3]
 2263 0106 5A68     		ldr	r2, [r3, #4]
 2264 0108 7B68     		ldr	r3, [r7, #4]
 2265 010a 1B68     		ldr	r3, [r3]
 2266 010c 22F08002 		bic	r2, r2, #128
 2267 0110 5A60     		str	r2, [r3, #4]
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2268              		.loc 1 1572 0
 2269 0112 7B68     		ldr	r3, [r7, #4]
 2270 0114 9B6A     		ldr	r3, [r3, #40]
 2271 0116 23F48052 		bic	r2, r3, #4096
 2272 011a 7B68     		ldr	r3, [r7, #4]
 2273 011c 9A62     		str	r2, [r3, #40]
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2274              		.loc 1 1574 0
 2275 011e 7B68     		ldr	r3, [r7, #4]
 2276 0120 9B6A     		ldr	r3, [r3, #40]
 2277 0122 03F48073 		and	r3, r3, #256
 2278 0126 002B     		cmp	r3, #0
 2279 0128 05D1     		bne	.L131
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2280              		.loc 1 1576 0
 2281 012a 7B68     		ldr	r3, [r7, #4]
 2282 012c 9B6A     		ldr	r3, [r3, #40]
 2283 012e 43F00102 		orr	r2, r3, #1
 2284 0132 7B68     		ldr	r3, [r7, #4]
 2285 0134 9A62     		str	r2, [r3, #40]
 2286              	.L131:
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2287              		.loc 1 1581 0
 2288 0136 7868     		ldr	r0, [r7, #4]
 2289 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2290              		.loc 1 1584 0
 2291 013c 7B68     		ldr	r3, [r7, #4]
 2292 013e 1B68     		ldr	r3, [r3]
 2293 0140 6FF00C02 		mvn	r2, #12
ARM GAS  /tmp/cccU0R2Q.s 			page 69


 2294 0144 1A60     		str	r2, [r3]
 2295              	.L128:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2296              		.loc 1 1589 0
 2297 0146 7B68     		ldr	r3, [r7, #4]
 2298 0148 1B68     		ldr	r3, [r3]
 2299 014a 5B68     		ldr	r3, [r3, #4]
 2300 014c 03F04003 		and	r3, r3, #64
 2301 0150 402B     		cmp	r3, #64
 2302 0152 14D1     		bne	.L133
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 2303              		.loc 1 1591 0
 2304 0154 7B68     		ldr	r3, [r7, #4]
 2305 0156 1B68     		ldr	r3, [r3]
 2306 0158 1B68     		ldr	r3, [r3]
 2307 015a 03F00103 		and	r3, r3, #1
 2308 015e 012B     		cmp	r3, #1
 2309 0160 0DD1     		bne	.L133
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2310              		.loc 1 1594 0
 2311 0162 7B68     		ldr	r3, [r7, #4]
 2312 0164 9B6A     		ldr	r3, [r3, #40]
 2313 0166 43F48032 		orr	r2, r3, #65536
 2314 016a 7B68     		ldr	r3, [r7, #4]
 2315 016c 9A62     		str	r2, [r3, #40]
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2316              		.loc 1 1597 0
 2317 016e 7868     		ldr	r0, [r7, #4]
 2318 0170 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2319              		.loc 1 1600 0
 2320 0174 7B68     		ldr	r3, [r7, #4]
 2321 0176 1B68     		ldr	r3, [r3]
 2322 0178 6FF00102 		mvn	r2, #1
 2323 017c 1A60     		str	r2, [r3]
 2324              	.L133:
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2325              		.loc 1 1604 0
 2326 017e 00BF     		nop
 2327 0180 0837     		adds	r7, r7, #8
 2328              	.LCFI71:
 2329              		.cfi_def_cfa_offset 8
 2330 0182 BD46     		mov	sp, r7
ARM GAS  /tmp/cccU0R2Q.s 			page 70


 2331              	.LCFI72:
 2332              		.cfi_def_cfa_register 13
 2333              		@ sp needed
 2334 0184 80BD     		pop	{r7, pc}
 2335              		.cfi_endproc
 2336              	.LFE79:
 2338              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2339              		.align	1
 2340              		.weak	HAL_ADC_ConvCpltCallback
 2341              		.syntax unified
 2342              		.thumb
 2343              		.thumb_func
 2344              		.fpu softvfp
 2346              	HAL_ADC_ConvCpltCallback:
 2347              	.LFB80:
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2348              		.loc 1 1612 0
 2349              		.cfi_startproc
 2350              		@ args = 0, pretend = 0, frame = 8
 2351              		@ frame_needed = 1, uses_anonymous_args = 0
 2352              		@ link register save eliminated.
 2353 0000 80B4     		push	{r7}
 2354              	.LCFI73:
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0002 83B0     		sub	sp, sp, #12
 2358              	.LCFI74:
 2359              		.cfi_def_cfa_offset 16
 2360 0004 00AF     		add	r7, sp, #0
 2361              	.LCFI75:
 2362              		.cfi_def_cfa_register 7
 2363 0006 7860     		str	r0, [r7, #4]
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2364              		.loc 1 1618 0
 2365 0008 00BF     		nop
 2366 000a 0C37     		adds	r7, r7, #12
 2367              	.LCFI76:
 2368              		.cfi_def_cfa_offset 4
 2369 000c BD46     		mov	sp, r7
 2370              	.LCFI77:
 2371              		.cfi_def_cfa_register 13
 2372              		@ sp needed
 2373 000e 80BC     		pop	{r7}
 2374              	.LCFI78:
 2375              		.cfi_restore 7
ARM GAS  /tmp/cccU0R2Q.s 			page 71


 2376              		.cfi_def_cfa_offset 0
 2377 0010 7047     		bx	lr
 2378              		.cfi_endproc
 2379              	.LFE80:
 2381              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2382              		.align	1
 2383              		.weak	HAL_ADC_ConvHalfCpltCallback
 2384              		.syntax unified
 2385              		.thumb
 2386              		.thumb_func
 2387              		.fpu softvfp
 2389              	HAL_ADC_ConvHalfCpltCallback:
 2390              	.LFB81:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2391              		.loc 1 1626 0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 8
 2394              		@ frame_needed = 1, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
 2396 0000 80B4     		push	{r7}
 2397              	.LCFI79:
 2398              		.cfi_def_cfa_offset 4
 2399              		.cfi_offset 7, -4
 2400 0002 83B0     		sub	sp, sp, #12
 2401              	.LCFI80:
 2402              		.cfi_def_cfa_offset 16
 2403 0004 00AF     		add	r7, sp, #0
 2404              	.LCFI81:
 2405              		.cfi_def_cfa_register 7
 2406 0006 7860     		str	r0, [r7, #4]
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2407              		.loc 1 1632 0
 2408 0008 00BF     		nop
 2409 000a 0C37     		adds	r7, r7, #12
 2410              	.LCFI82:
 2411              		.cfi_def_cfa_offset 4
 2412 000c BD46     		mov	sp, r7
 2413              	.LCFI83:
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 000e 80BC     		pop	{r7}
 2417              	.LCFI84:
 2418              		.cfi_restore 7
 2419              		.cfi_def_cfa_offset 0
 2420 0010 7047     		bx	lr
ARM GAS  /tmp/cccU0R2Q.s 			page 72


 2421              		.cfi_endproc
 2422              	.LFE81:
 2424              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2425              		.align	1
 2426              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2427              		.syntax unified
 2428              		.thumb
 2429              		.thumb_func
 2430              		.fpu softvfp
 2432              	HAL_ADC_LevelOutOfWindowCallback:
 2433              	.LFB82:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2434              		.loc 1 1640 0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 8
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
 2438              		@ link register save eliminated.
 2439 0000 80B4     		push	{r7}
 2440              	.LCFI85:
 2441              		.cfi_def_cfa_offset 4
 2442              		.cfi_offset 7, -4
 2443 0002 83B0     		sub	sp, sp, #12
 2444              	.LCFI86:
 2445              		.cfi_def_cfa_offset 16
 2446 0004 00AF     		add	r7, sp, #0
 2447              	.LCFI87:
 2448              		.cfi_def_cfa_register 7
 2449 0006 7860     		str	r0, [r7, #4]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2450              		.loc 1 1646 0
 2451 0008 00BF     		nop
 2452 000a 0C37     		adds	r7, r7, #12
 2453              	.LCFI88:
 2454              		.cfi_def_cfa_offset 4
 2455 000c BD46     		mov	sp, r7
 2456              	.LCFI89:
 2457              		.cfi_def_cfa_register 13
 2458              		@ sp needed
 2459 000e 80BC     		pop	{r7}
 2460              	.LCFI90:
 2461              		.cfi_restore 7
 2462              		.cfi_def_cfa_offset 0
 2463 0010 7047     		bx	lr
 2464              		.cfi_endproc
 2465              	.LFE82:
ARM GAS  /tmp/cccU0R2Q.s 			page 73


 2467              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2468              		.align	1
 2469              		.weak	HAL_ADC_ErrorCallback
 2470              		.syntax unified
 2471              		.thumb
 2472              		.thumb_func
 2473              		.fpu softvfp
 2475              	HAL_ADC_ErrorCallback:
 2476              	.LFB83:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2477              		.loc 1 1655 0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 8
 2480              		@ frame_needed = 1, uses_anonymous_args = 0
 2481              		@ link register save eliminated.
 2482 0000 80B4     		push	{r7}
 2483              	.LCFI91:
 2484              		.cfi_def_cfa_offset 4
 2485              		.cfi_offset 7, -4
 2486 0002 83B0     		sub	sp, sp, #12
 2487              	.LCFI92:
 2488              		.cfi_def_cfa_offset 16
 2489 0004 00AF     		add	r7, sp, #0
 2490              	.LCFI93:
 2491              		.cfi_def_cfa_register 7
 2492 0006 7860     		str	r0, [r7, #4]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2493              		.loc 1 1661 0
 2494 0008 00BF     		nop
 2495 000a 0C37     		adds	r7, r7, #12
 2496              	.LCFI94:
 2497              		.cfi_def_cfa_offset 4
 2498 000c BD46     		mov	sp, r7
 2499              	.LCFI95:
 2500              		.cfi_def_cfa_register 13
 2501              		@ sp needed
 2502 000e 80BC     		pop	{r7}
 2503              	.LCFI96:
 2504              		.cfi_restore 7
 2505              		.cfi_def_cfa_offset 0
 2506 0010 7047     		bx	lr
 2507              		.cfi_endproc
 2508              	.LFE83:
 2510              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
ARM GAS  /tmp/cccU0R2Q.s 			page 74


 2511              		.align	1
 2512              		.global	HAL_ADC_ConfigChannel
 2513              		.syntax unified
 2514              		.thumb
 2515              		.thumb_func
 2516              		.fpu softvfp
 2518              	HAL_ADC_ConfigChannel:
 2519              	.LFB84:
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2520              		.loc 1 1703 0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 16
 2523              		@ frame_needed = 1, uses_anonymous_args = 0
 2524              		@ link register save eliminated.
 2525 0000 80B4     		push	{r7}
 2526              	.LCFI97:
ARM GAS  /tmp/cccU0R2Q.s 			page 75


 2527              		.cfi_def_cfa_offset 4
 2528              		.cfi_offset 7, -4
 2529 0002 85B0     		sub	sp, sp, #20
 2530              	.LCFI98:
 2531              		.cfi_def_cfa_offset 24
 2532 0004 00AF     		add	r7, sp, #0
 2533              	.LCFI99:
 2534              		.cfi_def_cfa_register 7
 2535 0006 7860     		str	r0, [r7, #4]
 2536 0008 3960     		str	r1, [r7]
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2537              		.loc 1 1704 0
 2538 000a 0023     		movs	r3, #0
 2539 000c FB73     		strb	r3, [r7, #15]
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2540              		.loc 1 1705 0
 2541 000e 0023     		movs	r3, #0
 2542 0010 BB60     		str	r3, [r7, #8]
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2543              		.loc 1 1714 0
 2544 0012 7B68     		ldr	r3, [r7, #4]
 2545 0014 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2546 0018 012B     		cmp	r3, #1
 2547 001a 01D1     		bne	.L139
 2548              		.loc 1 1714 0 is_stmt 0 discriminator 1
 2549 001c 0223     		movs	r3, #2
 2550 001e DCE0     		b	.L140
 2551              	.L139:
 2552              		.loc 1 1714 0 discriminator 2
 2553 0020 7B68     		ldr	r3, [r7, #4]
 2554 0022 0122     		movs	r2, #1
 2555 0024 83F82420 		strb	r2, [r3, #36]
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7U)
 2556              		.loc 1 1719 0 is_stmt 1 discriminator 2
 2557 0028 3B68     		ldr	r3, [r7]
 2558 002a 5B68     		ldr	r3, [r3, #4]
 2559 002c 062B     		cmp	r3, #6
 2560 002e 1CD8     		bhi	.L141
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2561              		.loc 1 1721 0
 2562 0030 7B68     		ldr	r3, [r7, #4]
 2563 0032 1B68     		ldr	r3, [r3]
 2564 0034 596B     		ldr	r1, [r3, #52]
 2565 0036 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cccU0R2Q.s 			page 76


 2566 0038 5A68     		ldr	r2, [r3, #4]
 2567 003a 1346     		mov	r3, r2
 2568 003c 9B00     		lsls	r3, r3, #2
 2569 003e 1344     		add	r3, r3, r2
 2570 0040 053B     		subs	r3, r3, #5
 2571 0042 1F22     		movs	r2, #31
 2572 0044 02FA03F3 		lsl	r3, r2, r3
 2573 0048 DB43     		mvns	r3, r3
 2574 004a 1940     		ands	r1, r1, r3
 2575 004c 3B68     		ldr	r3, [r7]
 2576 004e 1868     		ldr	r0, [r3]
 2577 0050 3B68     		ldr	r3, [r7]
 2578 0052 5A68     		ldr	r2, [r3, #4]
 2579 0054 1346     		mov	r3, r2
 2580 0056 9B00     		lsls	r3, r3, #2
 2581 0058 1344     		add	r3, r3, r2
 2582 005a 053B     		subs	r3, r3, #5
 2583 005c 00FA03F2 		lsl	r2, r0, r3
 2584 0060 7B68     		ldr	r3, [r7, #4]
 2585 0062 1B68     		ldr	r3, [r3]
 2586 0064 0A43     		orrs	r2, r2, r1
 2587 0066 5A63     		str	r2, [r3, #52]
 2588 0068 3CE0     		b	.L142
 2589              	.L141:
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
 2590              		.loc 1 1726 0
 2591 006a 3B68     		ldr	r3, [r7]
 2592 006c 5B68     		ldr	r3, [r3, #4]
 2593 006e 0C2B     		cmp	r3, #12
 2594 0070 1CD8     		bhi	.L143
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2595              		.loc 1 1728 0
 2596 0072 7B68     		ldr	r3, [r7, #4]
 2597 0074 1B68     		ldr	r3, [r3]
 2598 0076 196B     		ldr	r1, [r3, #48]
 2599 0078 3B68     		ldr	r3, [r7]
 2600 007a 5A68     		ldr	r2, [r3, #4]
 2601 007c 1346     		mov	r3, r2
 2602 007e 9B00     		lsls	r3, r3, #2
 2603 0080 1344     		add	r3, r3, r2
 2604 0082 233B     		subs	r3, r3, #35
 2605 0084 1F22     		movs	r2, #31
 2606 0086 02FA03F3 		lsl	r3, r2, r3
 2607 008a DB43     		mvns	r3, r3
 2608 008c 1940     		ands	r1, r1, r3
 2609 008e 3B68     		ldr	r3, [r7]
 2610 0090 1868     		ldr	r0, [r3]
 2611 0092 3B68     		ldr	r3, [r7]
 2612 0094 5A68     		ldr	r2, [r3, #4]
 2613 0096 1346     		mov	r3, r2
 2614 0098 9B00     		lsls	r3, r3, #2
 2615 009a 1344     		add	r3, r3, r2
ARM GAS  /tmp/cccU0R2Q.s 			page 77


 2616 009c 233B     		subs	r3, r3, #35
 2617 009e 00FA03F2 		lsl	r2, r0, r3
 2618 00a2 7B68     		ldr	r3, [r7, #4]
 2619 00a4 1B68     		ldr	r3, [r3]
 2620 00a6 0A43     		orrs	r2, r2, r1
 2621 00a8 1A63     		str	r2, [r3, #48]
 2622 00aa 1BE0     		b	.L142
 2623              	.L143:
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2624              		.loc 1 1735 0
 2625 00ac 7B68     		ldr	r3, [r7, #4]
 2626 00ae 1B68     		ldr	r3, [r3]
 2627 00b0 D96A     		ldr	r1, [r3, #44]
 2628 00b2 3B68     		ldr	r3, [r7]
 2629 00b4 5A68     		ldr	r2, [r3, #4]
 2630 00b6 1346     		mov	r3, r2
 2631 00b8 9B00     		lsls	r3, r3, #2
 2632 00ba 1344     		add	r3, r3, r2
 2633 00bc 413B     		subs	r3, r3, #65
 2634 00be 1F22     		movs	r2, #31
 2635 00c0 02FA03F3 		lsl	r3, r2, r3
 2636 00c4 DB43     		mvns	r3, r3
 2637 00c6 1940     		ands	r1, r1, r3
 2638 00c8 3B68     		ldr	r3, [r7]
 2639 00ca 1868     		ldr	r0, [r3]
 2640 00cc 3B68     		ldr	r3, [r7]
 2641 00ce 5A68     		ldr	r2, [r3, #4]
 2642 00d0 1346     		mov	r3, r2
 2643 00d2 9B00     		lsls	r3, r3, #2
 2644 00d4 1344     		add	r3, r3, r2
 2645 00d6 413B     		subs	r3, r3, #65
 2646 00d8 00FA03F2 		lsl	r2, r0, r3
 2647 00dc 7B68     		ldr	r3, [r7, #4]
 2648 00de 1B68     		ldr	r3, [r3]
 2649 00e0 0A43     		orrs	r2, r2, r1
 2650 00e2 DA62     		str	r2, [r3, #44]
 2651              	.L142:
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2652              		.loc 1 1743 0
 2653 00e4 3B68     		ldr	r3, [r7]
 2654 00e6 1B68     		ldr	r3, [r3]
 2655 00e8 092B     		cmp	r3, #9
 2656 00ea 1CD9     		bls	.L144
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
ARM GAS  /tmp/cccU0R2Q.s 			page 78


1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2657              		.loc 1 1745 0
 2658 00ec 7B68     		ldr	r3, [r7, #4]
 2659 00ee 1B68     		ldr	r3, [r3]
 2660 00f0 D968     		ldr	r1, [r3, #12]
 2661 00f2 3B68     		ldr	r3, [r7]
 2662 00f4 1A68     		ldr	r2, [r3]
 2663 00f6 1346     		mov	r3, r2
 2664 00f8 5B00     		lsls	r3, r3, #1
 2665 00fa 1344     		add	r3, r3, r2
 2666 00fc 1E3B     		subs	r3, r3, #30
 2667 00fe 0722     		movs	r2, #7
 2668 0100 02FA03F3 		lsl	r3, r2, r3
 2669 0104 DB43     		mvns	r3, r3
 2670 0106 1940     		ands	r1, r1, r3
 2671 0108 3B68     		ldr	r3, [r7]
 2672 010a 9868     		ldr	r0, [r3, #8]
 2673 010c 3B68     		ldr	r3, [r7]
 2674 010e 1A68     		ldr	r2, [r3]
 2675 0110 1346     		mov	r3, r2
 2676 0112 5B00     		lsls	r3, r3, #1
 2677 0114 1344     		add	r3, r3, r2
 2678 0116 1E3B     		subs	r3, r3, #30
 2679 0118 00FA03F2 		lsl	r2, r0, r3
 2680 011c 7B68     		ldr	r3, [r7, #4]
 2681 011e 1B68     		ldr	r3, [r3]
 2682 0120 0A43     		orrs	r2, r2, r1
 2683 0122 DA60     		str	r2, [r3, #12]
 2684 0124 19E0     		b	.L145
 2685              	.L144:
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
 2686              		.loc 1 1751 0
 2687 0126 7B68     		ldr	r3, [r7, #4]
 2688 0128 1B68     		ldr	r3, [r3]
 2689 012a 1969     		ldr	r1, [r3, #16]
 2690 012c 3B68     		ldr	r3, [r7]
 2691 012e 1A68     		ldr	r2, [r3]
 2692 0130 1346     		mov	r3, r2
 2693 0132 5B00     		lsls	r3, r3, #1
 2694 0134 1344     		add	r3, r3, r2
 2695 0136 0722     		movs	r2, #7
 2696 0138 02FA03F3 		lsl	r3, r2, r3
 2697 013c DB43     		mvns	r3, r3
 2698 013e 1940     		ands	r1, r1, r3
 2699 0140 3B68     		ldr	r3, [r7]
 2700 0142 9868     		ldr	r0, [r3, #8]
 2701 0144 3B68     		ldr	r3, [r7]
 2702 0146 1A68     		ldr	r2, [r3]
 2703 0148 1346     		mov	r3, r2
 2704 014a 5B00     		lsls	r3, r3, #1
 2705 014c 1344     		add	r3, r3, r2
 2706 014e 00FA03F2 		lsl	r2, r0, r3
ARM GAS  /tmp/cccU0R2Q.s 			page 79


 2707 0152 7B68     		ldr	r3, [r7, #4]
 2708 0154 1B68     		ldr	r3, [r3]
 2709 0156 0A43     		orrs	r2, r2, r1
 2710 0158 1A61     		str	r2, [r3, #16]
 2711              	.L145:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2712              		.loc 1 1758 0
 2713 015a 3B68     		ldr	r3, [r7]
 2714 015c 1B68     		ldr	r3, [r3]
 2715 015e 102B     		cmp	r3, #16
 2716 0160 03D0     		beq	.L146
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2717              		.loc 1 1759 0 discriminator 1
 2718 0162 3B68     		ldr	r3, [r7]
 2719 0164 1B68     		ldr	r3, [r3]
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2720              		.loc 1 1758 0 discriminator 1
 2721 0166 112B     		cmp	r3, #17
 2722 0168 32D1     		bne	.L147
 2723              	.L146:
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2724              		.loc 1 1764 0
 2725 016a 7B68     		ldr	r3, [r7, #4]
 2726 016c 1B68     		ldr	r3, [r3]
 2727 016e 1D4A     		ldr	r2, .L151
 2728 0170 9342     		cmp	r3, r2
 2729 0172 25D1     		bne	.L148
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2730              		.loc 1 1766 0
 2731 0174 7B68     		ldr	r3, [r7, #4]
 2732 0176 1B68     		ldr	r3, [r3]
 2733 0178 9B68     		ldr	r3, [r3, #8]
 2734 017a 03F40003 		and	r3, r3, #8388608
 2735 017e 002B     		cmp	r3, #0
 2736 0180 26D1     		bne	.L147
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2737              		.loc 1 1768 0
 2738 0182 7B68     		ldr	r3, [r7, #4]
 2739 0184 1B68     		ldr	r3, [r3]
 2740 0186 9A68     		ldr	r2, [r3, #8]
 2741 0188 7B68     		ldr	r3, [r7, #4]
 2742 018a 1B68     		ldr	r3, [r3]
 2743 018c 42F40002 		orr	r2, r2, #8388608
 2744 0190 9A60     		str	r2, [r3, #8]
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
ARM GAS  /tmp/cccU0R2Q.s 			page 80


1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 2745              		.loc 1 1770 0
 2746 0192 3B68     		ldr	r3, [r7]
 2747 0194 1B68     		ldr	r3, [r3]
 2748 0196 102B     		cmp	r3, #16
 2749 0198 1AD1     		bne	.L147
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2750              		.loc 1 1774 0
 2751 019a 134B     		ldr	r3, .L151+4
 2752 019c 1B68     		ldr	r3, [r3]
 2753 019e 134A     		ldr	r2, .L151+8
 2754 01a0 A2FB0323 		umull	r2, r3, r2, r3
 2755 01a4 9A0C     		lsrs	r2, r3, #18
 2756 01a6 1346     		mov	r3, r2
 2757 01a8 9B00     		lsls	r3, r3, #2
 2758 01aa 1344     		add	r3, r3, r2
 2759 01ac 5B00     		lsls	r3, r3, #1
 2760 01ae BB60     		str	r3, [r7, #8]
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2761              		.loc 1 1775 0
 2762 01b0 02E0     		b	.L149
 2763              	.L150:
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2764              		.loc 1 1777 0
 2765 01b2 BB68     		ldr	r3, [r7, #8]
 2766 01b4 013B     		subs	r3, r3, #1
 2767 01b6 BB60     		str	r3, [r7, #8]
 2768              	.L149:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2769              		.loc 1 1775 0
 2770 01b8 BB68     		ldr	r3, [r7, #8]
 2771 01ba 002B     		cmp	r3, #0
 2772 01bc F9D1     		bne	.L150
 2773 01be 07E0     		b	.L147
 2774              	.L148:
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2775              		.loc 1 1785 0
 2776 01c0 7B68     		ldr	r3, [r7, #4]
 2777 01c2 9B6A     		ldr	r3, [r3, #40]
 2778 01c4 43F02002 		orr	r2, r3, #32
 2779 01c8 7B68     		ldr	r3, [r7, #4]
 2780 01ca 9A62     		str	r2, [r3, #40]
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2781              		.loc 1 1787 0
 2782 01cc 0123     		movs	r3, #1
ARM GAS  /tmp/cccU0R2Q.s 			page 81


 2783 01ce FB73     		strb	r3, [r7, #15]
 2784              	.L147:
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2785              		.loc 1 1792 0
 2786 01d0 7B68     		ldr	r3, [r7, #4]
 2787 01d2 0022     		movs	r2, #0
 2788 01d4 83F82420 		strb	r2, [r3, #36]
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2789              		.loc 1 1795 0
 2790 01d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2791              	.L140:
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2792              		.loc 1 1796 0
 2793 01da 1846     		mov	r0, r3
 2794 01dc 1437     		adds	r7, r7, #20
 2795              	.LCFI100:
 2796              		.cfi_def_cfa_offset 4
 2797 01de BD46     		mov	sp, r7
 2798              	.LCFI101:
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 01e0 80BC     		pop	{r7}
 2802              	.LCFI102:
 2803              		.cfi_restore 7
 2804              		.cfi_def_cfa_offset 0
 2805 01e2 7047     		bx	lr
 2806              	.L152:
 2807              		.align	2
 2808              	.L151:
 2809 01e4 00240140 		.word	1073816576
 2810 01e8 00000000 		.word	SystemCoreClock
 2811 01ec 83DE1B43 		.word	1125899907
 2812              		.cfi_endproc
 2813              	.LFE84:
 2815              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2816              		.align	1
 2817              		.global	HAL_ADC_AnalogWDGConfig
 2818              		.syntax unified
 2819              		.thumb
 2820              		.thumb_func
 2821              		.fpu softvfp
 2823              	HAL_ADC_AnalogWDGConfig:
 2824              	.LFB85:
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
ARM GAS  /tmp/cccU0R2Q.s 			page 82


1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2825              		.loc 1 1813 0
 2826              		.cfi_startproc
 2827              		@ args = 0, pretend = 0, frame = 8
 2828              		@ frame_needed = 1, uses_anonymous_args = 0
 2829              		@ link register save eliminated.
 2830 0000 80B4     		push	{r7}
 2831              	.LCFI103:
 2832              		.cfi_def_cfa_offset 4
 2833              		.cfi_offset 7, -4
 2834 0002 83B0     		sub	sp, sp, #12
 2835              	.LCFI104:
 2836              		.cfi_def_cfa_offset 16
 2837 0004 00AF     		add	r7, sp, #0
 2838              	.LCFI105:
 2839              		.cfi_def_cfa_register 7
 2840 0006 7860     		str	r0, [r7, #4]
 2841 0008 3960     		str	r1, [r7]
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 2842              		.loc 1 1821 0
 2843 000a 3B68     		ldr	r3, [r7]
 2844 000c 1B68     		ldr	r3, [r3]
 2845 000e 244A     		ldr	r2, .L159
 2846 0010 9342     		cmp	r3, r2
 2847 0012 03D0     		beq	.L154
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2848              		.loc 1 1822 0 discriminator 1
 2849 0014 3B68     		ldr	r3, [r7]
 2850 0016 1B68     		ldr	r3, [r3]
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2851              		.loc 1 1821 0 discriminator 1
 2852 0018 224A     		ldr	r2, .L159+4
 2853 001a 9342     		cmp	r3, r2
 2854              	.L154:
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2855              		.loc 1 1829 0
ARM GAS  /tmp/cccU0R2Q.s 			page 83


 2856 001c 7B68     		ldr	r3, [r7, #4]
 2857 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2858 0022 012B     		cmp	r3, #1
 2859 0024 01D1     		bne	.L155
 2860              		.loc 1 1829 0 is_stmt 0 discriminator 1
 2861 0026 0223     		movs	r3, #2
 2862 0028 35E0     		b	.L156
 2863              	.L155:
 2864              		.loc 1 1829 0 discriminator 2
 2865 002a 7B68     		ldr	r3, [r7, #4]
 2866 002c 0122     		movs	r2, #1
 2867 002e 83F82420 		strb	r2, [r3, #36]
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 2868              		.loc 1 1834 0 is_stmt 1 discriminator 2
 2869 0032 3B68     		ldr	r3, [r7]
 2870 0034 9B68     		ldr	r3, [r3, #8]
 2871 0036 012B     		cmp	r3, #1
 2872 0038 08D1     		bne	.L157
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2873              		.loc 1 1837 0
 2874 003a 7B68     		ldr	r3, [r7, #4]
 2875 003c 1B68     		ldr	r3, [r3]
 2876 003e 5A68     		ldr	r2, [r3, #4]
 2877 0040 7B68     		ldr	r3, [r7, #4]
 2878 0042 1B68     		ldr	r3, [r3]
 2879 0044 42F04002 		orr	r2, r2, #64
 2880 0048 5A60     		str	r2, [r3, #4]
 2881 004a 07E0     		b	.L158
 2882              	.L157:
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2883              		.loc 1 1842 0
 2884 004c 7B68     		ldr	r3, [r7, #4]
 2885 004e 1B68     		ldr	r3, [r3]
 2886 0050 5A68     		ldr	r2, [r3, #4]
 2887 0052 7B68     		ldr	r3, [r7, #4]
 2888 0054 1B68     		ldr	r3, [r3]
 2889 0056 22F04002 		bic	r2, r2, #64
 2890 005a 5A60     		str	r2, [r3, #4]
 2891              	.L158:
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
ARM GAS  /tmp/cccU0R2Q.s 			page 84


 2892              		.loc 1 1850 0
 2893 005c 7B68     		ldr	r3, [r7, #4]
 2894 005e 1B68     		ldr	r3, [r3]
 2895 0060 5A68     		ldr	r2, [r3, #4]
 2896 0062 114B     		ldr	r3, .L159+8
 2897 0064 1340     		ands	r3, r3, r2
 2898 0066 3A68     		ldr	r2, [r7]
 2899 0068 1168     		ldr	r1, [r2]
 2900 006a 3A68     		ldr	r2, [r7]
 2901 006c 5268     		ldr	r2, [r2, #4]
 2902 006e 1143     		orrs	r1, r1, r2
 2903 0070 7A68     		ldr	r2, [r7, #4]
 2904 0072 1268     		ldr	r2, [r2]
 2905 0074 0B43     		orrs	r3, r3, r1
 2906 0076 5360     		str	r3, [r2, #4]
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 2907              		.loc 1 1859 0
 2908 0078 7B68     		ldr	r3, [r7, #4]
 2909 007a 1B68     		ldr	r3, [r3]
 2910 007c 3A68     		ldr	r2, [r7]
 2911 007e D268     		ldr	r2, [r2, #12]
 2912 0080 5A62     		str	r2, [r3, #36]
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 2913              		.loc 1 1862 0
 2914 0082 7B68     		ldr	r3, [r7, #4]
 2915 0084 1B68     		ldr	r3, [r3]
 2916 0086 3A68     		ldr	r2, [r7]
 2917 0088 1269     		ldr	r2, [r2, #16]
 2918 008a 9A62     		str	r2, [r3, #40]
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2919              		.loc 1 1865 0
 2920 008c 7B68     		ldr	r3, [r7, #4]
 2921 008e 0022     		movs	r2, #0
 2922 0090 83F82420 		strb	r2, [r3, #36]
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 2923              		.loc 1 1868 0
 2924 0094 0023     		movs	r3, #0
 2925              	.L156:
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2926              		.loc 1 1869 0
 2927 0096 1846     		mov	r0, r3
 2928 0098 0C37     		adds	r7, r7, #12
 2929              	.LCFI106:
ARM GAS  /tmp/cccU0R2Q.s 			page 85


 2930              		.cfi_def_cfa_offset 4
 2931 009a BD46     		mov	sp, r7
 2932              	.LCFI107:
 2933              		.cfi_def_cfa_register 13
 2934              		@ sp needed
 2935 009c 80BC     		pop	{r7}
 2936              	.LCFI108:
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 009e 7047     		bx	lr
 2940              	.L160:
 2941              		.align	2
 2942              	.L159:
 2943 00a0 00028000 		.word	8389120
 2944 00a4 00024000 		.word	4194816
 2945 00a8 E0FD3FFF 		.word	-12583456
 2946              		.cfi_endproc
 2947              	.LFE85:
 2949              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2950              		.align	1
 2951              		.global	HAL_ADC_GetState
 2952              		.syntax unified
 2953              		.thumb
 2954              		.thumb_func
 2955              		.fpu softvfp
 2957              	HAL_ADC_GetState:
 2958              	.LFB86:
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cccU0R2Q.s 			page 86


1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2959              		.loc 1 1900 0
 2960              		.cfi_startproc
 2961              		@ args = 0, pretend = 0, frame = 8
 2962              		@ frame_needed = 1, uses_anonymous_args = 0
 2963              		@ link register save eliminated.
 2964 0000 80B4     		push	{r7}
 2965              	.LCFI109:
 2966              		.cfi_def_cfa_offset 4
 2967              		.cfi_offset 7, -4
 2968 0002 83B0     		sub	sp, sp, #12
 2969              	.LCFI110:
 2970              		.cfi_def_cfa_offset 16
 2971 0004 00AF     		add	r7, sp, #0
 2972              	.LCFI111:
 2973              		.cfi_def_cfa_register 7
 2974 0006 7860     		str	r0, [r7, #4]
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 2975              		.loc 1 1902 0
 2976 0008 7B68     		ldr	r3, [r7, #4]
 2977 000a 9B6A     		ldr	r3, [r3, #40]
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2978              		.loc 1 1903 0
 2979 000c 1846     		mov	r0, r3
 2980 000e 0C37     		adds	r7, r7, #12
 2981              	.LCFI112:
 2982              		.cfi_def_cfa_offset 4
 2983 0010 BD46     		mov	sp, r7
 2984              	.LCFI113:
 2985              		.cfi_def_cfa_register 13
 2986              		@ sp needed
 2987 0012 80BC     		pop	{r7}
 2988              	.LCFI114:
 2989              		.cfi_restore 7
 2990              		.cfi_def_cfa_offset 0
 2991 0014 7047     		bx	lr
 2992              		.cfi_endproc
 2993              	.LFE86:
 2995              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2996              		.align	1
 2997              		.global	HAL_ADC_GetError
 2998              		.syntax unified
 2999              		.thumb
 3000              		.thumb_func
 3001              		.fpu softvfp
 3003              	HAL_ADC_GetError:
 3004              	.LFB87:
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3005              		.loc 1 1911 0
ARM GAS  /tmp/cccU0R2Q.s 			page 87


 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 8
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009              		@ link register save eliminated.
 3010 0000 80B4     		push	{r7}
 3011              	.LCFI115:
 3012              		.cfi_def_cfa_offset 4
 3013              		.cfi_offset 7, -4
 3014 0002 83B0     		sub	sp, sp, #12
 3015              	.LCFI116:
 3016              		.cfi_def_cfa_offset 16
 3017 0004 00AF     		add	r7, sp, #0
 3018              	.LCFI117:
 3019              		.cfi_def_cfa_register 7
 3020 0006 7860     		str	r0, [r7, #4]
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 3021              		.loc 1 1912 0
 3022 0008 7B68     		ldr	r3, [r7, #4]
 3023 000a DB6A     		ldr	r3, [r3, #44]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3024              		.loc 1 1913 0
 3025 000c 1846     		mov	r0, r3
 3026 000e 0C37     		adds	r7, r7, #12
 3027              	.LCFI118:
 3028              		.cfi_def_cfa_offset 4
 3029 0010 BD46     		mov	sp, r7
 3030              	.LCFI119:
 3031              		.cfi_def_cfa_register 13
 3032              		@ sp needed
 3033 0012 80BC     		pop	{r7}
 3034              	.LCFI120:
 3035              		.cfi_restore 7
 3036              		.cfi_def_cfa_offset 0
 3037 0014 7047     		bx	lr
 3038              		.cfi_endproc
 3039              	.LFE87:
 3041              		.section	.text.ADC_Enable,"ax",%progbits
 3042              		.align	1
 3043              		.global	ADC_Enable
 3044              		.syntax unified
 3045              		.thumb
 3046              		.thumb_func
 3047              		.fpu softvfp
 3049              	ADC_Enable:
 3050              	.LFB88:
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
ARM GAS  /tmp/cccU0R2Q.s 			page 88


1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3051              		.loc 1 1935 0
 3052              		.cfi_startproc
 3053              		@ args = 0, pretend = 0, frame = 16
 3054              		@ frame_needed = 1, uses_anonymous_args = 0
 3055 0000 80B5     		push	{r7, lr}
 3056              	.LCFI121:
 3057              		.cfi_def_cfa_offset 8
 3058              		.cfi_offset 7, -8
 3059              		.cfi_offset 14, -4
 3060 0002 84B0     		sub	sp, sp, #16
 3061              	.LCFI122:
 3062              		.cfi_def_cfa_offset 24
 3063 0004 00AF     		add	r7, sp, #0
 3064              	.LCFI123:
 3065              		.cfi_def_cfa_register 7
 3066 0006 7860     		str	r0, [r7, #4]
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3067              		.loc 1 1936 0
 3068 0008 0023     		movs	r3, #0
 3069 000a FB60     		str	r3, [r7, #12]
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 3070              		.loc 1 1937 0
 3071 000c 0023     		movs	r3, #0
 3072 000e BB60     		str	r3, [r7, #8]
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3073              		.loc 1 1943 0
 3074 0010 7B68     		ldr	r3, [r7, #4]
 3075 0012 1B68     		ldr	r3, [r3]
 3076 0014 9B68     		ldr	r3, [r3, #8]
 3077 0016 03F00103 		and	r3, r3, #1
 3078 001a 012B     		cmp	r3, #1
 3079 001c 39D0     		beq	.L166
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3080              		.loc 1 1946 0
 3081 001e 7B68     		ldr	r3, [r7, #4]
 3082 0020 1B68     		ldr	r3, [r3]
 3083 0022 9A68     		ldr	r2, [r3, #8]
 3084 0024 7B68     		ldr	r3, [r7, #4]
 3085 0026 1B68     		ldr	r3, [r3]
 3086 0028 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/cccU0R2Q.s 			page 89


 3087 002c 9A60     		str	r2, [r3, #8]
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3088              		.loc 1 1950 0
 3089 002e 1B4B     		ldr	r3, .L172
 3090 0030 1B68     		ldr	r3, [r3]
 3091 0032 1B4A     		ldr	r2, .L172+4
 3092 0034 A2FB0323 		umull	r2, r3, r2, r3
 3093 0038 9B0C     		lsrs	r3, r3, #18
 3094 003a BB60     		str	r3, [r7, #8]
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3095              		.loc 1 1951 0
 3096 003c 02E0     		b	.L167
 3097              	.L168:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3098              		.loc 1 1953 0
 3099 003e BB68     		ldr	r3, [r7, #8]
 3100 0040 013B     		subs	r3, r3, #1
 3101 0042 BB60     		str	r3, [r7, #8]
 3102              	.L167:
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3103              		.loc 1 1951 0
 3104 0044 BB68     		ldr	r3, [r7, #8]
 3105 0046 002B     		cmp	r3, #0
 3106 0048 F9D1     		bne	.L168
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3107              		.loc 1 1957 0
 3108 004a FFF7FEFF 		bl	HAL_GetTick
 3109 004e F860     		str	r0, [r7, #12]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
 3110              		.loc 1 1960 0
 3111 0050 18E0     		b	.L169
 3112              	.L171:
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3113              		.loc 1 1962 0
 3114 0052 FFF7FEFF 		bl	HAL_GetTick
 3115 0056 0246     		mov	r2, r0
 3116 0058 FB68     		ldr	r3, [r7, #12]
 3117 005a D31A     		subs	r3, r2, r3
 3118 005c 022B     		cmp	r3, #2
 3119 005e 11D9     		bls	.L169
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3120              		.loc 1 1965 0
 3121 0060 7B68     		ldr	r3, [r7, #4]
 3122 0062 9B6A     		ldr	r3, [r3, #40]
 3123 0064 43F01002 		orr	r2, r3, #16
ARM GAS  /tmp/cccU0R2Q.s 			page 90


 3124 0068 7B68     		ldr	r3, [r7, #4]
 3125 006a 9A62     		str	r2, [r3, #40]
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3126              		.loc 1 1968 0
 3127 006c 7B68     		ldr	r3, [r7, #4]
 3128 006e DB6A     		ldr	r3, [r3, #44]
 3129 0070 43F00102 		orr	r2, r3, #1
 3130 0074 7B68     		ldr	r3, [r7, #4]
 3131 0076 DA62     		str	r2, [r3, #44]
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 3132              		.loc 1 1971 0
 3133 0078 7B68     		ldr	r3, [r7, #4]
 3134 007a 0022     		movs	r2, #0
 3135 007c 83F82420 		strb	r2, [r3, #36]
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3136              		.loc 1 1973 0
 3137 0080 0123     		movs	r3, #1
 3138 0082 07E0     		b	.L170
 3139              	.L169:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3140              		.loc 1 1960 0
 3141 0084 7B68     		ldr	r3, [r7, #4]
 3142 0086 1B68     		ldr	r3, [r3]
 3143 0088 9B68     		ldr	r3, [r3, #8]
 3144 008a 03F00103 		and	r3, r3, #1
 3145 008e 012B     		cmp	r3, #1
 3146 0090 DFD1     		bne	.L171
 3147              	.L166:
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3148              		.loc 1 1979 0
 3149 0092 0023     		movs	r3, #0
 3150              	.L170:
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3151              		.loc 1 1980 0
 3152 0094 1846     		mov	r0, r3
 3153 0096 1037     		adds	r7, r7, #16
 3154              	.LCFI124:
 3155              		.cfi_def_cfa_offset 8
 3156 0098 BD46     		mov	sp, r7
 3157              	.LCFI125:
 3158              		.cfi_def_cfa_register 13
 3159              		@ sp needed
 3160 009a 80BD     		pop	{r7, pc}
 3161              	.L173:
 3162              		.align	2
 3163              	.L172:
 3164 009c 00000000 		.word	SystemCoreClock
ARM GAS  /tmp/cccU0R2Q.s 			page 91


 3165 00a0 83DE1B43 		.word	1125899907
 3166              		.cfi_endproc
 3167              	.LFE88:
 3169              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3170              		.align	1
 3171              		.global	ADC_ConversionStop_Disable
 3172              		.syntax unified
 3173              		.thumb
 3174              		.thumb_func
 3175              		.fpu softvfp
 3177              	ADC_ConversionStop_Disable:
 3178              	.LFB89:
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3179              		.loc 1 1990 0
 3180              		.cfi_startproc
 3181              		@ args = 0, pretend = 0, frame = 16
 3182              		@ frame_needed = 1, uses_anonymous_args = 0
 3183 0000 80B5     		push	{r7, lr}
 3184              	.LCFI126:
 3185              		.cfi_def_cfa_offset 8
 3186              		.cfi_offset 7, -8
 3187              		.cfi_offset 14, -4
 3188 0002 84B0     		sub	sp, sp, #16
 3189              	.LCFI127:
 3190              		.cfi_def_cfa_offset 24
 3191 0004 00AF     		add	r7, sp, #0
 3192              	.LCFI128:
 3193              		.cfi_def_cfa_register 7
 3194 0006 7860     		str	r0, [r7, #4]
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3195              		.loc 1 1991 0
 3196 0008 0023     		movs	r3, #0
 3197 000a FB60     		str	r3, [r7, #12]
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3198              		.loc 1 1994 0
 3199 000c 7B68     		ldr	r3, [r7, #4]
 3200 000e 1B68     		ldr	r3, [r3]
 3201 0010 9B68     		ldr	r3, [r3, #8]
 3202 0012 03F00103 		and	r3, r3, #1
 3203 0016 012B     		cmp	r3, #1
 3204 0018 27D1     		bne	.L175
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3205              		.loc 1 1997 0
 3206 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cccU0R2Q.s 			page 92


 3207 001c 1B68     		ldr	r3, [r3]
 3208 001e 9A68     		ldr	r2, [r3, #8]
 3209 0020 7B68     		ldr	r3, [r7, #4]
 3210 0022 1B68     		ldr	r3, [r3]
 3211 0024 22F00102 		bic	r2, r2, #1
 3212 0028 9A60     		str	r2, [r3, #8]
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3213              		.loc 1 2000 0
 3214 002a FFF7FEFF 		bl	HAL_GetTick
 3215 002e F860     		str	r0, [r7, #12]
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3216              		.loc 1 2003 0
 3217 0030 14E0     		b	.L176
 3218              	.L178:
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3219              		.loc 1 2005 0
 3220 0032 FFF7FEFF 		bl	HAL_GetTick
 3221 0036 0246     		mov	r2, r0
 3222 0038 FB68     		ldr	r3, [r7, #12]
 3223 003a D31A     		subs	r3, r2, r3
 3224 003c 022B     		cmp	r3, #2
 3225 003e 0DD9     		bls	.L176
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3226              		.loc 1 2008 0
 3227 0040 7B68     		ldr	r3, [r7, #4]
 3228 0042 9B6A     		ldr	r3, [r3, #40]
 3229 0044 43F01002 		orr	r2, r3, #16
 3230 0048 7B68     		ldr	r3, [r7, #4]
 3231 004a 9A62     		str	r2, [r3, #40]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3232              		.loc 1 2011 0
 3233 004c 7B68     		ldr	r3, [r7, #4]
 3234 004e DB6A     		ldr	r3, [r3, #44]
 3235 0050 43F00102 		orr	r2, r3, #1
 3236 0054 7B68     		ldr	r3, [r7, #4]
 3237 0056 DA62     		str	r2, [r3, #44]
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3238              		.loc 1 2013 0
 3239 0058 0123     		movs	r3, #1
 3240 005a 07E0     		b	.L177
 3241              	.L176:
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3242              		.loc 1 2003 0
 3243 005c 7B68     		ldr	r3, [r7, #4]
 3244 005e 1B68     		ldr	r3, [r3]
 3245 0060 9B68     		ldr	r3, [r3, #8]
 3246 0062 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/cccU0R2Q.s 			page 93


 3247 0066 012B     		cmp	r3, #1
 3248 0068 E3D0     		beq	.L178
 3249              	.L175:
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3250              		.loc 1 2019 0
 3251 006a 0023     		movs	r3, #0
 3252              	.L177:
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3253              		.loc 1 2020 0
 3254 006c 1846     		mov	r0, r3
 3255 006e 1037     		adds	r7, r7, #16
 3256              	.LCFI129:
 3257              		.cfi_def_cfa_offset 8
 3258 0070 BD46     		mov	sp, r7
 3259              	.LCFI130:
 3260              		.cfi_def_cfa_register 13
 3261              		@ sp needed
 3262 0072 80BD     		pop	{r7, pc}
 3263              		.cfi_endproc
 3264              	.LFE89:
 3266              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3267              		.align	1
 3268              		.global	ADC_DMAConvCplt
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu softvfp
 3274              	ADC_DMAConvCplt:
 3275              	.LFB90:
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3276              		.loc 1 2028 0
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 16
 3279              		@ frame_needed = 1, uses_anonymous_args = 0
 3280 0000 80B5     		push	{r7, lr}
 3281              	.LCFI131:
 3282              		.cfi_def_cfa_offset 8
 3283              		.cfi_offset 7, -8
 3284              		.cfi_offset 14, -4
 3285 0002 84B0     		sub	sp, sp, #16
 3286              	.LCFI132:
 3287              		.cfi_def_cfa_offset 24
 3288 0004 00AF     		add	r7, sp, #0
 3289              	.LCFI133:
 3290              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cccU0R2Q.s 			page 94


 3291 0006 7860     		str	r0, [r7, #4]
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3292              		.loc 1 2030 0
 3293 0008 7B68     		ldr	r3, [r7, #4]
 3294 000a 5B6A     		ldr	r3, [r3, #36]
 3295 000c FB60     		str	r3, [r7, #12]
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3296              		.loc 1 2033 0
 3297 000e FB68     		ldr	r3, [r7, #12]
 3298 0010 9B6A     		ldr	r3, [r3, #40]
 3299 0012 03F05003 		and	r3, r3, #80
 3300 0016 002B     		cmp	r3, #0
 3301 0018 27D1     		bne	.L180
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3302              		.loc 1 2036 0
 3303 001a FB68     		ldr	r3, [r7, #12]
 3304 001c 9B6A     		ldr	r3, [r3, #40]
 3305 001e 43F40072 		orr	r2, r3, #512
 3306 0022 FB68     		ldr	r3, [r7, #12]
 3307 0024 9A62     		str	r2, [r3, #40]
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3308              		.loc 1 2043 0
 3309 0026 FB68     		ldr	r3, [r7, #12]
 3310 0028 1B68     		ldr	r3, [r3]
 3311 002a 9B68     		ldr	r3, [r3, #8]
 3312 002c 03F46023 		and	r3, r3, #917504
 3313 0030 B3F5602F 		cmp	r3, #917504
 3314 0034 15D1     		bne	.L181
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3315              		.loc 1 2044 0 discriminator 1
 3316 0036 FB68     		ldr	r3, [r7, #12]
 3317 0038 DB68     		ldr	r3, [r3, #12]
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3318              		.loc 1 2043 0 discriminator 1
 3319 003a 002B     		cmp	r3, #0
 3320 003c 11D1     		bne	.L181
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3321              		.loc 1 2047 0
 3322 003e FB68     		ldr	r3, [r7, #12]
 3323 0040 9B6A     		ldr	r3, [r3, #40]
 3324 0042 23F48072 		bic	r2, r3, #256
 3325 0046 FB68     		ldr	r3, [r7, #12]
 3326 0048 9A62     		str	r2, [r3, #40]
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/cccU0R2Q.s 			page 95


2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3327              		.loc 1 2049 0
 3328 004a FB68     		ldr	r3, [r7, #12]
 3329 004c 9B6A     		ldr	r3, [r3, #40]
 3330 004e 03F48053 		and	r3, r3, #4096
 3331 0052 002B     		cmp	r3, #0
 3332 0054 05D1     		bne	.L181
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3333              		.loc 1 2051 0
 3334 0056 FB68     		ldr	r3, [r7, #12]
 3335 0058 9B6A     		ldr	r3, [r3, #40]
 3336 005a 43F00102 		orr	r2, r3, #1
 3337 005e FB68     		ldr	r3, [r7, #12]
 3338 0060 9A62     		str	r2, [r3, #40]
 3339              	.L181:
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 3340              		.loc 1 2056 0
 3341 0062 F868     		ldr	r0, [r7, #12]
 3342 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3343              		.loc 1 2063 0
 3344 0068 04E0     		b	.L183
 3345              	.L180:
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3346              		.loc 1 2061 0
 3347 006a FB68     		ldr	r3, [r7, #12]
 3348 006c 1B6A     		ldr	r3, [r3, #32]
 3349 006e 1B6B     		ldr	r3, [r3, #48]
 3350 0070 7868     		ldr	r0, [r7, #4]
 3351 0072 9847     		blx	r3
 3352              	.LVL0:
 3353              	.L183:
 3354              		.loc 1 2063 0
 3355 0074 00BF     		nop
 3356 0076 1037     		adds	r7, r7, #16
 3357              	.LCFI134:
 3358              		.cfi_def_cfa_offset 8
 3359 0078 BD46     		mov	sp, r7
 3360              	.LCFI135:
 3361              		.cfi_def_cfa_register 13
 3362              		@ sp needed
 3363 007a 80BD     		pop	{r7, pc}
 3364              		.cfi_endproc
 3365              	.LFE90:
 3367              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3368              		.align	1
ARM GAS  /tmp/cccU0R2Q.s 			page 96


 3369              		.global	ADC_DMAHalfConvCplt
 3370              		.syntax unified
 3371              		.thumb
 3372              		.thumb_func
 3373              		.fpu softvfp
 3375              	ADC_DMAHalfConvCplt:
 3376              	.LFB91:
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3377              		.loc 1 2071 0
 3378              		.cfi_startproc
 3379              		@ args = 0, pretend = 0, frame = 16
 3380              		@ frame_needed = 1, uses_anonymous_args = 0
 3381 0000 80B5     		push	{r7, lr}
 3382              	.LCFI136:
 3383              		.cfi_def_cfa_offset 8
 3384              		.cfi_offset 7, -8
 3385              		.cfi_offset 14, -4
 3386 0002 84B0     		sub	sp, sp, #16
 3387              	.LCFI137:
 3388              		.cfi_def_cfa_offset 24
 3389 0004 00AF     		add	r7, sp, #0
 3390              	.LCFI138:
 3391              		.cfi_def_cfa_register 7
 3392 0006 7860     		str	r0, [r7, #4]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3393              		.loc 1 2073 0
 3394 0008 7B68     		ldr	r3, [r7, #4]
 3395 000a 5B6A     		ldr	r3, [r3, #36]
 3396 000c FB60     		str	r3, [r7, #12]
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3397              		.loc 1 2076 0
 3398 000e F868     		ldr	r0, [r7, #12]
 3399 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3400              		.loc 1 2077 0
 3401 0014 00BF     		nop
 3402 0016 1037     		adds	r7, r7, #16
 3403              	.LCFI139:
 3404              		.cfi_def_cfa_offset 8
 3405 0018 BD46     		mov	sp, r7
 3406              	.LCFI140:
 3407              		.cfi_def_cfa_register 13
 3408              		@ sp needed
 3409 001a 80BD     		pop	{r7, pc}
 3410              		.cfi_endproc
 3411              	.LFE91:
 3413              		.section	.text.ADC_DMAError,"ax",%progbits
ARM GAS  /tmp/cccU0R2Q.s 			page 97


 3414              		.align	1
 3415              		.global	ADC_DMAError
 3416              		.syntax unified
 3417              		.thumb
 3418              		.thumb_func
 3419              		.fpu softvfp
 3421              	ADC_DMAError:
 3422              	.LFB92:
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3423              		.loc 1 2085 0
 3424              		.cfi_startproc
 3425              		@ args = 0, pretend = 0, frame = 16
 3426              		@ frame_needed = 1, uses_anonymous_args = 0
 3427 0000 80B5     		push	{r7, lr}
 3428              	.LCFI141:
 3429              		.cfi_def_cfa_offset 8
 3430              		.cfi_offset 7, -8
 3431              		.cfi_offset 14, -4
 3432 0002 84B0     		sub	sp, sp, #16
 3433              	.LCFI142:
 3434              		.cfi_def_cfa_offset 24
 3435 0004 00AF     		add	r7, sp, #0
 3436              	.LCFI143:
 3437              		.cfi_def_cfa_register 7
 3438 0006 7860     		str	r0, [r7, #4]
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3439              		.loc 1 2087 0
 3440 0008 7B68     		ldr	r3, [r7, #4]
 3441 000a 5B6A     		ldr	r3, [r3, #36]
 3442 000c FB60     		str	r3, [r7, #12]
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3443              		.loc 1 2090 0
 3444 000e FB68     		ldr	r3, [r7, #12]
 3445 0010 9B6A     		ldr	r3, [r3, #40]
 3446 0012 43F04002 		orr	r2, r3, #64
 3447 0016 FB68     		ldr	r3, [r7, #12]
 3448 0018 9A62     		str	r2, [r3, #40]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3449              		.loc 1 2093 0
 3450 001a FB68     		ldr	r3, [r7, #12]
 3451 001c DB6A     		ldr	r3, [r3, #44]
 3452 001e 43F00402 		orr	r2, r3, #4
 3453 0022 FB68     		ldr	r3, [r7, #12]
 3454 0024 DA62     		str	r2, [r3, #44]
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/cccU0R2Q.s 			page 98


2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3455              		.loc 1 2096 0
 3456 0026 F868     		ldr	r0, [r7, #12]
 3457 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3458              		.loc 1 2097 0
 3459 002c 00BF     		nop
 3460 002e 1037     		adds	r7, r7, #16
 3461              	.LCFI144:
 3462              		.cfi_def_cfa_offset 8
 3463 0030 BD46     		mov	sp, r7
 3464              	.LCFI145:
 3465              		.cfi_def_cfa_register 13
 3466              		@ sp needed
 3467 0032 80BD     		pop	{r7, pc}
 3468              		.cfi_endproc
 3469              	.LFE92:
 3471              		.text
 3472              	.Letext0:
 3473              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3474              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3475              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 3476              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 3477              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3478              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3479              		.file 8 "/usr/include/newlib/sys/lock.h"
 3480              		.file 9 "/usr/include/newlib/sys/_types.h"
 3481              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 3482              		.file 11 "/usr/include/newlib/sys/reent.h"
 3483              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3484              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3485              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
ARM GAS  /tmp/cccU0R2Q.s 			page 99


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/cccU0R2Q.s:16     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cccU0R2Q.s:23     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cccU0R2Q.s:542    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cccU0R2Q.s:3177   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/cccU0R2Q.s:297    .text.HAL_ADC_Init:00000000000001a8 $d
     /tmp/cccU0R2Q.s:303    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cccU0R2Q.s:310    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cccU0R2Q.s:585    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cccU0R2Q.s:529    .text.HAL_ADC_DeInit:000000000000017c $d
     /tmp/cccU0R2Q.s:535    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cccU0R2Q.s:578    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cccU0R2Q.s:621    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cccU0R2Q.s:628    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cccU0R2Q.s:3049   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/cccU0R2Q.s:839    .text.HAL_ADC_Start:0000000000000154 $d
     /tmp/cccU0R2Q.s:845    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cccU0R2Q.s:852    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cccU0R2Q.s:925    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cccU0R2Q.s:932    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cccU0R2Q.s:1239   .text.HAL_ADC_PollForConversion:00000000000001dc $d
     /tmp/cccU0R2Q.s:1249   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cccU0R2Q.s:1256   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cccU0R2Q.s:1353   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cccU0R2Q.s:1360   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cccU0R2Q.s:1579   .text.HAL_ADC_Start_IT:0000000000000164 $d
     /tmp/cccU0R2Q.s:1585   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cccU0R2Q.s:1592   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cccU0R2Q.s:1673   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cccU0R2Q.s:1680   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cccU0R2Q.s:1939   .text.HAL_ADC_Start_DMA:00000000000001a8 $d
     /tmp/cccU0R2Q.s:3274   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cccU0R2Q.s:3375   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cccU0R2Q.s:3421   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cccU0R2Q.s:1948   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cccU0R2Q.s:1955   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cccU0R2Q.s:2055   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cccU0R2Q.s:2062   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cccU0R2Q.s:2102   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cccU0R2Q.s:2109   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cccU0R2Q.s:2346   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cccU0R2Q.s:2432   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cccU0R2Q.s:2339   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cccU0R2Q.s:2382   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cccU0R2Q.s:2389   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cccU0R2Q.s:2425   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cccU0R2Q.s:2468   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/cccU0R2Q.s:2475   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cccU0R2Q.s:2511   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cccU0R2Q.s:2518   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cccU0R2Q.s:2809   .text.HAL_ADC_ConfigChannel:00000000000001e4 $d
     /tmp/cccU0R2Q.s:2816   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cccU0R2Q.s:2823   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cccU0R2Q.s:2943   .text.HAL_ADC_AnalogWDGConfig:00000000000000a0 $d
     /tmp/cccU0R2Q.s:2950   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cccU0R2Q.s:2957   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
ARM GAS  /tmp/cccU0R2Q.s 			page 100


     /tmp/cccU0R2Q.s:2996   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cccU0R2Q.s:3003   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/cccU0R2Q.s:3042   .text.ADC_Enable:0000000000000000 $t
     /tmp/cccU0R2Q.s:3164   .text.ADC_Enable:000000000000009c $d
     /tmp/cccU0R2Q.s:3170   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/cccU0R2Q.s:3267   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cccU0R2Q.s:3368   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/cccU0R2Q.s:3414   .text.ADC_DMAError:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
