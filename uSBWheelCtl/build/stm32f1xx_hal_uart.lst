ARM GAS  /tmp/ccNHJhAL.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_UART_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_UART_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_UART_Init:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @version V1.1.1
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @date    12-May-2017
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART pins (TX as alternate function pull-up, RX as alternate functi
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
ARM GAS  /tmp/ccNHJhAL.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required 
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.                
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete 
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling 
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..] 
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt, 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..] 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver:
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
ARM GAS  /tmp/ccNHJhAL.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..] 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccNHJhAL.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *      without specific prior written permission.
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccNHJhAL.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig (UART_HandleTypeDef *huart);
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions 
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length 
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manuals 
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccNHJhAL.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  26              		.loc 1 262 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart == NULL)
  42              		.loc 1 264 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 002B     		cmp	r3, #0
  45 000c 01D1     		bne	.L2
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
  46              		.loc 1 266 0
  47 000e 0123     		movs	r3, #1
  48 0010 3FE0     		b	.L3
  49              	.L2:
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2, USART3 */
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
  50              		.loc 1 285 0
  51 0012 7B68     		ldr	r3, [r7, #4]
  52 0014 93F83930 		ldrb	r3, [r3, #57]
  53 0018 DBB2     		uxtb	r3, r3
  54 001a 002B     		cmp	r3, #0
  55 001c 06D1     		bne	.L4
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {  
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
ARM GAS  /tmp/ccNHJhAL.s 			page 7


  56              		.loc 1 288 0
  57 001e 7B68     		ldr	r3, [r7, #4]
  58 0020 0022     		movs	r2, #0
  59 0022 83F83820 		strb	r2, [r3, #56]
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  60              		.loc 1 291 0
  61 0026 7868     		ldr	r0, [r7, #4]
  62 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  63              	.L4:
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  64              		.loc 1 294 0
  65 002c 7B68     		ldr	r3, [r7, #4]
  66 002e 2422     		movs	r2, #36
  67 0030 83F83920 		strb	r2, [r3, #57]
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  68              		.loc 1 297 0
  69 0034 7B68     		ldr	r3, [r7, #4]
  70 0036 1B68     		ldr	r3, [r3]
  71 0038 DA68     		ldr	r2, [r3, #12]
  72 003a 7B68     		ldr	r3, [r7, #4]
  73 003c 1B68     		ldr	r3, [r3]
  74 003e 22F40052 		bic	r2, r2, #8192
  75 0042 DA60     		str	r2, [r3, #12]
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  76              		.loc 1 300 0
  77 0044 7868     		ldr	r0, [r7, #4]
  78 0046 FFF7FEFF 		bl	UART_SetConfig
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared: 
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  79              		.loc 1 305 0
  80 004a 7B68     		ldr	r3, [r7, #4]
  81 004c 1B68     		ldr	r3, [r3]
  82 004e 1A69     		ldr	r2, [r3, #16]
  83 0050 7B68     		ldr	r3, [r7, #4]
  84 0052 1B68     		ldr	r3, [r3]
  85 0054 22F49042 		bic	r2, r2, #18432
  86 0058 1A61     		str	r2, [r3, #16]
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  87              		.loc 1 306 0
  88 005a 7B68     		ldr	r3, [r7, #4]
  89 005c 1B68     		ldr	r3, [r3]
  90 005e 5A69     		ldr	r2, [r3, #20]
  91 0060 7B68     		ldr	r3, [r7, #4]
  92 0062 1B68     		ldr	r3, [r3]
  93 0064 22F02A02 		bic	r2, r2, #42
  94 0068 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccNHJhAL.s 			page 8


 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  95              		.loc 1 309 0
  96 006a 7B68     		ldr	r3, [r7, #4]
  97 006c 1B68     		ldr	r3, [r3]
  98 006e DA68     		ldr	r2, [r3, #12]
  99 0070 7B68     		ldr	r3, [r7, #4]
 100 0072 1B68     		ldr	r3, [r3]
 101 0074 42F40052 		orr	r2, r2, #8192
 102 0078 DA60     		str	r2, [r3, #12]
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 103              		.loc 1 312 0
 104 007a 7B68     		ldr	r3, [r7, #4]
 105 007c 0022     		movs	r2, #0
 106 007e DA63     		str	r2, [r3, #60]
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 107              		.loc 1 313 0
 108 0080 7B68     		ldr	r3, [r7, #4]
 109 0082 2022     		movs	r2, #32
 110 0084 83F83920 		strb	r2, [r3, #57]
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 111              		.loc 1 314 0
 112 0088 7B68     		ldr	r3, [r7, #4]
 113 008a 2022     		movs	r2, #32
 114 008c 83F83A20 		strb	r2, [r3, #58]
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 115              		.loc 1 316 0
 116 0090 0023     		movs	r3, #0
 117              	.L3:
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 118              		.loc 1 317 0
 119 0092 1846     		mov	r0, r3
 120 0094 0837     		adds	r7, r7, #8
 121              	.LCFI3:
 122              		.cfi_def_cfa_offset 8
 123 0096 BD46     		mov	sp, r7
 124              	.LCFI4:
 125              		.cfi_def_cfa_register 13
 126              		@ sp needed
 127 0098 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE66:
 131              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 132              		.align	1
 133              		.global	HAL_HalfDuplex_Init
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	HAL_HalfDuplex_Init:
 140              	.LFB67:
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccNHJhAL.s 			page 9


 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 141              		.loc 1 327 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145 0000 80B5     		push	{r7, lr}
 146              	.LCFI5:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              	.LCFI6:
 152              		.cfi_def_cfa_offset 16
 153 0004 00AF     		add	r7, sp, #0
 154              	.LCFI7:
 155              		.cfi_def_cfa_register 7
 156 0006 7860     		str	r0, [r7, #4]
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart == NULL)
 157              		.loc 1 329 0
 158 0008 7B68     		ldr	r3, [r7, #4]
 159 000a 002B     		cmp	r3, #0
 160 000c 01D1     		bne	.L6
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 161              		.loc 1 331 0
 162 000e 0123     		movs	r3, #1
 163 0010 47E0     		b	.L7
 164              	.L6:
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */ 
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 165              		.loc 1 340 0
 166 0012 7B68     		ldr	r3, [r7, #4]
 167 0014 93F83930 		ldrb	r3, [r3, #57]
 168 0018 DBB2     		uxtb	r3, r3
 169 001a 002B     		cmp	r3, #0
 170 001c 06D1     		bne	.L8
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 171              		.loc 1 343 0
 172 001e 7B68     		ldr	r3, [r7, #4]
 173 0020 0022     		movs	r2, #0
ARM GAS  /tmp/ccNHJhAL.s 			page 10


 174 0022 83F83820 		strb	r2, [r3, #56]
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 175              		.loc 1 345 0
 176 0026 7868     		ldr	r0, [r7, #4]
 177 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 178              	.L8:
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 179              		.loc 1 348 0
 180 002c 7B68     		ldr	r3, [r7, #4]
 181 002e 2422     		movs	r2, #36
 182 0030 83F83920 		strb	r2, [r3, #57]
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 183              		.loc 1 351 0
 184 0034 7B68     		ldr	r3, [r7, #4]
 185 0036 1B68     		ldr	r3, [r3]
 186 0038 DA68     		ldr	r2, [r3, #12]
 187 003a 7B68     		ldr	r3, [r7, #4]
 188 003c 1B68     		ldr	r3, [r3]
 189 003e 22F40052 		bic	r2, r2, #8192
 190 0042 DA60     		str	r2, [r3, #12]
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 191              		.loc 1 354 0
 192 0044 7868     		ldr	r0, [r7, #4]
 193 0046 FFF7FEFF 		bl	UART_SetConfig
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 194              		.loc 1 359 0
 195 004a 7B68     		ldr	r3, [r7, #4]
 196 004c 1B68     		ldr	r3, [r3]
 197 004e 1A69     		ldr	r2, [r3, #16]
 198 0050 7B68     		ldr	r3, [r7, #4]
 199 0052 1B68     		ldr	r3, [r3]
 200 0054 22F49042 		bic	r2, r2, #18432
 201 0058 1A61     		str	r2, [r3, #16]
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 202              		.loc 1 360 0
 203 005a 7B68     		ldr	r3, [r7, #4]
 204 005c 1B68     		ldr	r3, [r3]
 205 005e 5A69     		ldr	r2, [r3, #20]
 206 0060 7B68     		ldr	r3, [r7, #4]
 207 0062 1B68     		ldr	r3, [r3]
 208 0064 22F02202 		bic	r2, r2, #34
 209 0068 5A61     		str	r2, [r3, #20]
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 210              		.loc 1 363 0
ARM GAS  /tmp/ccNHJhAL.s 			page 11


 211 006a 7B68     		ldr	r3, [r7, #4]
 212 006c 1B68     		ldr	r3, [r3]
 213 006e 5A69     		ldr	r2, [r3, #20]
 214 0070 7B68     		ldr	r3, [r7, #4]
 215 0072 1B68     		ldr	r3, [r3]
 216 0074 42F00802 		orr	r2, r2, #8
 217 0078 5A61     		str	r2, [r3, #20]
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 218              		.loc 1 366 0
 219 007a 7B68     		ldr	r3, [r7, #4]
 220 007c 1B68     		ldr	r3, [r3]
 221 007e DA68     		ldr	r2, [r3, #12]
 222 0080 7B68     		ldr	r3, [r7, #4]
 223 0082 1B68     		ldr	r3, [r3]
 224 0084 42F40052 		orr	r2, r2, #8192
 225 0088 DA60     		str	r2, [r3, #12]
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 226              		.loc 1 369 0
 227 008a 7B68     		ldr	r3, [r7, #4]
 228 008c 0022     		movs	r2, #0
 229 008e DA63     		str	r2, [r3, #60]
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 230              		.loc 1 370 0
 231 0090 7B68     		ldr	r3, [r7, #4]
 232 0092 2022     		movs	r2, #32
 233 0094 83F83920 		strb	r2, [r3, #57]
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 234              		.loc 1 371 0
 235 0098 7B68     		ldr	r3, [r7, #4]
 236 009a 2022     		movs	r2, #32
 237 009c 83F83A20 		strb	r2, [r3, #58]
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 238              		.loc 1 373 0
 239 00a0 0023     		movs	r3, #0
 240              	.L7:
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 241              		.loc 1 374 0
 242 00a2 1846     		mov	r0, r3
 243 00a4 0837     		adds	r7, r7, #8
 244              	.LCFI8:
 245              		.cfi_def_cfa_offset 8
 246 00a6 BD46     		mov	sp, r7
 247              	.LCFI9:
 248              		.cfi_def_cfa_register 13
 249              		@ sp needed
 250 00a8 80BD     		pop	{r7, pc}
 251              		.cfi_endproc
 252              	.LFE67:
 254              		.section	.text.HAL_LIN_Init,"ax",%progbits
 255              		.align	1
 256              		.global	HAL_LIN_Init
 257              		.syntax unified
ARM GAS  /tmp/ccNHJhAL.s 			page 12


 258              		.thumb
 259              		.thumb_func
 260              		.fpu softvfp
 262              	HAL_LIN_Init:
 263              	.LFB68:
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength: Specifies the LIN break detection length.
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 264              		.loc 1 388 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 8
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI10:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              	.LCFI11:
 275              		.cfi_def_cfa_offset 16
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI12:
 278              		.cfi_def_cfa_register 7
 279 0006 7860     		str	r0, [r7, #4]
 280 0008 3960     		str	r1, [r7]
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart == NULL)
 281              		.loc 1 390 0
 282 000a 7B68     		ldr	r3, [r7, #4]
 283 000c 002B     		cmp	r3, #0
 284 000e 01D1     		bne	.L10
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 285              		.loc 1 392 0
 286 0010 0123     		movs	r3, #1
 287 0012 51E0     		b	.L11
 288              	.L10:
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */  
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
ARM GAS  /tmp/ccNHJhAL.s 			page 13


 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 289              		.loc 1 404 0
 290 0014 7B68     		ldr	r3, [r7, #4]
 291 0016 93F83930 		ldrb	r3, [r3, #57]
 292 001a DBB2     		uxtb	r3, r3
 293 001c 002B     		cmp	r3, #0
 294 001e 06D1     		bne	.L12
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 295              		.loc 1 407 0
 296 0020 7B68     		ldr	r3, [r7, #4]
 297 0022 0022     		movs	r2, #0
 298 0024 83F83820 		strb	r2, [r3, #56]
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 299              		.loc 1 409 0
 300 0028 7868     		ldr	r0, [r7, #4]
 301 002a FFF7FEFF 		bl	HAL_UART_MspInit
 302              	.L12:
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 303              		.loc 1 412 0
 304 002e 7B68     		ldr	r3, [r7, #4]
 305 0030 2422     		movs	r2, #36
 306 0032 83F83920 		strb	r2, [r3, #57]
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 307              		.loc 1 415 0
 308 0036 7B68     		ldr	r3, [r7, #4]
 309 0038 1B68     		ldr	r3, [r3]
 310 003a DA68     		ldr	r2, [r3, #12]
 311 003c 7B68     		ldr	r3, [r7, #4]
 312 003e 1B68     		ldr	r3, [r3]
 313 0040 22F40052 		bic	r2, r2, #8192
 314 0044 DA60     		str	r2, [r3, #12]
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 315              		.loc 1 418 0
 316 0046 7868     		ldr	r0, [r7, #4]
 317 0048 FFF7FEFF 		bl	UART_SetConfig
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared: 
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 318              		.loc 1 423 0
 319 004c 7B68     		ldr	r3, [r7, #4]
 320 004e 1B68     		ldr	r3, [r3]
 321 0050 1A69     		ldr	r2, [r3, #16]
 322 0052 7B68     		ldr	r3, [r7, #4]
 323 0054 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNHJhAL.s 			page 14


 324 0056 22F40062 		bic	r2, r2, #2048
 325 005a 1A61     		str	r2, [r3, #16]
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 326              		.loc 1 424 0
 327 005c 7B68     		ldr	r3, [r7, #4]
 328 005e 1B68     		ldr	r3, [r3]
 329 0060 5A69     		ldr	r2, [r3, #20]
 330 0062 7B68     		ldr	r3, [r7, #4]
 331 0064 1B68     		ldr	r3, [r3]
 332 0066 22F02A02 		bic	r2, r2, #42
 333 006a 5A61     		str	r2, [r3, #20]
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 334              		.loc 1 427 0
 335 006c 7B68     		ldr	r3, [r7, #4]
 336 006e 1B68     		ldr	r3, [r3]
 337 0070 1A69     		ldr	r2, [r3, #16]
 338 0072 7B68     		ldr	r3, [r7, #4]
 339 0074 1B68     		ldr	r3, [r3]
 340 0076 42F48042 		orr	r2, r2, #16384
 341 007a 1A61     		str	r2, [r3, #16]
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 342              		.loc 1 430 0
 343 007c 7B68     		ldr	r3, [r7, #4]
 344 007e 1B68     		ldr	r3, [r3]
 345 0080 1B69     		ldr	r3, [r3, #16]
 346 0082 23F02001 		bic	r1, r3, #32
 347 0086 7B68     		ldr	r3, [r7, #4]
 348 0088 1B68     		ldr	r3, [r3]
 349 008a 3A68     		ldr	r2, [r7]
 350 008c 0A43     		orrs	r2, r2, r1
 351 008e 1A61     		str	r2, [r3, #16]
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 352              		.loc 1 433 0
 353 0090 7B68     		ldr	r3, [r7, #4]
 354 0092 1B68     		ldr	r3, [r3]
 355 0094 DA68     		ldr	r2, [r3, #12]
 356 0096 7B68     		ldr	r3, [r7, #4]
 357 0098 1B68     		ldr	r3, [r3]
 358 009a 42F40052 		orr	r2, r2, #8192
 359 009e DA60     		str	r2, [r3, #12]
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 360              		.loc 1 436 0
 361 00a0 7B68     		ldr	r3, [r7, #4]
 362 00a2 0022     		movs	r2, #0
 363 00a4 DA63     		str	r2, [r3, #60]
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 364              		.loc 1 437 0
 365 00a6 7B68     		ldr	r3, [r7, #4]
 366 00a8 2022     		movs	r2, #32
ARM GAS  /tmp/ccNHJhAL.s 			page 15


 367 00aa 83F83920 		strb	r2, [r3, #57]
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 368              		.loc 1 438 0
 369 00ae 7B68     		ldr	r3, [r7, #4]
 370 00b0 2022     		movs	r2, #32
 371 00b2 83F83A20 		strb	r2, [r3, #58]
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 372              		.loc 1 440 0
 373 00b6 0023     		movs	r3, #0
 374              	.L11:
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 375              		.loc 1 441 0
 376 00b8 1846     		mov	r0, r3
 377 00ba 0837     		adds	r7, r7, #8
 378              	.LCFI13:
 379              		.cfi_def_cfa_offset 8
 380 00bc BD46     		mov	sp, r7
 381              	.LCFI14:
 382              		.cfi_def_cfa_register 13
 383              		@ sp needed
 384 00be 80BD     		pop	{r7, pc}
 385              		.cfi_endproc
 386              	.LFE68:
 388              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 389              		.align	1
 390              		.global	HAL_MultiProcessor_Init
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 394              		.fpu softvfp
 396              	HAL_MultiProcessor_Init:
 397              	.LFB69:
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address: USART address
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod: specifies the USART wake-up method.
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 398              		.loc 1 456 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 16
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402 0000 80B5     		push	{r7, lr}
 403              	.LCFI15:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNHJhAL.s 			page 16


 407 0002 84B0     		sub	sp, sp, #16
 408              	.LCFI16:
 409              		.cfi_def_cfa_offset 24
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI17:
 412              		.cfi_def_cfa_register 7
 413 0006 F860     		str	r0, [r7, #12]
 414 0008 0B46     		mov	r3, r1
 415 000a 7A60     		str	r2, [r7, #4]
 416 000c FB72     		strb	r3, [r7, #11]
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart == NULL)
 417              		.loc 1 458 0
 418 000e FB68     		ldr	r3, [r7, #12]
 419 0010 002B     		cmp	r3, #0
 420 0012 01D1     		bne	.L14
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 421              		.loc 1 460 0
 422 0014 0123     		movs	r3, #1
 423 0016 53E0     		b	.L15
 424              	.L14:
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check UART instance capabilities */  
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MULTIPROCESSOR_INSTANCE(huart->Instance));
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 425              		.loc 1 474 0
 426 0018 FB68     		ldr	r3, [r7, #12]
 427 001a 93F83930 		ldrb	r3, [r3, #57]
 428 001e DBB2     		uxtb	r3, r3
 429 0020 002B     		cmp	r3, #0
 430 0022 06D1     		bne	.L16
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 431              		.loc 1 477 0
 432 0024 FB68     		ldr	r3, [r7, #12]
 433 0026 0022     		movs	r2, #0
 434 0028 83F83820 		strb	r2, [r3, #56]
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 435              		.loc 1 479 0
 436 002c F868     		ldr	r0, [r7, #12]
 437 002e FFF7FEFF 		bl	HAL_UART_MspInit
 438              	.L16:
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccNHJhAL.s 			page 17


 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 439              		.loc 1 482 0
 440 0032 FB68     		ldr	r3, [r7, #12]
 441 0034 2422     		movs	r2, #36
 442 0036 83F83920 		strb	r2, [r3, #57]
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 443              		.loc 1 485 0
 444 003a FB68     		ldr	r3, [r7, #12]
 445 003c 1B68     		ldr	r3, [r3]
 446 003e DA68     		ldr	r2, [r3, #12]
 447 0040 FB68     		ldr	r3, [r7, #12]
 448 0042 1B68     		ldr	r3, [r3]
 449 0044 22F40052 		bic	r2, r2, #8192
 450 0048 DA60     		str	r2, [r3, #12]
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 451              		.loc 1 488 0
 452 004a F868     		ldr	r0, [r7, #12]
 453 004c FFF7FEFF 		bl	UART_SetConfig
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared: 
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 454              		.loc 1 493 0
 455 0050 FB68     		ldr	r3, [r7, #12]
 456 0052 1B68     		ldr	r3, [r3]
 457 0054 1A69     		ldr	r2, [r3, #16]
 458 0056 FB68     		ldr	r3, [r7, #12]
 459 0058 1B68     		ldr	r3, [r3]
 460 005a 22F49042 		bic	r2, r2, #18432
 461 005e 1A61     		str	r2, [r3, #16]
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 462              		.loc 1 494 0
 463 0060 FB68     		ldr	r3, [r7, #12]
 464 0062 1B68     		ldr	r3, [r3]
 465 0064 5A69     		ldr	r2, [r3, #20]
 466 0066 FB68     		ldr	r3, [r7, #12]
 467 0068 1B68     		ldr	r3, [r3]
 468 006a 22F02A02 		bic	r2, r2, #42
 469 006e 5A61     		str	r2, [r3, #20]
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, Address);
 470              		.loc 1 497 0
 471 0070 FB68     		ldr	r3, [r7, #12]
 472 0072 1B68     		ldr	r3, [r3]
 473 0074 1B69     		ldr	r3, [r3, #16]
 474 0076 23F00F01 		bic	r1, r3, #15
 475 007a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 476 007c FB68     		ldr	r3, [r7, #12]
 477 007e 1B68     		ldr	r3, [r3]
 478 0080 0A43     		orrs	r2, r2, r1
 479 0082 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccNHJhAL.s 			page 18


 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 480              		.loc 1 500 0
 481 0084 FB68     		ldr	r3, [r7, #12]
 482 0086 1B68     		ldr	r3, [r3]
 483 0088 DB68     		ldr	r3, [r3, #12]
 484 008a 23F40061 		bic	r1, r3, #2048
 485 008e FB68     		ldr	r3, [r7, #12]
 486 0090 1B68     		ldr	r3, [r3]
 487 0092 7A68     		ldr	r2, [r7, #4]
 488 0094 0A43     		orrs	r2, r2, r1
 489 0096 DA60     		str	r2, [r3, #12]
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 490              		.loc 1 503 0
 491 0098 FB68     		ldr	r3, [r7, #12]
 492 009a 1B68     		ldr	r3, [r3]
 493 009c DA68     		ldr	r2, [r3, #12]
 494 009e FB68     		ldr	r3, [r7, #12]
 495 00a0 1B68     		ldr	r3, [r3]
 496 00a2 42F40052 		orr	r2, r2, #8192
 497 00a6 DA60     		str	r2, [r3, #12]
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 498              		.loc 1 506 0
 499 00a8 FB68     		ldr	r3, [r7, #12]
 500 00aa 0022     		movs	r2, #0
 501 00ac DA63     		str	r2, [r3, #60]
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 502              		.loc 1 507 0
 503 00ae FB68     		ldr	r3, [r7, #12]
 504 00b0 2022     		movs	r2, #32
 505 00b2 83F83920 		strb	r2, [r3, #57]
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 506              		.loc 1 508 0
 507 00b6 FB68     		ldr	r3, [r7, #12]
 508 00b8 2022     		movs	r2, #32
 509 00ba 83F83A20 		strb	r2, [r3, #58]
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 510              		.loc 1 510 0
 511 00be 0023     		movs	r3, #0
 512              	.L15:
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 513              		.loc 1 511 0
 514 00c0 1846     		mov	r0, r3
 515 00c2 1037     		adds	r7, r7, #16
 516              	.LCFI18:
 517              		.cfi_def_cfa_offset 8
 518 00c4 BD46     		mov	sp, r7
 519              	.LCFI19:
 520              		.cfi_def_cfa_register 13
 521              		@ sp needed
 522 00c6 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccNHJhAL.s 			page 19


 523              		.cfi_endproc
 524              	.LFE69:
 526              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 527              		.align	1
 528              		.global	HAL_UART_DeInit
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu softvfp
 534              	HAL_UART_DeInit:
 535              	.LFB70:
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral. 
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 536              		.loc 1 520 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 8
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540 0000 80B5     		push	{r7, lr}
 541              	.LCFI20:
 542              		.cfi_def_cfa_offset 8
 543              		.cfi_offset 7, -8
 544              		.cfi_offset 14, -4
 545 0002 82B0     		sub	sp, sp, #8
 546              	.LCFI21:
 547              		.cfi_def_cfa_offset 16
 548 0004 00AF     		add	r7, sp, #0
 549              	.LCFI22:
 550              		.cfi_def_cfa_register 7
 551 0006 7860     		str	r0, [r7, #4]
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart == NULL)
 552              		.loc 1 522 0
 553 0008 7B68     		ldr	r3, [r7, #4]
 554 000a 002B     		cmp	r3, #0
 555 000c 01D1     		bne	.L18
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 556              		.loc 1 524 0
 557 000e 0123     		movs	r3, #1
 558 0010 16E0     		b	.L19
 559              	.L18:
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 560              		.loc 1 530 0
 561 0012 7B68     		ldr	r3, [r7, #4]
 562 0014 2422     		movs	r2, #36
ARM GAS  /tmp/ccNHJhAL.s 			page 20


 563 0016 83F83920 		strb	r2, [r3, #57]
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 564              		.loc 1 533 0
 565 001a 7868     		ldr	r0, [r7, #4]
 566 001c FFF7FEFF 		bl	HAL_UART_MspDeInit
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 567              		.loc 1 535 0
 568 0020 7B68     		ldr	r3, [r7, #4]
 569 0022 0022     		movs	r2, #0
 570 0024 DA63     		str	r2, [r3, #60]
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 571              		.loc 1 536 0
 572 0026 7B68     		ldr	r3, [r7, #4]
 573 0028 0022     		movs	r2, #0
 574 002a 83F83920 		strb	r2, [r3, #57]
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 575              		.loc 1 537 0
 576 002e 7B68     		ldr	r3, [r7, #4]
 577 0030 0022     		movs	r2, #0
 578 0032 83F83A20 		strb	r2, [r3, #58]
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 579              		.loc 1 540 0
 580 0036 7B68     		ldr	r3, [r7, #4]
 581 0038 0022     		movs	r2, #0
 582 003a 83F83820 		strb	r2, [r3, #56]
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 583              		.loc 1 542 0
 584 003e 0023     		movs	r3, #0
 585              	.L19:
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 586              		.loc 1 543 0
 587 0040 1846     		mov	r0, r3
 588 0042 0837     		adds	r7, r7, #8
 589              	.LCFI23:
 590              		.cfi_def_cfa_offset 8
 591 0044 BD46     		mov	sp, r7
 592              	.LCFI24:
 593              		.cfi_def_cfa_register 13
 594              		@ sp needed
 595 0046 80BD     		pop	{r7, pc}
 596              		.cfi_endproc
 597              	.LFE70:
 599              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 600              		.align	1
 601              		.weak	HAL_UART_MspInit
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	HAL_UART_MspInit:
 608              	.LFB71:
ARM GAS  /tmp/ccNHJhAL.s 			page 21


 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 609              		.loc 1 552 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 8
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI25:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 7, -4
 618 0002 83B0     		sub	sp, sp, #12
 619              	.LCFI26:
 620              		.cfi_def_cfa_offset 16
 621 0004 00AF     		add	r7, sp, #0
 622              	.LCFI27:
 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 625              		.loc 1 558 0
 626 0008 00BF     		nop
 627 000a 0C37     		adds	r7, r7, #12
 628              	.LCFI28:
 629              		.cfi_def_cfa_offset 4
 630 000c BD46     		mov	sp, r7
 631              	.LCFI29:
 632              		.cfi_def_cfa_register 13
 633              		@ sp needed
 634 000e 80BC     		pop	{r7}
 635              	.LCFI30:
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 0010 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE71:
 642              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 643              		.align	1
 644              		.weak	HAL_UART_MspDeInit
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu softvfp
 650              	HAL_UART_MspDeInit:
 651              	.LFB72:
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccNHJhAL.s 			page 22


 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 652              		.loc 1 567 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657 0000 80B4     		push	{r7}
 658              	.LCFI31:
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0002 83B0     		sub	sp, sp, #12
 662              	.LCFI32:
 663              		.cfi_def_cfa_offset 16
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI33:
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 668              		.loc 1 573 0
 669 0008 00BF     		nop
 670 000a 0C37     		adds	r7, r7, #12
 671              	.LCFI34:
 672              		.cfi_def_cfa_offset 4
 673 000c BD46     		mov	sp, r7
 674              	.LCFI35:
 675              		.cfi_def_cfa_register 13
 676              		@ sp needed
 677 000e 80BC     		pop	{r7}
 678              	.LCFI36:
 679              		.cfi_restore 7
 680              		.cfi_def_cfa_offset 0
 681 0010 7047     		bx	lr
 682              		.cfi_endproc
 683              	.LFE72:
 685              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 686              		.align	1
 687              		.global	HAL_UART_Transmit
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu softvfp
 693              	HAL_UART_Transmit:
 694              	.LFB73:
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccNHJhAL.s 			page 23


 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions 
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions 
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode. 
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             The HAL status of all data processing is returned by the same function 
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             after finishing transfer.  
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (++) Non blocking mode: The communication is performed using Interrupts 
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             or DMA, these APIs return the HAL status.
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             The end of the data processing will be indicated through the 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             dedicated UART IRQ when using Interrupt mode or the DMA IRQ when 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             using DMA mode.
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks 
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             will be executed respectively at the end of the transmit or receive process.
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             The HAL_UART_ErrorCallback() user callback will be executed when 
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             a communication error is detected.
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode APIs are:
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Receive() 
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non Blocking mode APIs with Interrupt are:
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non Blocking mode functions with DMA are:
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_DMAPause()
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_DMAResume()
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_DMAStop()
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in non blocking mode:
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_TxHalfCpltCallback()
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_RxHalfCpltCallback()
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (@) In the Half duplex communication, it is forbidden to run the transmit 
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           can't be useful.
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
ARM GAS  /tmp/ccNHJhAL.s 			page 24


 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout: Timeout duration  
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 695              		.loc 1 646 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 24
 698              		@ frame_needed = 1, uses_anonymous_args = 0
 699 0000 80B5     		push	{r7, lr}
 700              	.LCFI37:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 88B0     		sub	sp, sp, #32
 705              	.LCFI38:
 706              		.cfi_def_cfa_offset 40
 707 0004 02AF     		add	r7, sp, #8
 708              	.LCFI39:
 709              		.cfi_def_cfa 7, 32
 710 0006 F860     		str	r0, [r7, #12]
 711 0008 B960     		str	r1, [r7, #8]
 712 000a 3B60     		str	r3, [r7]
 713 000c 1346     		mov	r3, r2	@ movhi
 714 000e FB80     		strh	r3, [r7, #6]	@ movhi
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t* tmp;
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 715              		.loc 1 648 0
 716 0010 0023     		movs	r3, #0
 717 0012 7B61     		str	r3, [r7, #20]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 718              		.loc 1 651 0
 719 0014 FB68     		ldr	r3, [r7, #12]
 720 0016 93F83930 		ldrb	r3, [r3, #57]
 721 001a DBB2     		uxtb	r3, r3
 722 001c 202B     		cmp	r3, #32
 723 001e 40F08380 		bne	.L23
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U))
 724              		.loc 1 653 0
 725 0022 BB68     		ldr	r3, [r7, #8]
 726 0024 002B     		cmp	r3, #0
 727 0026 02D0     		beq	.L24
 728              		.loc 1 653 0 is_stmt 0 discriminator 1
 729 0028 FB88     		ldrh	r3, [r7, #6]
 730 002a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccNHJhAL.s 			page 25


 731 002c 01D1     		bne	.L25
 732              	.L24:
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 733              		.loc 1 655 0 is_stmt 1
 734 002e 0123     		movs	r3, #1
 735 0030 7BE0     		b	.L26
 736              	.L25:
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 737              		.loc 1 659 0
 738 0032 FB68     		ldr	r3, [r7, #12]
 739 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 740 0038 012B     		cmp	r3, #1
 741 003a 01D1     		bne	.L27
 742              		.loc 1 659 0 is_stmt 0 discriminator 1
 743 003c 0223     		movs	r3, #2
 744 003e 74E0     		b	.L26
 745              	.L27:
 746              		.loc 1 659 0 discriminator 2
 747 0040 FB68     		ldr	r3, [r7, #12]
 748 0042 0122     		movs	r2, #1
 749 0044 83F83820 		strb	r2, [r3, #56]
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 750              		.loc 1 661 0 is_stmt 1 discriminator 2
 751 0048 FB68     		ldr	r3, [r7, #12]
 752 004a 0022     		movs	r2, #0
 753 004c DA63     		str	r2, [r3, #60]
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 754              		.loc 1 662 0 discriminator 2
 755 004e FB68     		ldr	r3, [r7, #12]
 756 0050 2122     		movs	r2, #33
 757 0052 83F83920 		strb	r2, [r3, #57]
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 758              		.loc 1 665 0 discriminator 2
 759 0056 FFF7FEFF 		bl	HAL_GetTick
 760 005a 7861     		str	r0, [r7, #20]
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 761              		.loc 1 667 0 discriminator 2
 762 005c FB68     		ldr	r3, [r7, #12]
 763 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 764 0060 9A84     		strh	r2, [r3, #36]	@ movhi
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 765              		.loc 1 668 0 discriminator 2
 766 0062 FB68     		ldr	r3, [r7, #12]
 767 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 768 0066 DA84     		strh	r2, [r3, #38]	@ movhi
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while(huart->TxXferCount > 0U)
 769              		.loc 1 669 0 discriminator 2
 770 0068 42E0     		b	.L28
 771              	.L34:
ARM GAS  /tmp/ccNHJhAL.s 			page 26


 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 772              		.loc 1 671 0
 773 006a FB68     		ldr	r3, [r7, #12]
 774 006c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 775 006e 9BB2     		uxth	r3, r3
 776 0070 013B     		subs	r3, r3, #1
 777 0072 9AB2     		uxth	r2, r3
 778 0074 FB68     		ldr	r3, [r7, #12]
 779 0076 DA84     		strh	r2, [r3, #38]	@ movhi
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 780              		.loc 1 672 0
 781 0078 FB68     		ldr	r3, [r7, #12]
 782 007a 9B68     		ldr	r3, [r3, #8]
 783 007c B3F5805F 		cmp	r3, #4096
 784 0080 22D1     		bne	.L29
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 785              		.loc 1 674 0
 786 0082 3B68     		ldr	r3, [r7]
 787 0084 0093     		str	r3, [sp]
 788 0086 7B69     		ldr	r3, [r7, #20]
 789 0088 0022     		movs	r2, #0
 790 008a 8021     		movs	r1, #128
 791 008c F868     		ldr	r0, [r7, #12]
 792 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 793 0092 0346     		mov	r3, r0
 794 0094 002B     		cmp	r3, #0
 795 0096 01D0     		beq	.L30
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 796              		.loc 1 676 0
 797 0098 0323     		movs	r3, #3
 798 009a 46E0     		b	.L26
 799              	.L30:
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 800              		.loc 1 678 0
 801 009c BB68     		ldr	r3, [r7, #8]
 802 009e 3B61     		str	r3, [r7, #16]
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 803              		.loc 1 679 0
 804 00a0 3B69     		ldr	r3, [r7, #16]
 805 00a2 1B88     		ldrh	r3, [r3]
 806 00a4 1A46     		mov	r2, r3
 807 00a6 FB68     		ldr	r3, [r7, #12]
 808 00a8 1B68     		ldr	r3, [r3]
 809 00aa C2F30802 		ubfx	r2, r2, #0, #9
 810 00ae 5A60     		str	r2, [r3, #4]
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 811              		.loc 1 680 0
 812 00b0 FB68     		ldr	r3, [r7, #12]
 813 00b2 1B69     		ldr	r3, [r3, #16]
 814 00b4 002B     		cmp	r3, #0
 815 00b6 03D1     		bne	.L31
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData +=2U;
ARM GAS  /tmp/ccNHJhAL.s 			page 27


 816              		.loc 1 682 0
 817 00b8 BB68     		ldr	r3, [r7, #8]
 818 00ba 0233     		adds	r3, r3, #2
 819 00bc BB60     		str	r3, [r7, #8]
 820 00be 17E0     		b	.L28
 821              	.L31:
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData +=1U;
 822              		.loc 1 686 0
 823 00c0 BB68     		ldr	r3, [r7, #8]
 824 00c2 0133     		adds	r3, r3, #1
 825 00c4 BB60     		str	r3, [r7, #8]
 826 00c6 13E0     		b	.L28
 827              	.L29:
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 828              		.loc 1 691 0
 829 00c8 3B68     		ldr	r3, [r7]
 830 00ca 0093     		str	r3, [sp]
 831 00cc 7B69     		ldr	r3, [r7, #20]
 832 00ce 0022     		movs	r2, #0
 833 00d0 8021     		movs	r1, #128
 834 00d2 F868     		ldr	r0, [r7, #12]
 835 00d4 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 836 00d8 0346     		mov	r3, r0
 837 00da 002B     		cmp	r3, #0
 838 00dc 01D0     		beq	.L33
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 839              		.loc 1 693 0
 840 00de 0323     		movs	r3, #3
 841 00e0 23E0     		b	.L26
 842              	.L33:
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 843              		.loc 1 695 0
 844 00e2 BB68     		ldr	r3, [r7, #8]
 845 00e4 5A1C     		adds	r2, r3, #1
 846 00e6 BA60     		str	r2, [r7, #8]
 847 00e8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 848 00ea FB68     		ldr	r3, [r7, #12]
 849 00ec 1B68     		ldr	r3, [r3]
 850 00ee 5A60     		str	r2, [r3, #4]
 851              	.L28:
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 852              		.loc 1 669 0
 853 00f0 FB68     		ldr	r3, [r7, #12]
 854 00f2 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 855 00f4 9BB2     		uxth	r3, r3
 856 00f6 002B     		cmp	r3, #0
 857 00f8 B7D1     		bne	.L34
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp/ccNHJhAL.s 			page 28


 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 858              		.loc 1 699 0
 859 00fa 3B68     		ldr	r3, [r7]
 860 00fc 0093     		str	r3, [sp]
 861 00fe 7B69     		ldr	r3, [r7, #20]
 862 0100 0022     		movs	r2, #0
 863 0102 4021     		movs	r1, #64
 864 0104 F868     		ldr	r0, [r7, #12]
 865 0106 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 866 010a 0346     		mov	r3, r0
 867 010c 002B     		cmp	r3, #0
 868 010e 01D0     		beq	.L35
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 869              		.loc 1 701 0
 870 0110 0323     		movs	r3, #3
 871 0112 0AE0     		b	.L26
 872              	.L35:
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 873              		.loc 1 705 0
 874 0114 FB68     		ldr	r3, [r7, #12]
 875 0116 2022     		movs	r2, #32
 876 0118 83F83920 		strb	r2, [r3, #57]
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 877              		.loc 1 708 0
 878 011c FB68     		ldr	r3, [r7, #12]
 879 011e 0022     		movs	r2, #0
 880 0120 83F83820 		strb	r2, [r3, #56]
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 881              		.loc 1 710 0
 882 0124 0023     		movs	r3, #0
 883 0126 00E0     		b	.L26
 884              	.L23:
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 885              		.loc 1 714 0
 886 0128 0223     		movs	r3, #2
 887              	.L26:
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 888              		.loc 1 716 0
 889 012a 1846     		mov	r0, r3
 890 012c 1837     		adds	r7, r7, #24
 891              	.LCFI40:
 892              		.cfi_def_cfa_offset 8
 893 012e BD46     		mov	sp, r7
 894              	.LCFI41:
ARM GAS  /tmp/ccNHJhAL.s 			page 29


 895              		.cfi_def_cfa_register 13
 896              		@ sp needed
 897 0130 80BD     		pop	{r7, pc}
 898              		.cfi_endproc
 899              	.LFE73:
 901              		.section	.text.HAL_UART_Receive,"ax",%progbits
 902              		.align	1
 903              		.global	HAL_UART_Receive
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu softvfp
 909              	HAL_UART_Receive:
 910              	.LFB74:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receive an amount of data in blocking mode. 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout: Timeout duration
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 911              		.loc 1 728 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 24
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 80B5     		push	{r7, lr}
 916              	.LCFI42:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 88B0     		sub	sp, sp, #32
 921              	.LCFI43:
 922              		.cfi_def_cfa_offset 40
 923 0004 02AF     		add	r7, sp, #8
 924              	.LCFI44:
 925              		.cfi_def_cfa 7, 32
 926 0006 F860     		str	r0, [r7, #12]
 927 0008 B960     		str	r1, [r7, #8]
 928 000a 3B60     		str	r3, [r7]
 929 000c 1346     		mov	r3, r2	@ movhi
 930 000e FB80     		strh	r3, [r7, #6]	@ movhi
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t* tmp;
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 931              		.loc 1 730 0
 932 0010 0023     		movs	r3, #0
 933 0012 7B61     		str	r3, [r7, #20]
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 934              		.loc 1 733 0
 935 0014 FB68     		ldr	r3, [r7, #12]
 936 0016 93F83A30 		ldrb	r3, [r3, #58]
ARM GAS  /tmp/ccNHJhAL.s 			page 30


 937 001a DBB2     		uxtb	r3, r3
 938 001c 202B     		cmp	r3, #32
 939 001e 40F09080 		bne	.L37
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U))
 940              		.loc 1 735 0
 941 0022 BB68     		ldr	r3, [r7, #8]
 942 0024 002B     		cmp	r3, #0
 943 0026 02D0     		beq	.L38
 944              		.loc 1 735 0 is_stmt 0 discriminator 1
 945 0028 FB88     		ldrh	r3, [r7, #6]
 946 002a 002B     		cmp	r3, #0
 947 002c 01D1     		bne	.L39
 948              	.L38:
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 949              		.loc 1 737 0 is_stmt 1
 950 002e 0123     		movs	r3, #1
 951 0030 88E0     		b	.L40
 952              	.L39:
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 953              		.loc 1 741 0
 954 0032 FB68     		ldr	r3, [r7, #12]
 955 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 956 0038 012B     		cmp	r3, #1
 957 003a 01D1     		bne	.L41
 958              		.loc 1 741 0 is_stmt 0 discriminator 1
 959 003c 0223     		movs	r3, #2
 960 003e 81E0     		b	.L40
 961              	.L41:
 962              		.loc 1 741 0 discriminator 2
 963 0040 FB68     		ldr	r3, [r7, #12]
 964 0042 0122     		movs	r2, #1
 965 0044 83F83820 		strb	r2, [r3, #56]
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 966              		.loc 1 743 0 is_stmt 1 discriminator 2
 967 0048 FB68     		ldr	r3, [r7, #12]
 968 004a 0022     		movs	r2, #0
 969 004c DA63     		str	r2, [r3, #60]
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 970              		.loc 1 744 0 discriminator 2
 971 004e FB68     		ldr	r3, [r7, #12]
 972 0050 2222     		movs	r2, #34
 973 0052 83F83A20 		strb	r2, [r3, #58]
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 974              		.loc 1 747 0 discriminator 2
 975 0056 FFF7FEFF 		bl	HAL_GetTick
 976 005a 7861     		str	r0, [r7, #20]
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 977              		.loc 1 749 0 discriminator 2
ARM GAS  /tmp/ccNHJhAL.s 			page 31


 978 005c FB68     		ldr	r3, [r7, #12]
 979 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 980 0060 9A85     		strh	r2, [r3, #44]	@ movhi
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 981              		.loc 1 750 0 discriminator 2
 982 0062 FB68     		ldr	r3, [r7, #12]
 983 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 984 0066 DA85     		strh	r2, [r3, #46]	@ movhi
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while(huart->RxXferCount > 0U)
 985              		.loc 1 753 0 discriminator 2
 986 0068 5CE0     		b	.L42
 987              	.L49:
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 988              		.loc 1 755 0
 989 006a FB68     		ldr	r3, [r7, #12]
 990 006c DB8D     		ldrh	r3, [r3, #46]	@ movhi
 991 006e 9BB2     		uxth	r3, r3
 992 0070 013B     		subs	r3, r3, #1
 993 0072 9AB2     		uxth	r2, r3
 994 0074 FB68     		ldr	r3, [r7, #12]
 995 0076 DA85     		strh	r2, [r3, #46]	@ movhi
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 996              		.loc 1 756 0
 997 0078 FB68     		ldr	r3, [r7, #12]
 998 007a 9B68     		ldr	r3, [r3, #8]
 999 007c B3F5805F 		cmp	r3, #4096
 1000 0080 2BD1     		bne	.L43
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1001              		.loc 1 758 0
 1002 0082 3B68     		ldr	r3, [r7]
 1003 0084 0093     		str	r3, [sp]
 1004 0086 7B69     		ldr	r3, [r7, #20]
 1005 0088 0022     		movs	r2, #0
 1006 008a 2021     		movs	r1, #32
 1007 008c F868     		ldr	r0, [r7, #12]
 1008 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1009 0092 0346     		mov	r3, r0
 1010 0094 002B     		cmp	r3, #0
 1011 0096 01D0     		beq	.L44
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 1012              		.loc 1 760 0
 1013 0098 0323     		movs	r3, #3
 1014 009a 53E0     		b	.L40
 1015              	.L44:
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t*)pData;
 1016              		.loc 1 762 0
 1017 009c BB68     		ldr	r3, [r7, #8]
 1018 009e 3B61     		str	r3, [r7, #16]
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1019              		.loc 1 763 0
 1020 00a0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccNHJhAL.s 			page 32


 1021 00a2 1B69     		ldr	r3, [r3, #16]
 1022 00a4 002B     		cmp	r3, #0
 1023 00a6 0CD1     		bne	.L45
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 1024              		.loc 1 765 0
 1025 00a8 FB68     		ldr	r3, [r7, #12]
 1026 00aa 1B68     		ldr	r3, [r3]
 1027 00ac 5B68     		ldr	r3, [r3, #4]
 1028 00ae 9BB2     		uxth	r3, r3
 1029 00b0 C3F30803 		ubfx	r3, r3, #0, #9
 1030 00b4 9AB2     		uxth	r2, r3
 1031 00b6 3B69     		ldr	r3, [r7, #16]
 1032 00b8 1A80     		strh	r2, [r3]	@ movhi
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData +=2U;
 1033              		.loc 1 766 0
 1034 00ba BB68     		ldr	r3, [r7, #8]
 1035 00bc 0233     		adds	r3, r3, #2
 1036 00be BB60     		str	r3, [r7, #8]
 1037 00c0 30E0     		b	.L42
 1038              	.L45:
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 1039              		.loc 1 770 0
 1040 00c2 FB68     		ldr	r3, [r7, #12]
 1041 00c4 1B68     		ldr	r3, [r3]
 1042 00c6 5B68     		ldr	r3, [r3, #4]
 1043 00c8 9BB2     		uxth	r3, r3
 1044 00ca DBB2     		uxtb	r3, r3
 1045 00cc 9AB2     		uxth	r2, r3
 1046 00ce 3B69     		ldr	r3, [r7, #16]
 1047 00d0 1A80     		strh	r2, [r3]	@ movhi
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData +=1U;
 1048              		.loc 1 771 0
 1049 00d2 BB68     		ldr	r3, [r7, #8]
 1050 00d4 0133     		adds	r3, r3, #1
 1051 00d6 BB60     		str	r3, [r7, #8]
 1052 00d8 24E0     		b	.L42
 1053              	.L43:
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       } 
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1054              		.loc 1 777 0
 1055 00da 3B68     		ldr	r3, [r7]
 1056 00dc 0093     		str	r3, [sp]
 1057 00de 7B69     		ldr	r3, [r7, #20]
 1058 00e0 0022     		movs	r2, #0
 1059 00e2 2021     		movs	r1, #32
 1060 00e4 F868     		ldr	r0, [r7, #12]
 1061 00e6 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1062 00ea 0346     		mov	r3, r0
 1063 00ec 002B     		cmp	r3, #0
ARM GAS  /tmp/ccNHJhAL.s 			page 33


 1064 00ee 01D0     		beq	.L47
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 1065              		.loc 1 779 0
 1066 00f0 0323     		movs	r3, #3
 1067 00f2 27E0     		b	.L40
 1068              	.L47:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1069              		.loc 1 781 0
 1070 00f4 FB68     		ldr	r3, [r7, #12]
 1071 00f6 1B69     		ldr	r3, [r3, #16]
 1072 00f8 002B     		cmp	r3, #0
 1073 00fa 08D1     		bne	.L48
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1074              		.loc 1 783 0
 1075 00fc FB68     		ldr	r3, [r7, #12]
 1076 00fe 1B68     		ldr	r3, [r3]
 1077 0100 5968     		ldr	r1, [r3, #4]
 1078 0102 BB68     		ldr	r3, [r7, #8]
 1079 0104 5A1C     		adds	r2, r3, #1
 1080 0106 BA60     		str	r2, [r7, #8]
 1081 0108 CAB2     		uxtb	r2, r1
 1082 010a 1A70     		strb	r2, [r3]
 1083 010c 0AE0     		b	.L42
 1084              	.L48:
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1085              		.loc 1 787 0
 1086 010e FB68     		ldr	r3, [r7, #12]
 1087 0110 1B68     		ldr	r3, [r3]
 1088 0112 5B68     		ldr	r3, [r3, #4]
 1089 0114 DAB2     		uxtb	r2, r3
 1090 0116 BB68     		ldr	r3, [r7, #8]
 1091 0118 591C     		adds	r1, r3, #1
 1092 011a B960     		str	r1, [r7, #8]
 1093 011c 02F07F02 		and	r2, r2, #127
 1094 0120 D2B2     		uxtb	r2, r2
 1095 0122 1A70     		strb	r2, [r3]
 1096              	.L42:
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1097              		.loc 1 753 0
 1098 0124 FB68     		ldr	r3, [r7, #12]
 1099 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1100 0128 9BB2     		uxth	r3, r3
 1101 012a 002B     		cmp	r3, #0
 1102 012c 9DD1     		bne	.L49
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccNHJhAL.s 			page 34


 1103              		.loc 1 794 0
 1104 012e FB68     		ldr	r3, [r7, #12]
 1105 0130 2022     		movs	r2, #32
 1106 0132 83F83A20 		strb	r2, [r3, #58]
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1107              		.loc 1 797 0
 1108 0136 FB68     		ldr	r3, [r7, #12]
 1109 0138 0022     		movs	r2, #0
 1110 013a 83F83820 		strb	r2, [r3, #56]
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1111              		.loc 1 799 0
 1112 013e 0023     		movs	r3, #0
 1113 0140 00E0     		b	.L40
 1114              	.L37:
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1115              		.loc 1 803 0
 1116 0142 0223     		movs	r3, #2
 1117              	.L40:
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1118              		.loc 1 805 0
 1119 0144 1846     		mov	r0, r3
 1120 0146 1837     		adds	r7, r7, #24
 1121              	.LCFI45:
 1122              		.cfi_def_cfa_offset 8
 1123 0148 BD46     		mov	sp, r7
 1124              	.LCFI46:
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 014a 80BD     		pop	{r7, pc}
 1128              		.cfi_endproc
 1129              	.LFE74:
 1131              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1132              		.align	1
 1133              		.global	HAL_UART_Transmit_IT
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu softvfp
 1139              	HAL_UART_Transmit_IT:
 1140              	.LFB75:
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
ARM GAS  /tmp/ccNHJhAL.s 			page 35


 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1141              		.loc 1 816 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 16
 1144              		@ frame_needed = 1, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 1146 0000 80B4     		push	{r7}
 1147              	.LCFI47:
 1148              		.cfi_def_cfa_offset 4
 1149              		.cfi_offset 7, -4
 1150 0002 85B0     		sub	sp, sp, #20
 1151              	.LCFI48:
 1152              		.cfi_def_cfa_offset 24
 1153 0004 00AF     		add	r7, sp, #0
 1154              	.LCFI49:
 1155              		.cfi_def_cfa_register 7
 1156 0006 F860     		str	r0, [r7, #12]
 1157 0008 B960     		str	r1, [r7, #8]
 1158 000a 1346     		mov	r3, r2
 1159 000c FB80     		strh	r3, [r7, #6]	@ movhi
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1160              		.loc 1 818 0
 1161 000e FB68     		ldr	r3, [r7, #12]
 1162 0010 93F83930 		ldrb	r3, [r3, #57]
 1163 0014 DBB2     		uxtb	r3, r3
 1164 0016 202B     		cmp	r3, #32
 1165 0018 30D1     		bne	.L51
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U)) 
 1166              		.loc 1 820 0
 1167 001a BB68     		ldr	r3, [r7, #8]
 1168 001c 002B     		cmp	r3, #0
 1169 001e 02D0     		beq	.L52
 1170              		.loc 1 820 0 is_stmt 0 discriminator 1
 1171 0020 FB88     		ldrh	r3, [r7, #6]
 1172 0022 002B     		cmp	r3, #0
 1173 0024 01D1     		bne	.L53
 1174              	.L52:
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1175              		.loc 1 822 0 is_stmt 1
 1176 0026 0123     		movs	r3, #1
 1177 0028 29E0     		b	.L54
 1178              	.L53:
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1179              		.loc 1 825 0
 1180 002a FB68     		ldr	r3, [r7, #12]
 1181 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1182 0030 012B     		cmp	r3, #1
 1183 0032 01D1     		bne	.L55
 1184              		.loc 1 825 0 is_stmt 0 discriminator 1
 1185 0034 0223     		movs	r3, #2
 1186 0036 22E0     		b	.L54
 1187              	.L55:
ARM GAS  /tmp/ccNHJhAL.s 			page 36


 1188              		.loc 1 825 0 discriminator 2
 1189 0038 FB68     		ldr	r3, [r7, #12]
 1190 003a 0122     		movs	r2, #1
 1191 003c 83F83820 		strb	r2, [r3, #56]
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1192              		.loc 1 827 0 is_stmt 1 discriminator 2
 1193 0040 FB68     		ldr	r3, [r7, #12]
 1194 0042 BA68     		ldr	r2, [r7, #8]
 1195 0044 1A62     		str	r2, [r3, #32]
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1196              		.loc 1 828 0 discriminator 2
 1197 0046 FB68     		ldr	r3, [r7, #12]
 1198 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1199 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1200              		.loc 1 829 0 discriminator 2
 1201 004c FB68     		ldr	r3, [r7, #12]
 1202 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1203 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1204              		.loc 1 831 0 discriminator 2
 1205 0052 FB68     		ldr	r3, [r7, #12]
 1206 0054 0022     		movs	r2, #0
 1207 0056 DA63     		str	r2, [r3, #60]
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1208              		.loc 1 832 0 discriminator 2
 1209 0058 FB68     		ldr	r3, [r7, #12]
 1210 005a 2122     		movs	r2, #33
 1211 005c 83F83920 		strb	r2, [r3, #57]
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1212              		.loc 1 835 0 discriminator 2
 1213 0060 FB68     		ldr	r3, [r7, #12]
 1214 0062 0022     		movs	r2, #0
 1215 0064 83F83820 		strb	r2, [r3, #56]
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1216              		.loc 1 838 0 discriminator 2
 1217 0068 FB68     		ldr	r3, [r7, #12]
 1218 006a 1B68     		ldr	r3, [r3]
 1219 006c DA68     		ldr	r2, [r3, #12]
 1220 006e FB68     		ldr	r3, [r7, #12]
 1221 0070 1B68     		ldr	r3, [r3]
 1222 0072 42F08002 		orr	r2, r2, #128
 1223 0076 DA60     		str	r2, [r3, #12]
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1224              		.loc 1 840 0 discriminator 2
 1225 0078 0023     		movs	r3, #0
 1226 007a 00E0     		b	.L54
 1227              	.L51:
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
ARM GAS  /tmp/ccNHJhAL.s 			page 37


 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1228              		.loc 1 844 0
 1229 007c 0223     		movs	r3, #2
 1230              	.L54:
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1231              		.loc 1 846 0
 1232 007e 1846     		mov	r0, r3
 1233 0080 1437     		adds	r7, r7, #20
 1234              	.LCFI50:
 1235              		.cfi_def_cfa_offset 4
 1236 0082 BD46     		mov	sp, r7
 1237              	.LCFI51:
 1238              		.cfi_def_cfa_register 13
 1239              		@ sp needed
 1240 0084 80BC     		pop	{r7}
 1241              	.LCFI52:
 1242              		.cfi_restore 7
 1243              		.cfi_def_cfa_offset 0
 1244 0086 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE75:
 1248              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1249              		.align	1
 1250              		.global	HAL_UART_Receive_IT
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu softvfp
 1256              	HAL_UART_Receive_IT:
 1257              	.LFB76:
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode. 
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1258              		.loc 1 857 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 16
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 1263 0000 80B4     		push	{r7}
 1264              	.LCFI53:
 1265              		.cfi_def_cfa_offset 4
 1266              		.cfi_offset 7, -4
 1267 0002 85B0     		sub	sp, sp, #20
 1268              	.LCFI54:
 1269              		.cfi_def_cfa_offset 24
 1270 0004 00AF     		add	r7, sp, #0
 1271              	.LCFI55:
ARM GAS  /tmp/ccNHJhAL.s 			page 38


 1272              		.cfi_def_cfa_register 7
 1273 0006 F860     		str	r0, [r7, #12]
 1274 0008 B960     		str	r1, [r7, #8]
 1275 000a 1346     		mov	r3, r2
 1276 000c FB80     		strh	r3, [r7, #6]	@ movhi
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1277              		.loc 1 859 0
 1278 000e FB68     		ldr	r3, [r7, #12]
 1279 0010 93F83A30 		ldrb	r3, [r3, #58]
 1280 0014 DBB2     		uxtb	r3, r3
 1281 0016 202B     		cmp	r3, #32
 1282 0018 40D1     		bne	.L57
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U))
 1283              		.loc 1 861 0
 1284 001a BB68     		ldr	r3, [r7, #8]
 1285 001c 002B     		cmp	r3, #0
 1286 001e 02D0     		beq	.L58
 1287              		.loc 1 861 0 is_stmt 0 discriminator 1
 1288 0020 FB88     		ldrh	r3, [r7, #6]
 1289 0022 002B     		cmp	r3, #0
 1290 0024 01D1     		bne	.L59
 1291              	.L58:
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1292              		.loc 1 863 0 is_stmt 1
 1293 0026 0123     		movs	r3, #1
 1294 0028 39E0     		b	.L60
 1295              	.L59:
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1296              		.loc 1 867 0
 1297 002a FB68     		ldr	r3, [r7, #12]
 1298 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1299 0030 012B     		cmp	r3, #1
 1300 0032 01D1     		bne	.L61
 1301              		.loc 1 867 0 is_stmt 0 discriminator 1
 1302 0034 0223     		movs	r3, #2
 1303 0036 32E0     		b	.L60
 1304              	.L61:
 1305              		.loc 1 867 0 discriminator 2
 1306 0038 FB68     		ldr	r3, [r7, #12]
 1307 003a 0122     		movs	r2, #1
 1308 003c 83F83820 		strb	r2, [r3, #56]
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1309              		.loc 1 869 0 is_stmt 1 discriminator 2
 1310 0040 FB68     		ldr	r3, [r7, #12]
 1311 0042 BA68     		ldr	r2, [r7, #8]
 1312 0044 9A62     		str	r2, [r3, #40]
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1313              		.loc 1 870 0 discriminator 2
 1314 0046 FB68     		ldr	r3, [r7, #12]
 1315 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/ccNHJhAL.s 			page 39


 1316 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1317              		.loc 1 871 0 discriminator 2
 1318 004c FB68     		ldr	r3, [r7, #12]
 1319 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1320 0050 DA85     		strh	r2, [r3, #46]	@ movhi
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1321              		.loc 1 873 0 discriminator 2
 1322 0052 FB68     		ldr	r3, [r7, #12]
 1323 0054 0022     		movs	r2, #0
 1324 0056 DA63     		str	r2, [r3, #60]
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1325              		.loc 1 874 0 discriminator 2
 1326 0058 FB68     		ldr	r3, [r7, #12]
 1327 005a 2222     		movs	r2, #34
 1328 005c 83F83A20 		strb	r2, [r3, #58]
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1329              		.loc 1 877 0 discriminator 2
 1330 0060 FB68     		ldr	r3, [r7, #12]
 1331 0062 0022     		movs	r2, #0
 1332 0064 83F83820 		strb	r2, [r3, #56]
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 1333              		.loc 1 880 0 discriminator 2
 1334 0068 FB68     		ldr	r3, [r7, #12]
 1335 006a 1B68     		ldr	r3, [r3]
 1336 006c DA68     		ldr	r2, [r3, #12]
 1337 006e FB68     		ldr	r3, [r7, #12]
 1338 0070 1B68     		ldr	r3, [r3]
 1339 0072 42F48072 		orr	r2, r2, #256
 1340 0076 DA60     		str	r2, [r3, #12]
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 1341              		.loc 1 883 0 discriminator 2
 1342 0078 FB68     		ldr	r3, [r7, #12]
 1343 007a 1B68     		ldr	r3, [r3]
 1344 007c 5A69     		ldr	r2, [r3, #20]
 1345 007e FB68     		ldr	r3, [r7, #12]
 1346 0080 1B68     		ldr	r3, [r3]
 1347 0082 42F00102 		orr	r2, r2, #1
 1348 0086 5A61     		str	r2, [r3, #20]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 1349              		.loc 1 886 0 discriminator 2
 1350 0088 FB68     		ldr	r3, [r7, #12]
 1351 008a 1B68     		ldr	r3, [r3]
 1352 008c DA68     		ldr	r2, [r3, #12]
 1353 008e FB68     		ldr	r3, [r7, #12]
 1354 0090 1B68     		ldr	r3, [r3]
 1355 0092 42F02002 		orr	r2, r2, #32
 1356 0096 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccNHJhAL.s 			page 40


 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1357              		.loc 1 888 0 discriminator 2
 1358 0098 0023     		movs	r3, #0
 1359 009a 00E0     		b	.L60
 1360              	.L57:
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1361              		.loc 1 892 0
 1362 009c 0223     		movs	r3, #2
 1363              	.L60:
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1364              		.loc 1 894 0
 1365 009e 1846     		mov	r0, r3
 1366 00a0 1437     		adds	r7, r7, #20
 1367              	.LCFI56:
 1368              		.cfi_def_cfa_offset 4
 1369 00a2 BD46     		mov	sp, r7
 1370              	.LCFI57:
 1371              		.cfi_def_cfa_register 13
 1372              		@ sp needed
 1373 00a4 80BC     		pop	{r7}
 1374              	.LCFI58:
 1375              		.cfi_restore 7
 1376              		.cfi_def_cfa_offset 0
 1377 00a6 7047     		bx	lr
 1378              		.cfi_endproc
 1379              	.LFE76:
 1381              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1382              		.align	1
 1383              		.global	HAL_UART_Transmit_DMA
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1387              		.fpu softvfp
 1389              	HAL_UART_Transmit_DMA:
 1390              	.LFB77:
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode. 
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1391              		.loc 1 905 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 24
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395 0000 80B5     		push	{r7, lr}
 1396              	.LCFI59:
ARM GAS  /tmp/ccNHJhAL.s 			page 41


 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 0002 86B0     		sub	sp, sp, #24
 1401              	.LCFI60:
 1402              		.cfi_def_cfa_offset 32
 1403 0004 00AF     		add	r7, sp, #0
 1404              	.LCFI61:
 1405              		.cfi_def_cfa_register 7
 1406 0006 F860     		str	r0, [r7, #12]
 1407 0008 B960     		str	r1, [r7, #8]
 1408 000a 1346     		mov	r3, r2
 1409 000c FB80     		strh	r3, [r7, #6]	@ movhi
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1410              		.loc 1 909 0
 1411 000e FB68     		ldr	r3, [r7, #12]
 1412 0010 93F83930 		ldrb	r3, [r3, #57]
 1413 0014 DBB2     		uxtb	r3, r3
 1414 0016 202B     		cmp	r3, #32
 1415 0018 53D1     		bne	.L63
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U))
 1416              		.loc 1 911 0
 1417 001a BB68     		ldr	r3, [r7, #8]
 1418 001c 002B     		cmp	r3, #0
 1419 001e 02D0     		beq	.L64
 1420              		.loc 1 911 0 is_stmt 0 discriminator 1
 1421 0020 FB88     		ldrh	r3, [r7, #6]
 1422 0022 002B     		cmp	r3, #0
 1423 0024 01D1     		bne	.L65
 1424              	.L64:
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1425              		.loc 1 913 0 is_stmt 1
 1426 0026 0123     		movs	r3, #1
 1427 0028 4CE0     		b	.L66
 1428              	.L65:
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1429              		.loc 1 917 0
 1430 002a FB68     		ldr	r3, [r7, #12]
 1431 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1432 0030 012B     		cmp	r3, #1
 1433 0032 01D1     		bne	.L67
 1434              		.loc 1 917 0 is_stmt 0 discriminator 1
 1435 0034 0223     		movs	r3, #2
 1436 0036 45E0     		b	.L66
 1437              	.L67:
 1438              		.loc 1 917 0 discriminator 2
 1439 0038 FB68     		ldr	r3, [r7, #12]
 1440 003a 0122     		movs	r2, #1
 1441 003c 83F83820 		strb	r2, [r3, #56]
ARM GAS  /tmp/ccNHJhAL.s 			page 42


 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1442              		.loc 1 919 0 is_stmt 1 discriminator 2
 1443 0040 BA68     		ldr	r2, [r7, #8]
 1444 0042 FB68     		ldr	r3, [r7, #12]
 1445 0044 1A62     		str	r2, [r3, #32]
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1446              		.loc 1 920 0 discriminator 2
 1447 0046 FB68     		ldr	r3, [r7, #12]
 1448 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1449 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1450              		.loc 1 921 0 discriminator 2
 1451 004c FB68     		ldr	r3, [r7, #12]
 1452 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1453 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1454              		.loc 1 923 0 discriminator 2
 1455 0052 FB68     		ldr	r3, [r7, #12]
 1456 0054 0022     		movs	r2, #0
 1457 0056 DA63     		str	r2, [r3, #60]
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1458              		.loc 1 924 0 discriminator 2
 1459 0058 FB68     		ldr	r3, [r7, #12]
 1460 005a 2122     		movs	r2, #33
 1461 005c 83F83920 		strb	r2, [r3, #57]
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1462              		.loc 1 927 0 discriminator 2
 1463 0060 FB68     		ldr	r3, [r7, #12]
 1464 0062 1B6B     		ldr	r3, [r3, #48]
 1465 0064 194A     		ldr	r2, .L68
 1466 0066 9A62     		str	r2, [r3, #40]
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1467              		.loc 1 930 0 discriminator 2
 1468 0068 FB68     		ldr	r3, [r7, #12]
 1469 006a 1B6B     		ldr	r3, [r3, #48]
 1470 006c 184A     		ldr	r2, .L68+4
 1471 006e DA62     		str	r2, [r3, #44]
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1472              		.loc 1 933 0 discriminator 2
 1473 0070 FB68     		ldr	r3, [r7, #12]
 1474 0072 1B6B     		ldr	r3, [r3, #48]
 1475 0074 174A     		ldr	r2, .L68+8
 1476 0076 1A63     		str	r2, [r3, #48]
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1477              		.loc 1 936 0 discriminator 2
 1478 0078 FB68     		ldr	r3, [r7, #12]
 1479 007a 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccNHJhAL.s 			page 43


 1480 007c 0022     		movs	r2, #0
 1481 007e 5A63     		str	r2, [r3, #52]
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1482              		.loc 1 939 0 discriminator 2
 1483 0080 07F10803 		add	r3, r7, #8
 1484 0084 7B61     		str	r3, [r7, #20]
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 1485              		.loc 1 940 0 discriminator 2
 1486 0086 FB68     		ldr	r3, [r7, #12]
 1487 0088 186B     		ldr	r0, [r3, #48]
 1488 008a 7B69     		ldr	r3, [r7, #20]
 1489 008c 1968     		ldr	r1, [r3]
 1490 008e FB68     		ldr	r3, [r7, #12]
 1491 0090 1B68     		ldr	r3, [r3]
 1492 0092 0433     		adds	r3, r3, #4
 1493 0094 1A46     		mov	r2, r3
 1494 0096 FB88     		ldrh	r3, [r7, #6]
 1495 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1496              		.loc 1 943 0 discriminator 2
 1497 009c FB68     		ldr	r3, [r7, #12]
 1498 009e 1B68     		ldr	r3, [r3]
 1499 00a0 6FF04002 		mvn	r2, #64
 1500 00a4 1A60     		str	r2, [r3]
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1501              		.loc 1 946 0 discriminator 2
 1502 00a6 FB68     		ldr	r3, [r7, #12]
 1503 00a8 0022     		movs	r2, #0
 1504 00aa 83F83820 		strb	r2, [r3, #56]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1505              		.loc 1 950 0 discriminator 2
 1506 00ae FB68     		ldr	r3, [r7, #12]
 1507 00b0 1B68     		ldr	r3, [r3]
 1508 00b2 5A69     		ldr	r2, [r3, #20]
 1509 00b4 FB68     		ldr	r3, [r7, #12]
 1510 00b6 1B68     		ldr	r3, [r3]
 1511 00b8 42F08002 		orr	r2, r2, #128
 1512 00bc 5A61     		str	r2, [r3, #20]
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1513              		.loc 1 952 0 discriminator 2
 1514 00be 0023     		movs	r3, #0
 1515 00c0 00E0     		b	.L66
 1516              	.L63:
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
ARM GAS  /tmp/ccNHJhAL.s 			page 44


 1517              		.loc 1 956 0
 1518 00c2 0223     		movs	r3, #2
 1519              	.L66:
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1520              		.loc 1 958 0
 1521 00c4 1846     		mov	r0, r3
 1522 00c6 1837     		adds	r7, r7, #24
 1523              	.LCFI62:
 1524              		.cfi_def_cfa_offset 8
 1525 00c8 BD46     		mov	sp, r7
 1526              	.LCFI63:
 1527              		.cfi_def_cfa_register 13
 1528              		@ sp needed
 1529 00ca 80BD     		pop	{r7, pc}
 1530              	.L69:
 1531              		.align	2
 1532              	.L68:
 1533 00cc 00000000 		.word	UART_DMATransmitCplt
 1534 00d0 00000000 		.word	UART_DMATxHalfCplt
 1535 00d4 00000000 		.word	UART_DMAError
 1536              		.cfi_endproc
 1537              	.LFE77:
 1539              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1540              		.align	1
 1541              		.global	HAL_UART_Receive_DMA
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1545              		.fpu softvfp
 1547              	HAL_UART_Receive_DMA:
 1548              	.LFB78:
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode. 
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1549              		.loc 1 970 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 24
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553 0000 80B5     		push	{r7, lr}
 1554              	.LCFI64:
 1555              		.cfi_def_cfa_offset 8
 1556              		.cfi_offset 7, -8
 1557              		.cfi_offset 14, -4
 1558 0002 86B0     		sub	sp, sp, #24
 1559              	.LCFI65:
 1560              		.cfi_def_cfa_offset 32
 1561 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNHJhAL.s 			page 45


 1562              	.LCFI66:
 1563              		.cfi_def_cfa_register 7
 1564 0006 F860     		str	r0, [r7, #12]
 1565 0008 B960     		str	r1, [r7, #8]
 1566 000a 1346     		mov	r3, r2
 1567 000c FB80     		strh	r3, [r7, #6]	@ movhi
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY) 
 1568              		.loc 1 974 0
 1569 000e FB68     		ldr	r3, [r7, #12]
 1570 0010 93F83A30 		ldrb	r3, [r3, #58]
 1571 0014 DBB2     		uxtb	r3, r3
 1572 0016 202B     		cmp	r3, #32
 1573 0018 66D1     		bne	.L71
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if((pData == NULL) || (Size == 0U))
 1574              		.loc 1 976 0
 1575 001a BB68     		ldr	r3, [r7, #8]
 1576 001c 002B     		cmp	r3, #0
 1577 001e 02D0     		beq	.L72
 1578              		.loc 1 976 0 is_stmt 0 discriminator 1
 1579 0020 FB88     		ldrh	r3, [r7, #6]
 1580 0022 002B     		cmp	r3, #0
 1581 0024 01D1     		bne	.L73
 1582              	.L72:
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1583              		.loc 1 978 0 is_stmt 1
 1584 0026 0123     		movs	r3, #1
 1585 0028 5FE0     		b	.L74
 1586              	.L73:
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1587              		.loc 1 982 0
 1588 002a FB68     		ldr	r3, [r7, #12]
 1589 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1590 0030 012B     		cmp	r3, #1
 1591 0032 01D1     		bne	.L75
 1592              		.loc 1 982 0 is_stmt 0 discriminator 1
 1593 0034 0223     		movs	r3, #2
 1594 0036 58E0     		b	.L74
 1595              	.L75:
 1596              		.loc 1 982 0 discriminator 2
 1597 0038 FB68     		ldr	r3, [r7, #12]
 1598 003a 0122     		movs	r2, #1
 1599 003c 83F83820 		strb	r2, [r3, #56]
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1600              		.loc 1 984 0 is_stmt 1 discriminator 2
 1601 0040 BA68     		ldr	r2, [r7, #8]
 1602 0042 FB68     		ldr	r3, [r7, #12]
 1603 0044 9A62     		str	r2, [r3, #40]
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
ARM GAS  /tmp/ccNHJhAL.s 			page 46


 1604              		.loc 1 985 0 discriminator 2
 1605 0046 FB68     		ldr	r3, [r7, #12]
 1606 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1607 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1608              		.loc 1 987 0 discriminator 2
 1609 004c FB68     		ldr	r3, [r7, #12]
 1610 004e 0022     		movs	r2, #0
 1611 0050 DA63     		str	r2, [r3, #60]
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1612              		.loc 1 988 0 discriminator 2
 1613 0052 FB68     		ldr	r3, [r7, #12]
 1614 0054 2222     		movs	r2, #34
 1615 0056 83F83A20 		strb	r2, [r3, #58]
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1616              		.loc 1 991 0 discriminator 2
 1617 005a FB68     		ldr	r3, [r7, #12]
 1618 005c 5B6B     		ldr	r3, [r3, #52]
 1619 005e 254A     		ldr	r2, .L76
 1620 0060 9A62     		str	r2, [r3, #40]
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1621              		.loc 1 994 0 discriminator 2
 1622 0062 FB68     		ldr	r3, [r7, #12]
 1623 0064 5B6B     		ldr	r3, [r3, #52]
 1624 0066 244A     		ldr	r2, .L76+4
 1625 0068 DA62     		str	r2, [r3, #44]
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 1626              		.loc 1 997 0 discriminator 2
 1627 006a FB68     		ldr	r3, [r7, #12]
 1628 006c 5B6B     		ldr	r3, [r3, #52]
 1629 006e 234A     		ldr	r2, .L76+8
 1630 0070 1A63     		str	r2, [r3, #48]
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
 1631              		.loc 1 1000 0 discriminator 2
 1632 0072 FB68     		ldr	r3, [r7, #12]
 1633 0074 5B6B     		ldr	r3, [r3, #52]
 1634 0076 0022     		movs	r2, #0
 1635 0078 5A63     		str	r2, [r3, #52]
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA channel */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1636              		.loc 1 1003 0 discriminator 2
 1637 007a 07F10803 		add	r3, r7, #8
 1638 007e 7B61     		str	r3, [r7, #20]
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 1639              		.loc 1 1004 0 discriminator 2
 1640 0080 FB68     		ldr	r3, [r7, #12]
 1641 0082 586B     		ldr	r0, [r3, #52]
ARM GAS  /tmp/ccNHJhAL.s 			page 47


 1642 0084 FB68     		ldr	r3, [r7, #12]
 1643 0086 1B68     		ldr	r3, [r3]
 1644 0088 0433     		adds	r3, r3, #4
 1645 008a 1946     		mov	r1, r3
 1646 008c 7B69     		ldr	r3, [r7, #20]
 1647 008e 1A68     		ldr	r2, [r3]
 1648 0090 FB88     		ldrh	r3, [r7, #6]
 1649 0092 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1650              	.LBB2:
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1651              		.loc 1 1007 0 discriminator 2
 1652 0096 0023     		movs	r3, #0
 1653 0098 3B61     		str	r3, [r7, #16]
 1654 009a FB68     		ldr	r3, [r7, #12]
 1655 009c 1B68     		ldr	r3, [r3]
 1656 009e 1B68     		ldr	r3, [r3]
 1657 00a0 3B61     		str	r3, [r7, #16]
 1658 00a2 FB68     		ldr	r3, [r7, #12]
 1659 00a4 1B68     		ldr	r3, [r3]
 1660 00a6 5B68     		ldr	r3, [r3, #4]
 1661 00a8 3B61     		str	r3, [r7, #16]
 1662 00aa 3B69     		ldr	r3, [r7, #16]
 1663              	.LBE2:
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1664              		.loc 1 1010 0 discriminator 2
 1665 00ac FB68     		ldr	r3, [r7, #12]
 1666 00ae 0022     		movs	r2, #0
 1667 00b0 83F83820 		strb	r2, [r3, #56]
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1668              		.loc 1 1013 0 discriminator 2
 1669 00b4 FB68     		ldr	r3, [r7, #12]
 1670 00b6 1B68     		ldr	r3, [r3]
 1671 00b8 DA68     		ldr	r2, [r3, #12]
 1672 00ba FB68     		ldr	r3, [r7, #12]
 1673 00bc 1B68     		ldr	r3, [r3]
 1674 00be 42F48072 		orr	r2, r2, #256
 1675 00c2 DA60     		str	r2, [r3, #12]
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1676              		.loc 1 1016 0 discriminator 2
 1677 00c4 FB68     		ldr	r3, [r7, #12]
 1678 00c6 1B68     		ldr	r3, [r3]
 1679 00c8 5A69     		ldr	r2, [r3, #20]
 1680 00ca FB68     		ldr	r3, [r7, #12]
 1681 00cc 1B68     		ldr	r3, [r3]
 1682 00ce 42F00102 		orr	r2, r2, #1
 1683 00d2 5A61     		str	r2, [r3, #20]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in the UART CR3 register */
ARM GAS  /tmp/ccNHJhAL.s 			page 48


1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1684              		.loc 1 1020 0 discriminator 2
 1685 00d4 FB68     		ldr	r3, [r7, #12]
 1686 00d6 1B68     		ldr	r3, [r3]
 1687 00d8 5A69     		ldr	r2, [r3, #20]
 1688 00da FB68     		ldr	r3, [r7, #12]
 1689 00dc 1B68     		ldr	r3, [r3]
 1690 00de 42F04002 		orr	r2, r2, #64
 1691 00e2 5A61     		str	r2, [r3, #20]
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1692              		.loc 1 1022 0 discriminator 2
 1693 00e4 0023     		movs	r3, #0
 1694 00e6 00E0     		b	.L74
 1695              	.L71:
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1696              		.loc 1 1026 0
 1697 00e8 0223     		movs	r3, #2
 1698              	.L74:
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1699              		.loc 1 1028 0
 1700 00ea 1846     		mov	r0, r3
 1701 00ec 1837     		adds	r7, r7, #24
 1702              	.LCFI67:
 1703              		.cfi_def_cfa_offset 8
 1704 00ee BD46     		mov	sp, r7
 1705              	.LCFI68:
 1706              		.cfi_def_cfa_register 13
 1707              		@ sp needed
 1708 00f0 80BD     		pop	{r7, pc}
 1709              	.L77:
 1710 00f2 00BF     		.align	2
 1711              	.L76:
 1712 00f4 00000000 		.word	UART_DMAReceiveCplt
 1713 00f8 00000000 		.word	UART_DMARxHalfCplt
 1714 00fc 00000000 		.word	UART_DMAError
 1715              		.cfi_endproc
 1716              	.LFE78:
 1718              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1719              		.align	1
 1720              		.global	HAL_UART_DMAPause
 1721              		.syntax unified
 1722              		.thumb
 1723              		.thumb_func
 1724              		.fpu softvfp
 1726              	HAL_UART_DMAPause:
 1727              	.LFB79:
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccNHJhAL.s 			page 49


1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1728              		.loc 1 1037 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 16
 1731              		@ frame_needed = 1, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 1733 0000 80B4     		push	{r7}
 1734              	.LCFI69:
 1735              		.cfi_def_cfa_offset 4
 1736              		.cfi_offset 7, -4
 1737 0002 85B0     		sub	sp, sp, #20
 1738              	.LCFI70:
 1739              		.cfi_def_cfa_offset 24
 1740 0004 00AF     		add	r7, sp, #0
 1741              	.LCFI71:
 1742              		.cfi_def_cfa_register 7
 1743 0006 7860     		str	r0, [r7, #4]
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1744              		.loc 1 1038 0
 1745 0008 0023     		movs	r3, #0
 1746 000a FB60     		str	r3, [r7, #12]
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1747              		.loc 1 1041 0
 1748 000c 7B68     		ldr	r3, [r7, #4]
 1749 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1750 0012 012B     		cmp	r3, #1
 1751 0014 01D1     		bne	.L79
 1752              		.loc 1 1041 0 is_stmt 0 discriminator 1
 1753 0016 0223     		movs	r3, #2
 1754 0018 50E0     		b	.L80
 1755              	.L79:
 1756              		.loc 1 1041 0 discriminator 2
 1757 001a 7B68     		ldr	r3, [r7, #4]
 1758 001c 0122     		movs	r2, #1
 1759 001e 83F83820 		strb	r2, [r3, #56]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1760              		.loc 1 1043 0 is_stmt 1 discriminator 2
 1761 0022 7B68     		ldr	r3, [r7, #4]
 1762 0024 1B68     		ldr	r3, [r3]
 1763 0026 5B69     		ldr	r3, [r3, #20]
 1764 0028 03F08003 		and	r3, r3, #128
 1765 002c 002B     		cmp	r3, #0
 1766 002e 14BF     		ite	ne
 1767 0030 0123     		movne	r3, #1
 1768 0032 0023     		moveq	r3, #0
 1769 0034 DBB2     		uxtb	r3, r3
 1770 0036 FB60     		str	r3, [r7, #12]
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1771              		.loc 1 1044 0 discriminator 2
 1772 0038 7B68     		ldr	r3, [r7, #4]
 1773 003a 93F83930 		ldrb	r3, [r3, #57]
 1774 003e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccNHJhAL.s 			page 50


 1775 0040 212B     		cmp	r3, #33
 1776 0042 0AD1     		bne	.L81
 1777              		.loc 1 1044 0 is_stmt 0 discriminator 1
 1778 0044 FB68     		ldr	r3, [r7, #12]
 1779 0046 002B     		cmp	r3, #0
 1780 0048 07D0     		beq	.L81
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1781              		.loc 1 1047 0 is_stmt 1
 1782 004a 7B68     		ldr	r3, [r7, #4]
 1783 004c 1B68     		ldr	r3, [r3]
 1784 004e 5A69     		ldr	r2, [r3, #20]
 1785 0050 7B68     		ldr	r3, [r7, #4]
 1786 0052 1B68     		ldr	r3, [r3]
 1787 0054 22F08002 		bic	r2, r2, #128
 1788 0058 5A61     		str	r2, [r3, #20]
 1789              	.L81:
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1790              		.loc 1 1050 0
 1791 005a 7B68     		ldr	r3, [r7, #4]
 1792 005c 1B68     		ldr	r3, [r3]
 1793 005e 5B69     		ldr	r3, [r3, #20]
 1794 0060 03F04003 		and	r3, r3, #64
 1795 0064 002B     		cmp	r3, #0
 1796 0066 14BF     		ite	ne
 1797 0068 0123     		movne	r3, #1
 1798 006a 0023     		moveq	r3, #0
 1799 006c DBB2     		uxtb	r3, r3
 1800 006e FB60     		str	r3, [r7, #12]
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1801              		.loc 1 1051 0
 1802 0070 7B68     		ldr	r3, [r7, #4]
 1803 0072 93F83A30 		ldrb	r3, [r3, #58]
 1804 0076 DBB2     		uxtb	r3, r3
 1805 0078 222B     		cmp	r3, #34
 1806 007a 1AD1     		bne	.L82
 1807              		.loc 1 1051 0 is_stmt 0 discriminator 1
 1808 007c FB68     		ldr	r3, [r7, #12]
 1809 007e 002B     		cmp	r3, #0
 1810 0080 17D0     		beq	.L82
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1811              		.loc 1 1054 0 is_stmt 1
 1812 0082 7B68     		ldr	r3, [r7, #4]
 1813 0084 1B68     		ldr	r3, [r3]
 1814 0086 DA68     		ldr	r2, [r3, #12]
 1815 0088 7B68     		ldr	r3, [r7, #4]
 1816 008a 1B68     		ldr	r3, [r3]
 1817 008c 22F48072 		bic	r2, r2, #256
 1818 0090 DA60     		str	r2, [r3, #12]
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1819              		.loc 1 1055 0
 1820 0092 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 51


 1821 0094 1B68     		ldr	r3, [r3]
 1822 0096 5A69     		ldr	r2, [r3, #20]
 1823 0098 7B68     		ldr	r3, [r7, #4]
 1824 009a 1B68     		ldr	r3, [r3]
 1825 009c 22F00102 		bic	r2, r2, #1
 1826 00a0 5A61     		str	r2, [r3, #20]
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1827              		.loc 1 1058 0
 1828 00a2 7B68     		ldr	r3, [r7, #4]
 1829 00a4 1B68     		ldr	r3, [r3]
 1830 00a6 5A69     		ldr	r2, [r3, #20]
 1831 00a8 7B68     		ldr	r3, [r7, #4]
 1832 00aa 1B68     		ldr	r3, [r3]
 1833 00ac 22F04002 		bic	r2, r2, #64
 1834 00b0 5A61     		str	r2, [r3, #20]
 1835              	.L82:
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1836              		.loc 1 1062 0
 1837 00b2 7B68     		ldr	r3, [r7, #4]
 1838 00b4 0022     		movs	r2, #0
 1839 00b6 83F83820 		strb	r2, [r3, #56]
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1840              		.loc 1 1064 0
 1841 00ba 0023     		movs	r3, #0
 1842              	.L80:
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1843              		.loc 1 1065 0
 1844 00bc 1846     		mov	r0, r3
 1845 00be 1437     		adds	r7, r7, #20
 1846              	.LCFI72:
 1847              		.cfi_def_cfa_offset 4
 1848 00c0 BD46     		mov	sp, r7
 1849              	.LCFI73:
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 00c2 80BC     		pop	{r7}
 1853              	.LCFI74:
 1854              		.cfi_restore 7
 1855              		.cfi_def_cfa_offset 0
 1856 00c4 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE79:
 1860              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1861              		.align	1
 1862              		.global	HAL_UART_DMAResume
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1866              		.fpu softvfp
 1868              	HAL_UART_DMAResume:
 1869              	.LFB80:
ARM GAS  /tmp/ccNHJhAL.s 			page 52


1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1870              		.loc 1 1074 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 16
 1873              		@ frame_needed = 1, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 1875 0000 80B4     		push	{r7}
 1876              	.LCFI75:
 1877              		.cfi_def_cfa_offset 4
 1878              		.cfi_offset 7, -4
 1879 0002 85B0     		sub	sp, sp, #20
 1880              	.LCFI76:
 1881              		.cfi_def_cfa_offset 24
 1882 0004 00AF     		add	r7, sp, #0
 1883              	.LCFI77:
 1884              		.cfi_def_cfa_register 7
 1885 0006 7860     		str	r0, [r7, #4]
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1886              		.loc 1 1076 0
 1887 0008 7B68     		ldr	r3, [r7, #4]
 1888 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1889 000e 012B     		cmp	r3, #1
 1890 0010 01D1     		bne	.L84
 1891              		.loc 1 1076 0 is_stmt 0 discriminator 1
 1892 0012 0223     		movs	r3, #2
 1893 0014 3FE0     		b	.L85
 1894              	.L84:
 1895              		.loc 1 1076 0 discriminator 2
 1896 0016 7B68     		ldr	r3, [r7, #4]
 1897 0018 0122     		movs	r2, #1
 1898 001a 83F83820 		strb	r2, [r3, #56]
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 1899              		.loc 1 1078 0 is_stmt 1 discriminator 2
 1900 001e 7B68     		ldr	r3, [r7, #4]
 1901 0020 93F83930 		ldrb	r3, [r3, #57]
 1902 0024 DBB2     		uxtb	r3, r3
 1903 0026 212B     		cmp	r3, #33
 1904 0028 07D1     		bne	.L86
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1905              		.loc 1 1081 0
 1906 002a 7B68     		ldr	r3, [r7, #4]
 1907 002c 1B68     		ldr	r3, [r3]
 1908 002e 5A69     		ldr	r2, [r3, #20]
 1909 0030 7B68     		ldr	r3, [r7, #4]
 1910 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNHJhAL.s 			page 53


 1911 0034 42F08002 		orr	r2, r2, #128
 1912 0038 5A61     		str	r2, [r3, #20]
 1913              	.L86:
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 1914              		.loc 1 1084 0
 1915 003a 7B68     		ldr	r3, [r7, #4]
 1916 003c 93F83A30 		ldrb	r3, [r3, #58]
 1917 0040 DBB2     		uxtb	r3, r3
 1918 0042 222B     		cmp	r3, #34
 1919 0044 22D1     		bne	.L87
 1920              	.LBB3:
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1921              		.loc 1 1087 0
 1922 0046 0023     		movs	r3, #0
 1923 0048 FB60     		str	r3, [r7, #12]
 1924 004a 7B68     		ldr	r3, [r7, #4]
 1925 004c 1B68     		ldr	r3, [r3]
 1926 004e 1B68     		ldr	r3, [r3]
 1927 0050 FB60     		str	r3, [r7, #12]
 1928 0052 7B68     		ldr	r3, [r7, #4]
 1929 0054 1B68     		ldr	r3, [r3]
 1930 0056 5B68     		ldr	r3, [r3, #4]
 1931 0058 FB60     		str	r3, [r7, #12]
 1932 005a FB68     		ldr	r3, [r7, #12]
 1933              	.LBE3:
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1934              		.loc 1 1090 0
 1935 005c 7B68     		ldr	r3, [r7, #4]
 1936 005e 1B68     		ldr	r3, [r3]
 1937 0060 DA68     		ldr	r2, [r3, #12]
 1938 0062 7B68     		ldr	r3, [r7, #4]
 1939 0064 1B68     		ldr	r3, [r3]
 1940 0066 42F48072 		orr	r2, r2, #256
 1941 006a DA60     		str	r2, [r3, #12]
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1942              		.loc 1 1091 0
 1943 006c 7B68     		ldr	r3, [r7, #4]
 1944 006e 1B68     		ldr	r3, [r3]
 1945 0070 5A69     		ldr	r2, [r3, #20]
 1946 0072 7B68     		ldr	r3, [r7, #4]
 1947 0074 1B68     		ldr	r3, [r3]
 1948 0076 42F00102 		orr	r2, r2, #1
 1949 007a 5A61     		str	r2, [r3, #20]
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1950              		.loc 1 1094 0
 1951 007c 7B68     		ldr	r3, [r7, #4]
 1952 007e 1B68     		ldr	r3, [r3]
 1953 0080 5A69     		ldr	r2, [r3, #20]
 1954 0082 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 54


 1955 0084 1B68     		ldr	r3, [r3]
 1956 0086 42F04002 		orr	r2, r2, #64
 1957 008a 5A61     		str	r2, [r3, #20]
 1958              	.L87:
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1959              		.loc 1 1098 0
 1960 008c 7B68     		ldr	r3, [r7, #4]
 1961 008e 0022     		movs	r2, #0
 1962 0090 83F83820 		strb	r2, [r3, #56]
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1963              		.loc 1 1100 0
 1964 0094 0023     		movs	r3, #0
 1965              	.L85:
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1966              		.loc 1 1101 0
 1967 0096 1846     		mov	r0, r3
 1968 0098 1437     		adds	r7, r7, #20
 1969              	.LCFI78:
 1970              		.cfi_def_cfa_offset 4
 1971 009a BD46     		mov	sp, r7
 1972              	.LCFI79:
 1973              		.cfi_def_cfa_register 13
 1974              		@ sp needed
 1975 009c 80BC     		pop	{r7}
 1976              	.LCFI80:
 1977              		.cfi_restore 7
 1978              		.cfi_def_cfa_offset 0
 1979 009e 7047     		bx	lr
 1980              		.cfi_endproc
 1981              	.LFE80:
 1983              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1984              		.align	1
 1985              		.global	HAL_UART_DMAStop
 1986              		.syntax unified
 1987              		.thumb
 1988              		.thumb_func
 1989              		.fpu softvfp
 1991              	HAL_UART_DMAStop:
 1992              	.LFB81:
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1993              		.loc 1 1110 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 16
 1996              		@ frame_needed = 1, uses_anonymous_args = 0
 1997 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccNHJhAL.s 			page 55


 1998              	.LCFI81:
 1999              		.cfi_def_cfa_offset 8
 2000              		.cfi_offset 7, -8
 2001              		.cfi_offset 14, -4
 2002 0002 84B0     		sub	sp, sp, #16
 2003              	.LCFI82:
 2004              		.cfi_def_cfa_offset 24
 2005 0004 00AF     		add	r7, sp, #0
 2006              	.LCFI83:
 2007              		.cfi_def_cfa_register 7
 2008 0006 7860     		str	r0, [r7, #4]
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2009              		.loc 1 1111 0
 2010 0008 0023     		movs	r3, #0
 2011 000a FB60     		str	r3, [r7, #12]
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2012              		.loc 1 1119 0
 2013 000c 7B68     		ldr	r3, [r7, #4]
 2014 000e 1B68     		ldr	r3, [r3]
 2015 0010 5B69     		ldr	r3, [r3, #20]
 2016 0012 03F08003 		and	r3, r3, #128
 2017 0016 002B     		cmp	r3, #0
 2018 0018 14BF     		ite	ne
 2019 001a 0123     		movne	r3, #1
 2020 001c 0023     		moveq	r3, #0
 2021 001e DBB2     		uxtb	r3, r3
 2022 0020 FB60     		str	r3, [r7, #12]
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2023              		.loc 1 1120 0
 2024 0022 7B68     		ldr	r3, [r7, #4]
 2025 0024 93F83930 		ldrb	r3, [r3, #57]
 2026 0028 DBB2     		uxtb	r3, r3
 2027 002a 212B     		cmp	r3, #33
 2028 002c 16D1     		bne	.L89
 2029              		.loc 1 1120 0 is_stmt 0 discriminator 1
 2030 002e FB68     		ldr	r3, [r7, #12]
 2031 0030 002B     		cmp	r3, #0
 2032 0032 13D0     		beq	.L89
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2033              		.loc 1 1122 0 is_stmt 1
 2034 0034 7B68     		ldr	r3, [r7, #4]
 2035 0036 1B68     		ldr	r3, [r3]
 2036 0038 5A69     		ldr	r2, [r3, #20]
 2037 003a 7B68     		ldr	r3, [r7, #4]
 2038 003c 1B68     		ldr	r3, [r3]
 2039 003e 22F08002 		bic	r2, r2, #128
 2040 0042 5A61     		str	r2, [r3, #20]
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
ARM GAS  /tmp/ccNHJhAL.s 			page 56


1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2041              		.loc 1 1125 0
 2042 0044 7B68     		ldr	r3, [r7, #4]
 2043 0046 1B6B     		ldr	r3, [r3, #48]
 2044 0048 002B     		cmp	r3, #0
 2045 004a 04D0     		beq	.L90
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2046              		.loc 1 1127 0
 2047 004c 7B68     		ldr	r3, [r7, #4]
 2048 004e 1B6B     		ldr	r3, [r3, #48]
 2049 0050 1846     		mov	r0, r3
 2050 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 2051              	.L90:
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2052              		.loc 1 1129 0
 2053 0056 7868     		ldr	r0, [r7, #4]
 2054 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 2055              	.L89:
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2056              		.loc 1 1133 0
 2057 005c 7B68     		ldr	r3, [r7, #4]
 2058 005e 1B68     		ldr	r3, [r3]
 2059 0060 5B69     		ldr	r3, [r3, #20]
 2060 0062 03F04003 		and	r3, r3, #64
 2061 0066 002B     		cmp	r3, #0
 2062 0068 14BF     		ite	ne
 2063 006a 0123     		movne	r3, #1
 2064 006c 0023     		moveq	r3, #0
 2065 006e DBB2     		uxtb	r3, r3
 2066 0070 FB60     		str	r3, [r7, #12]
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2067              		.loc 1 1134 0
 2068 0072 7B68     		ldr	r3, [r7, #4]
 2069 0074 93F83A30 		ldrb	r3, [r3, #58]
 2070 0078 DBB2     		uxtb	r3, r3
 2071 007a 222B     		cmp	r3, #34
 2072 007c 16D1     		bne	.L91
 2073              		.loc 1 1134 0 is_stmt 0 discriminator 1
 2074 007e FB68     		ldr	r3, [r7, #12]
 2075 0080 002B     		cmp	r3, #0
 2076 0082 13D0     		beq	.L91
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2077              		.loc 1 1136 0 is_stmt 1
 2078 0084 7B68     		ldr	r3, [r7, #4]
 2079 0086 1B68     		ldr	r3, [r3]
 2080 0088 5A69     		ldr	r2, [r3, #20]
 2081 008a 7B68     		ldr	r3, [r7, #4]
 2082 008c 1B68     		ldr	r3, [r3]
 2083 008e 22F04002 		bic	r2, r2, #64
 2084 0092 5A61     		str	r2, [r3, #20]
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccNHJhAL.s 			page 57


1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2085              		.loc 1 1139 0
 2086 0094 7B68     		ldr	r3, [r7, #4]
 2087 0096 5B6B     		ldr	r3, [r3, #52]
 2088 0098 002B     		cmp	r3, #0
 2089 009a 04D0     		beq	.L92
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2090              		.loc 1 1141 0
 2091 009c 7B68     		ldr	r3, [r7, #4]
 2092 009e 5B6B     		ldr	r3, [r3, #52]
 2093 00a0 1846     		mov	r0, r3
 2094 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 2095              	.L92:
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2096              		.loc 1 1143 0
 2097 00a6 7868     		ldr	r0, [r7, #4]
 2098 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
 2099              	.L91:
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2100              		.loc 1 1146 0
 2101 00ac 0023     		movs	r3, #0
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2102              		.loc 1 1147 0
 2103 00ae 1846     		mov	r0, r3
 2104 00b0 1037     		adds	r7, r7, #16
 2105              	.LCFI84:
 2106              		.cfi_def_cfa_offset 8
 2107 00b2 BD46     		mov	sp, r7
 2108              	.LCFI85:
 2109              		.cfi_def_cfa_register 13
 2110              		@ sp needed
 2111 00b4 80BD     		pop	{r7, pc}
 2112              		.cfi_endproc
 2113              	.LFE81:
 2115              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2116              		.align	1
 2117              		.global	HAL_UART_Abort
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu softvfp
 2123              	HAL_UART_Abort:
 2124              	.LFB82:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
ARM GAS  /tmp/ccNHJhAL.s 			page 58


1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2125              		.loc 1 1162 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 8
 2128              		@ frame_needed = 1, uses_anonymous_args = 0
 2129 0000 80B5     		push	{r7, lr}
 2130              	.LCFI86:
 2131              		.cfi_def_cfa_offset 8
 2132              		.cfi_offset 7, -8
 2133              		.cfi_offset 14, -4
 2134 0002 82B0     		sub	sp, sp, #8
 2135              	.LCFI87:
 2136              		.cfi_def_cfa_offset 16
 2137 0004 00AF     		add	r7, sp, #0
 2138              	.LCFI88:
 2139              		.cfi_def_cfa_register 7
 2140 0006 7860     		str	r0, [r7, #4]
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2141              		.loc 1 1164 0
 2142 0008 7B68     		ldr	r3, [r7, #4]
 2143 000a 1B68     		ldr	r3, [r3]
 2144 000c DA68     		ldr	r2, [r3, #12]
 2145 000e 7B68     		ldr	r3, [r7, #4]
 2146 0010 1B68     		ldr	r3, [r3]
 2147 0012 22F4F072 		bic	r2, r2, #480
 2148 0016 DA60     		str	r2, [r3, #12]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2149              		.loc 1 1165 0
 2150 0018 7B68     		ldr	r3, [r7, #4]
 2151 001a 1B68     		ldr	r3, [r3]
 2152 001c 5A69     		ldr	r2, [r3, #20]
 2153 001e 7B68     		ldr	r3, [r7, #4]
 2154 0020 1B68     		ldr	r3, [r3]
 2155 0022 22F00102 		bic	r2, r2, #1
 2156 0026 5A61     		str	r2, [r3, #20]
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2157              		.loc 1 1168 0
 2158 0028 7B68     		ldr	r3, [r7, #4]
 2159 002a 1B68     		ldr	r3, [r3]
 2160 002c 5B69     		ldr	r3, [r3, #20]
 2161 002e 03F08003 		and	r3, r3, #128
 2162 0032 002B     		cmp	r3, #0
 2163 0034 14D0     		beq	.L95
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2164              		.loc 1 1170 0
 2165 0036 7B68     		ldr	r3, [r7, #4]
 2166 0038 1B68     		ldr	r3, [r3]
 2167 003a 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccNHJhAL.s 			page 59


 2168 003c 7B68     		ldr	r3, [r7, #4]
 2169 003e 1B68     		ldr	r3, [r3]
 2170 0040 22F08002 		bic	r2, r2, #128
 2171 0044 5A61     		str	r2, [r3, #20]
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2172              		.loc 1 1173 0
 2173 0046 7B68     		ldr	r3, [r7, #4]
 2174 0048 1B6B     		ldr	r3, [r3, #48]
 2175 004a 002B     		cmp	r3, #0
 2176 004c 08D0     		beq	.L95
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2177              		.loc 1 1177 0
 2178 004e 7B68     		ldr	r3, [r7, #4]
 2179 0050 1B6B     		ldr	r3, [r3, #48]
 2180 0052 0022     		movs	r2, #0
 2181 0054 5A63     		str	r2, [r3, #52]
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2182              		.loc 1 1179 0
 2183 0056 7B68     		ldr	r3, [r7, #4]
 2184 0058 1B6B     		ldr	r3, [r3, #48]
 2185 005a 1846     		mov	r0, r3
 2186 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2187              	.L95:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2188              		.loc 1 1184 0
 2189 0060 7B68     		ldr	r3, [r7, #4]
 2190 0062 1B68     		ldr	r3, [r3]
 2191 0064 5B69     		ldr	r3, [r3, #20]
 2192 0066 03F04003 		and	r3, r3, #64
 2193 006a 002B     		cmp	r3, #0
 2194 006c 14D0     		beq	.L96
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2195              		.loc 1 1186 0
 2196 006e 7B68     		ldr	r3, [r7, #4]
 2197 0070 1B68     		ldr	r3, [r3]
 2198 0072 5A69     		ldr	r2, [r3, #20]
 2199 0074 7B68     		ldr	r3, [r7, #4]
 2200 0076 1B68     		ldr	r3, [r3]
 2201 0078 22F04002 		bic	r2, r2, #64
 2202 007c 5A61     		str	r2, [r3, #20]
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2203              		.loc 1 1189 0
 2204 007e 7B68     		ldr	r3, [r7, #4]
 2205 0080 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccNHJhAL.s 			page 60


 2206 0082 002B     		cmp	r3, #0
 2207 0084 08D0     		beq	.L96
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2208              		.loc 1 1193 0
 2209 0086 7B68     		ldr	r3, [r7, #4]
 2210 0088 5B6B     		ldr	r3, [r3, #52]
 2211 008a 0022     		movs	r2, #0
 2212 008c 5A63     		str	r2, [r3, #52]
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2213              		.loc 1 1195 0
 2214 008e 7B68     		ldr	r3, [r7, #4]
 2215 0090 5B6B     		ldr	r3, [r3, #52]
 2216 0092 1846     		mov	r0, r3
 2217 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 2218              	.L96:
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2219              		.loc 1 1200 0
 2220 0098 7B68     		ldr	r3, [r7, #4]
 2221 009a 0022     		movs	r2, #0
 2222 009c DA84     		strh	r2, [r3, #38]	@ movhi
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2223              		.loc 1 1201 0
 2224 009e 7B68     		ldr	r3, [r7, #4]
 2225 00a0 0022     		movs	r2, #0
 2226 00a2 DA85     		strh	r2, [r3, #46]	@ movhi
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2227              		.loc 1 1204 0
 2228 00a4 7B68     		ldr	r3, [r7, #4]
 2229 00a6 0022     		movs	r2, #0
 2230 00a8 DA63     		str	r2, [r3, #60]
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2231              		.loc 1 1207 0
 2232 00aa 7B68     		ldr	r3, [r7, #4]
 2233 00ac 2022     		movs	r2, #32
 2234 00ae 83F83A20 		strb	r2, [r3, #58]
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2235              		.loc 1 1208 0
 2236 00b2 7B68     		ldr	r3, [r7, #4]
 2237 00b4 2022     		movs	r2, #32
 2238 00b6 83F83920 		strb	r2, [r3, #57]
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2239              		.loc 1 1210 0
 2240 00ba 0023     		movs	r3, #0
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccNHJhAL.s 			page 61


 2241              		.loc 1 1211 0
 2242 00bc 1846     		mov	r0, r3
 2243 00be 0837     		adds	r7, r7, #8
 2244              	.LCFI89:
 2245              		.cfi_def_cfa_offset 8
 2246 00c0 BD46     		mov	sp, r7
 2247              	.LCFI90:
 2248              		.cfi_def_cfa_register 13
 2249              		@ sp needed
 2250 00c2 80BD     		pop	{r7, pc}
 2251              		.cfi_endproc
 2252              	.LFE82:
 2254              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2255              		.align	1
 2256              		.global	HAL_UART_AbortTransmit
 2257              		.syntax unified
 2258              		.thumb
 2259              		.thumb_func
 2260              		.fpu softvfp
 2262              	HAL_UART_AbortTransmit:
 2263              	.LFB83:
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2264              		.loc 1 1226 0
 2265              		.cfi_startproc
 2266              		@ args = 0, pretend = 0, frame = 8
 2267              		@ frame_needed = 1, uses_anonymous_args = 0
 2268 0000 80B5     		push	{r7, lr}
 2269              	.LCFI91:
 2270              		.cfi_def_cfa_offset 8
 2271              		.cfi_offset 7, -8
 2272              		.cfi_offset 14, -4
 2273 0002 82B0     		sub	sp, sp, #8
 2274              	.LCFI92:
 2275              		.cfi_def_cfa_offset 16
 2276 0004 00AF     		add	r7, sp, #0
 2277              	.LCFI93:
 2278              		.cfi_def_cfa_register 7
 2279 0006 7860     		str	r0, [r7, #4]
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2280              		.loc 1 1228 0
 2281 0008 7B68     		ldr	r3, [r7, #4]
 2282 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNHJhAL.s 			page 62


 2283 000c DA68     		ldr	r2, [r3, #12]
 2284 000e 7B68     		ldr	r3, [r7, #4]
 2285 0010 1B68     		ldr	r3, [r3]
 2286 0012 22F0C002 		bic	r2, r2, #192
 2287 0016 DA60     		str	r2, [r3, #12]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2288              		.loc 1 1231 0
 2289 0018 7B68     		ldr	r3, [r7, #4]
 2290 001a 1B68     		ldr	r3, [r3]
 2291 001c 5B69     		ldr	r3, [r3, #20]
 2292 001e 03F08003 		and	r3, r3, #128
 2293 0022 002B     		cmp	r3, #0
 2294 0024 14D0     		beq	.L99
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2295              		.loc 1 1233 0
 2296 0026 7B68     		ldr	r3, [r7, #4]
 2297 0028 1B68     		ldr	r3, [r3]
 2298 002a 5A69     		ldr	r2, [r3, #20]
 2299 002c 7B68     		ldr	r3, [r7, #4]
 2300 002e 1B68     		ldr	r3, [r3]
 2301 0030 22F08002 		bic	r2, r2, #128
 2302 0034 5A61     		str	r2, [r3, #20]
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2303              		.loc 1 1236 0
 2304 0036 7B68     		ldr	r3, [r7, #4]
 2305 0038 1B6B     		ldr	r3, [r3, #48]
 2306 003a 002B     		cmp	r3, #0
 2307 003c 08D0     		beq	.L99
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2308              		.loc 1 1240 0
 2309 003e 7B68     		ldr	r3, [r7, #4]
 2310 0040 1B6B     		ldr	r3, [r3, #48]
 2311 0042 0022     		movs	r2, #0
 2312 0044 5A63     		str	r2, [r3, #52]
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2313              		.loc 1 1242 0
 2314 0046 7B68     		ldr	r3, [r7, #4]
 2315 0048 1B6B     		ldr	r3, [r3, #48]
 2316 004a 1846     		mov	r0, r3
 2317 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2318              	.L99:
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2319              		.loc 1 1247 0
 2320 0050 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 63


 2321 0052 0022     		movs	r2, #0
 2322 0054 DA84     		strh	r2, [r3, #38]	@ movhi
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2323              		.loc 1 1250 0
 2324 0056 7B68     		ldr	r3, [r7, #4]
 2325 0058 2022     		movs	r2, #32
 2326 005a 83F83920 		strb	r2, [r3, #57]
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2327              		.loc 1 1252 0
 2328 005e 0023     		movs	r3, #0
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2329              		.loc 1 1253 0
 2330 0060 1846     		mov	r0, r3
 2331 0062 0837     		adds	r7, r7, #8
 2332              	.LCFI94:
 2333              		.cfi_def_cfa_offset 8
 2334 0064 BD46     		mov	sp, r7
 2335              	.LCFI95:
 2336              		.cfi_def_cfa_register 13
 2337              		@ sp needed
 2338 0066 80BD     		pop	{r7, pc}
 2339              		.cfi_endproc
 2340              	.LFE83:
 2342              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2343              		.align	1
 2344              		.global	HAL_UART_AbortReceive
 2345              		.syntax unified
 2346              		.thumb
 2347              		.thumb_func
 2348              		.fpu softvfp
 2350              	HAL_UART_AbortReceive:
 2351              	.LFB84:
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2352              		.loc 1 1268 0
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 8
 2355              		@ frame_needed = 1, uses_anonymous_args = 0
 2356 0000 80B5     		push	{r7, lr}
 2357              	.LCFI96:
 2358              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNHJhAL.s 			page 64


 2359              		.cfi_offset 7, -8
 2360              		.cfi_offset 14, -4
 2361 0002 82B0     		sub	sp, sp, #8
 2362              	.LCFI97:
 2363              		.cfi_def_cfa_offset 16
 2364 0004 00AF     		add	r7, sp, #0
 2365              	.LCFI98:
 2366              		.cfi_def_cfa_register 7
 2367 0006 7860     		str	r0, [r7, #4]
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2368              		.loc 1 1270 0
 2369 0008 7B68     		ldr	r3, [r7, #4]
 2370 000a 1B68     		ldr	r3, [r3]
 2371 000c DA68     		ldr	r2, [r3, #12]
 2372 000e 7B68     		ldr	r3, [r7, #4]
 2373 0010 1B68     		ldr	r3, [r3]
 2374 0012 22F49072 		bic	r2, r2, #288
 2375 0016 DA60     		str	r2, [r3, #12]
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2376              		.loc 1 1271 0
 2377 0018 7B68     		ldr	r3, [r7, #4]
 2378 001a 1B68     		ldr	r3, [r3]
 2379 001c 5A69     		ldr	r2, [r3, #20]
 2380 001e 7B68     		ldr	r3, [r7, #4]
 2381 0020 1B68     		ldr	r3, [r3]
 2382 0022 22F00102 		bic	r2, r2, #1
 2383 0026 5A61     		str	r2, [r3, #20]
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2384              		.loc 1 1274 0
 2385 0028 7B68     		ldr	r3, [r7, #4]
 2386 002a 1B68     		ldr	r3, [r3]
 2387 002c 5B69     		ldr	r3, [r3, #20]
 2388 002e 03F04003 		and	r3, r3, #64
 2389 0032 002B     		cmp	r3, #0
 2390 0034 14D0     		beq	.L102
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2391              		.loc 1 1276 0
 2392 0036 7B68     		ldr	r3, [r7, #4]
 2393 0038 1B68     		ldr	r3, [r3]
 2394 003a 5A69     		ldr	r2, [r3, #20]
 2395 003c 7B68     		ldr	r3, [r7, #4]
 2396 003e 1B68     		ldr	r3, [r3]
 2397 0040 22F04002 		bic	r2, r2, #64
 2398 0044 5A61     		str	r2, [r3, #20]
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2399              		.loc 1 1279 0
 2400 0046 7B68     		ldr	r3, [r7, #4]
 2401 0048 5B6B     		ldr	r3, [r3, #52]
 2402 004a 002B     		cmp	r3, #0
 2403 004c 08D0     		beq	.L102
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccNHJhAL.s 			page 65


1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2404              		.loc 1 1283 0
 2405 004e 7B68     		ldr	r3, [r7, #4]
 2406 0050 5B6B     		ldr	r3, [r3, #52]
 2407 0052 0022     		movs	r2, #0
 2408 0054 5A63     		str	r2, [r3, #52]
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2409              		.loc 1 1285 0
 2410 0056 7B68     		ldr	r3, [r7, #4]
 2411 0058 5B6B     		ldr	r3, [r3, #52]
 2412 005a 1846     		mov	r0, r3
 2413 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2414              	.L102:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2415              		.loc 1 1290 0
 2416 0060 7B68     		ldr	r3, [r7, #4]
 2417 0062 0022     		movs	r2, #0
 2418 0064 DA85     		strh	r2, [r3, #46]	@ movhi
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2419              		.loc 1 1293 0
 2420 0066 7B68     		ldr	r3, [r7, #4]
 2421 0068 2022     		movs	r2, #32
 2422 006a 83F83A20 		strb	r2, [r3, #58]
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2423              		.loc 1 1295 0
 2424 006e 0023     		movs	r3, #0
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2425              		.loc 1 1296 0
 2426 0070 1846     		mov	r0, r3
 2427 0072 0837     		adds	r7, r7, #8
 2428              	.LCFI99:
 2429              		.cfi_def_cfa_offset 8
 2430 0074 BD46     		mov	sp, r7
 2431              	.LCFI100:
 2432              		.cfi_def_cfa_register 13
 2433              		@ sp needed
 2434 0076 80BD     		pop	{r7, pc}
 2435              		.cfi_endproc
 2436              	.LFE84:
 2438              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2439              		.align	1
 2440              		.global	HAL_UART_Abort_IT
 2441              		.syntax unified
 2442              		.thumb
 2443              		.thumb_func
 2444              		.fpu softvfp
 2446              	HAL_UART_Abort_IT:
ARM GAS  /tmp/ccNHJhAL.s 			page 66


 2447              	.LFB85:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2448              		.loc 1 1313 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 16
 2451              		@ frame_needed = 1, uses_anonymous_args = 0
 2452 0000 80B5     		push	{r7, lr}
 2453              	.LCFI101:
 2454              		.cfi_def_cfa_offset 8
 2455              		.cfi_offset 7, -8
 2456              		.cfi_offset 14, -4
 2457 0002 84B0     		sub	sp, sp, #16
 2458              	.LCFI102:
 2459              		.cfi_def_cfa_offset 24
 2460 0004 00AF     		add	r7, sp, #0
 2461              	.LCFI103:
 2462              		.cfi_def_cfa_register 7
 2463 0006 7860     		str	r0, [r7, #4]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2464              		.loc 1 1314 0
 2465 0008 0123     		movs	r3, #1
 2466 000a FB60     		str	r3, [r7, #12]
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2467              		.loc 1 1317 0
 2468 000c 7B68     		ldr	r3, [r7, #4]
 2469 000e 1B68     		ldr	r3, [r3]
 2470 0010 DA68     		ldr	r2, [r3, #12]
 2471 0012 7B68     		ldr	r3, [r7, #4]
 2472 0014 1B68     		ldr	r3, [r3]
 2473 0016 22F4F072 		bic	r2, r2, #480
 2474 001a DA60     		str	r2, [r3, #12]
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2475              		.loc 1 1318 0
 2476 001c 7B68     		ldr	r3, [r7, #4]
 2477 001e 1B68     		ldr	r3, [r3]
 2478 0020 5A69     		ldr	r2, [r3, #20]
 2479 0022 7B68     		ldr	r3, [r7, #4]
 2480 0024 1B68     		ldr	r3, [r3]
 2481 0026 22F00102 		bic	r2, r2, #1
ARM GAS  /tmp/ccNHJhAL.s 			page 67


 2482 002a 5A61     		str	r2, [r3, #20]
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 2483              		.loc 1 1323 0
 2484 002c 7B68     		ldr	r3, [r7, #4]
 2485 002e 1B6B     		ldr	r3, [r3, #48]
 2486 0030 002B     		cmp	r3, #0
 2487 0032 0FD0     		beq	.L105
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2488              		.loc 1 1327 0
 2489 0034 7B68     		ldr	r3, [r7, #4]
 2490 0036 1B68     		ldr	r3, [r3]
 2491 0038 5B69     		ldr	r3, [r3, #20]
 2492 003a 03F08003 		and	r3, r3, #128
 2493 003e 002B     		cmp	r3, #0
 2494 0040 04D0     		beq	.L106
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 2495              		.loc 1 1329 0
 2496 0042 7B68     		ldr	r3, [r7, #4]
 2497 0044 1B6B     		ldr	r3, [r3, #48]
 2498 0046 3E4A     		ldr	r2, .L115
 2499 0048 5A63     		str	r2, [r3, #52]
 2500 004a 03E0     		b	.L105
 2501              	.L106:
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2502              		.loc 1 1333 0
 2503 004c 7B68     		ldr	r3, [r7, #4]
 2504 004e 1B6B     		ldr	r3, [r3, #48]
 2505 0050 0022     		movs	r2, #0
 2506 0052 5A63     		str	r2, [r3, #52]
 2507              	.L105:
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 2508              		.loc 1 1337 0
 2509 0054 7B68     		ldr	r3, [r7, #4]
 2510 0056 5B6B     		ldr	r3, [r3, #52]
 2511 0058 002B     		cmp	r3, #0
 2512 005a 0FD0     		beq	.L107
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2513              		.loc 1 1341 0
 2514 005c 7B68     		ldr	r3, [r7, #4]
 2515 005e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNHJhAL.s 			page 68


 2516 0060 5B69     		ldr	r3, [r3, #20]
 2517 0062 03F04003 		and	r3, r3, #64
 2518 0066 002B     		cmp	r3, #0
 2519 0068 04D0     		beq	.L108
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 2520              		.loc 1 1343 0
 2521 006a 7B68     		ldr	r3, [r7, #4]
 2522 006c 5B6B     		ldr	r3, [r3, #52]
 2523 006e 354A     		ldr	r2, .L115+4
 2524 0070 5A63     		str	r2, [r3, #52]
 2525 0072 03E0     		b	.L107
 2526              	.L108:
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2527              		.loc 1 1347 0
 2528 0074 7B68     		ldr	r3, [r7, #4]
 2529 0076 5B6B     		ldr	r3, [r3, #52]
 2530 0078 0022     		movs	r2, #0
 2531 007a 5A63     		str	r2, [r3, #52]
 2532              	.L107:
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2533              		.loc 1 1352 0
 2534 007c 7B68     		ldr	r3, [r7, #4]
 2535 007e 1B68     		ldr	r3, [r3]
 2536 0080 5B69     		ldr	r3, [r3, #20]
 2537 0082 03F08003 		and	r3, r3, #128
 2538 0086 002B     		cmp	r3, #0
 2539 0088 1AD0     		beq	.L109
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2540              		.loc 1 1355 0
 2541 008a 7B68     		ldr	r3, [r7, #4]
 2542 008c 1B68     		ldr	r3, [r3]
 2543 008e 5A69     		ldr	r2, [r3, #20]
 2544 0090 7B68     		ldr	r3, [r7, #4]
 2545 0092 1B68     		ldr	r3, [r3]
 2546 0094 22F08002 		bic	r2, r2, #128
 2547 0098 5A61     		str	r2, [r3, #20]
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2548              		.loc 1 1358 0
 2549 009a 7B68     		ldr	r3, [r7, #4]
 2550 009c 1B6B     		ldr	r3, [r3, #48]
 2551 009e 002B     		cmp	r3, #0
 2552 00a0 0ED0     		beq	.L109
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised : 
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
ARM GAS  /tmp/ccNHJhAL.s 			page 69


1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2553              		.loc 1 1364 0
 2554 00a2 7B68     		ldr	r3, [r7, #4]
 2555 00a4 1B6B     		ldr	r3, [r3, #48]
 2556 00a6 1846     		mov	r0, r3
 2557 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2558 00ac 0346     		mov	r3, r0
 2559 00ae 002B     		cmp	r3, #0
 2560 00b0 04D0     		beq	.L110
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 2561              		.loc 1 1366 0
 2562 00b2 7B68     		ldr	r3, [r7, #4]
 2563 00b4 1B6B     		ldr	r3, [r3, #48]
 2564 00b6 0022     		movs	r2, #0
 2565 00b8 5A63     		str	r2, [r3, #52]
 2566 00ba 01E0     		b	.L109
 2567              	.L110:
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 2568              		.loc 1 1370 0
 2569 00bc 0023     		movs	r3, #0
 2570 00be FB60     		str	r3, [r7, #12]
 2571              	.L109:
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2572              		.loc 1 1376 0
 2573 00c0 7B68     		ldr	r3, [r7, #4]
 2574 00c2 1B68     		ldr	r3, [r3]
 2575 00c4 5B69     		ldr	r3, [r3, #20]
 2576 00c6 03F04003 		and	r3, r3, #64
 2577 00ca 002B     		cmp	r3, #0
 2578 00cc 1CD0     		beq	.L111
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2579              		.loc 1 1378 0
 2580 00ce 7B68     		ldr	r3, [r7, #4]
 2581 00d0 1B68     		ldr	r3, [r3]
 2582 00d2 5A69     		ldr	r2, [r3, #20]
 2583 00d4 7B68     		ldr	r3, [r7, #4]
 2584 00d6 1B68     		ldr	r3, [r3]
 2585 00d8 22F04002 		bic	r2, r2, #64
 2586 00dc 5A61     		str	r2, [r3, #20]
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2587              		.loc 1 1381 0
 2588 00de 7B68     		ldr	r3, [r7, #4]
 2589 00e0 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccNHJhAL.s 			page 70


 2590 00e2 002B     		cmp	r3, #0
 2591 00e4 10D0     		beq	.L111
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised : 
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2592              		.loc 1 1387 0
 2593 00e6 7B68     		ldr	r3, [r7, #4]
 2594 00e8 5B6B     		ldr	r3, [r3, #52]
 2595 00ea 1846     		mov	r0, r3
 2596 00ec FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2597 00f0 0346     		mov	r3, r0
 2598 00f2 002B     		cmp	r3, #0
 2599 00f4 06D0     		beq	.L112
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 2600              		.loc 1 1389 0
 2601 00f6 7B68     		ldr	r3, [r7, #4]
 2602 00f8 5B6B     		ldr	r3, [r3, #52]
 2603 00fa 0022     		movs	r2, #0
 2604 00fc 5A63     		str	r2, [r3, #52]
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 2605              		.loc 1 1390 0
 2606 00fe 0123     		movs	r3, #1
 2607 0100 FB60     		str	r3, [r7, #12]
 2608 0102 01E0     		b	.L111
 2609              	.L112:
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 2610              		.loc 1 1394 0
 2611 0104 0023     		movs	r3, #0
 2612 0106 FB60     		str	r3, [r7, #12]
 2613              	.L111:
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(AbortCplt == 0x01U)
 2614              		.loc 1 1400 0
 2615 0108 FB68     		ldr	r3, [r7, #12]
 2616 010a 012B     		cmp	r3, #1
 2617 010c 13D1     		bne	.L113
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U; 
 2618              		.loc 1 1403 0
 2619 010e 7B68     		ldr	r3, [r7, #4]
 2620 0110 0022     		movs	r2, #0
 2621 0112 DA84     		strh	r2, [r3, #38]	@ movhi
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 2622              		.loc 1 1404 0
 2623 0114 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 71


 2624 0116 0022     		movs	r2, #0
 2625 0118 DA85     		strh	r2, [r3, #46]	@ movhi
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2626              		.loc 1 1407 0
 2627 011a 7B68     		ldr	r3, [r7, #4]
 2628 011c 0022     		movs	r2, #0
 2629 011e DA63     		str	r2, [r3, #60]
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 2630              		.loc 1 1410 0
 2631 0120 7B68     		ldr	r3, [r7, #4]
 2632 0122 2022     		movs	r2, #32
 2633 0124 83F83920 		strb	r2, [r3, #57]
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2634              		.loc 1 1411 0
 2635 0128 7B68     		ldr	r3, [r7, #4]
 2636 012a 2022     		movs	r2, #32
 2637 012c 83F83A20 		strb	r2, [r3, #58]
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 2638              		.loc 1 1414 0
 2639 0130 7868     		ldr	r0, [r7, #4]
 2640 0132 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2641              	.L113:
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2642              		.loc 1 1417 0
 2643 0136 0023     		movs	r3, #0
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2644              		.loc 1 1418 0
 2645 0138 1846     		mov	r0, r3
 2646 013a 1037     		adds	r7, r7, #16
 2647              	.LCFI104:
 2648              		.cfi_def_cfa_offset 8
 2649 013c BD46     		mov	sp, r7
 2650              	.LCFI105:
 2651              		.cfi_def_cfa_register 13
 2652              		@ sp needed
 2653 013e 80BD     		pop	{r7, pc}
 2654              	.L116:
 2655              		.align	2
 2656              	.L115:
 2657 0140 00000000 		.word	UART_DMATxAbortCallback
 2658 0144 00000000 		.word	UART_DMARxAbortCallback
 2659              		.cfi_endproc
 2660              	.LFE85:
 2662              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2663              		.align	1
 2664              		.global	HAL_UART_AbortTransmit_IT
 2665              		.syntax unified
 2666              		.thumb
 2667              		.thumb_func
ARM GAS  /tmp/ccNHJhAL.s 			page 72


 2668              		.fpu softvfp
 2670              	HAL_UART_AbortTransmit_IT:
 2671              	.LFB86:
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2672              		.loc 1 1435 0
 2673              		.cfi_startproc
 2674              		@ args = 0, pretend = 0, frame = 8
 2675              		@ frame_needed = 1, uses_anonymous_args = 0
 2676 0000 80B5     		push	{r7, lr}
 2677              	.LCFI106:
 2678              		.cfi_def_cfa_offset 8
 2679              		.cfi_offset 7, -8
 2680              		.cfi_offset 14, -4
 2681 0002 82B0     		sub	sp, sp, #8
 2682              	.LCFI107:
 2683              		.cfi_def_cfa_offset 16
 2684 0004 00AF     		add	r7, sp, #0
 2685              	.LCFI108:
 2686              		.cfi_def_cfa_register 7
 2687 0006 7860     		str	r0, [r7, #4]
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2688              		.loc 1 1437 0
 2689 0008 7B68     		ldr	r3, [r7, #4]
 2690 000a 1B68     		ldr	r3, [r3]
 2691 000c DA68     		ldr	r2, [r3, #12]
 2692 000e 7B68     		ldr	r3, [r7, #4]
 2693 0010 1B68     		ldr	r3, [r3]
 2694 0012 22F0C002 		bic	r2, r2, #192
 2695 0016 DA60     		str	r2, [r3, #12]
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2696              		.loc 1 1440 0
 2697 0018 7B68     		ldr	r3, [r7, #4]
 2698 001a 1B68     		ldr	r3, [r3]
 2699 001c 5B69     		ldr	r3, [r3, #20]
 2700 001e 03F08003 		and	r3, r3, #128
 2701 0022 002B     		cmp	r3, #0
 2702 0024 2AD0     		beq	.L118
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccNHJhAL.s 			page 73


1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2703              		.loc 1 1442 0
 2704 0026 7B68     		ldr	r3, [r7, #4]
 2705 0028 1B68     		ldr	r3, [r3]
 2706 002a 5A69     		ldr	r2, [r3, #20]
 2707 002c 7B68     		ldr	r3, [r7, #4]
 2708 002e 1B68     		ldr	r3, [r3]
 2709 0030 22F08002 		bic	r2, r2, #128
 2710 0034 5A61     		str	r2, [r3, #20]
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2711              		.loc 1 1445 0
 2712 0036 7B68     		ldr	r3, [r7, #4]
 2713 0038 1B6B     		ldr	r3, [r3, #48]
 2714 003a 002B     		cmp	r3, #0
 2715 003c 13D0     		beq	.L119
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 2716              		.loc 1 1449 0
 2717 003e 7B68     		ldr	r3, [r7, #4]
 2718 0040 1B6B     		ldr	r3, [r3, #48]
 2719 0042 164A     		ldr	r2, .L124
 2720 0044 5A63     		str	r2, [r3, #52]
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2721              		.loc 1 1452 0
 2722 0046 7B68     		ldr	r3, [r7, #4]
 2723 0048 1B6B     		ldr	r3, [r3, #48]
 2724 004a 1846     		mov	r0, r3
 2725 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2726 0050 0346     		mov	r3, r0
 2727 0052 002B     		cmp	r3, #0
 2728 0054 1CD0     		beq	.L122
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 2729              		.loc 1 1455 0
 2730 0056 7B68     		ldr	r3, [r7, #4]
 2731 0058 1B6B     		ldr	r3, [r3, #48]
 2732 005a 5B6B     		ldr	r3, [r3, #52]
 2733 005c 7A68     		ldr	r2, [r7, #4]
 2734 005e 126B     		ldr	r2, [r2, #48]
 2735 0060 1046     		mov	r0, r2
 2736 0062 9847     		blx	r3
 2737              	.LVL0:
 2738 0064 14E0     		b	.L122
 2739              	.L119:
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
ARM GAS  /tmp/ccNHJhAL.s 			page 74


 2740              		.loc 1 1461 0
 2741 0066 7B68     		ldr	r3, [r7, #4]
 2742 0068 0022     		movs	r2, #0
 2743 006a DA84     		strh	r2, [r3, #38]	@ movhi
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 2744              		.loc 1 1464 0
 2745 006c 7B68     		ldr	r3, [r7, #4]
 2746 006e 2022     		movs	r2, #32
 2747 0070 83F83920 		strb	r2, [r3, #57]
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 2748              		.loc 1 1467 0
 2749 0074 7868     		ldr	r0, [r7, #4]
 2750 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2751 007a 09E0     		b	.L122
 2752              	.L118:
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 2753              		.loc 1 1473 0
 2754 007c 7B68     		ldr	r3, [r7, #4]
 2755 007e 0022     		movs	r2, #0
 2756 0080 DA84     		strh	r2, [r3, #38]	@ movhi
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 2757              		.loc 1 1476 0
 2758 0082 7B68     		ldr	r3, [r7, #4]
 2759 0084 2022     		movs	r2, #32
 2760 0086 83F83920 		strb	r2, [r3, #57]
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 2761              		.loc 1 1479 0
 2762 008a 7868     		ldr	r0, [r7, #4]
 2763 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2764              	.L122:
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2765              		.loc 1 1482 0
 2766 0090 0023     		movs	r3, #0
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2767              		.loc 1 1483 0
 2768 0092 1846     		mov	r0, r3
 2769 0094 0837     		adds	r7, r7, #8
 2770              	.LCFI109:
 2771              		.cfi_def_cfa_offset 8
 2772 0096 BD46     		mov	sp, r7
 2773              	.LCFI110:
 2774              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccNHJhAL.s 			page 75


 2775              		@ sp needed
 2776 0098 80BD     		pop	{r7, pc}
 2777              	.L125:
 2778 009a 00BF     		.align	2
 2779              	.L124:
 2780 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 2781              		.cfi_endproc
 2782              	.LFE86:
 2784              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2785              		.align	1
 2786              		.global	HAL_UART_AbortReceive_IT
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2790              		.fpu softvfp
 2792              	HAL_UART_AbortReceive_IT:
 2793              	.LFB87:
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable PPP Interrupts
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2794              		.loc 1 1500 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 8
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798 0000 80B5     		push	{r7, lr}
 2799              	.LCFI111:
 2800              		.cfi_def_cfa_offset 8
 2801              		.cfi_offset 7, -8
 2802              		.cfi_offset 14, -4
 2803 0002 82B0     		sub	sp, sp, #8
 2804              	.LCFI112:
 2805              		.cfi_def_cfa_offset 16
 2806 0004 00AF     		add	r7, sp, #0
 2807              	.LCFI113:
 2808              		.cfi_def_cfa_register 7
 2809 0006 7860     		str	r0, [r7, #4]
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2810              		.loc 1 1502 0
 2811 0008 7B68     		ldr	r3, [r7, #4]
 2812 000a 1B68     		ldr	r3, [r3]
 2813 000c DA68     		ldr	r2, [r3, #12]
 2814 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 76


 2815 0010 1B68     		ldr	r3, [r3]
 2816 0012 22F49072 		bic	r2, r2, #288
 2817 0016 DA60     		str	r2, [r3, #12]
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2818              		.loc 1 1503 0
 2819 0018 7B68     		ldr	r3, [r7, #4]
 2820 001a 1B68     		ldr	r3, [r3]
 2821 001c 5A69     		ldr	r2, [r3, #20]
 2822 001e 7B68     		ldr	r3, [r7, #4]
 2823 0020 1B68     		ldr	r3, [r3]
 2824 0022 22F00102 		bic	r2, r2, #1
 2825 0026 5A61     		str	r2, [r3, #20]
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2826              		.loc 1 1506 0
 2827 0028 7B68     		ldr	r3, [r7, #4]
 2828 002a 1B68     		ldr	r3, [r3]
 2829 002c 5B69     		ldr	r3, [r3, #20]
 2830 002e 03F04003 		and	r3, r3, #64
 2831 0032 002B     		cmp	r3, #0
 2832 0034 2AD0     		beq	.L127
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2833              		.loc 1 1508 0
 2834 0036 7B68     		ldr	r3, [r7, #4]
 2835 0038 1B68     		ldr	r3, [r3]
 2836 003a 5A69     		ldr	r2, [r3, #20]
 2837 003c 7B68     		ldr	r3, [r7, #4]
 2838 003e 1B68     		ldr	r3, [r3]
 2839 0040 22F04002 		bic	r2, r2, #64
 2840 0044 5A61     		str	r2, [r3, #20]
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2841              		.loc 1 1511 0
 2842 0046 7B68     		ldr	r3, [r7, #4]
 2843 0048 5B6B     		ldr	r3, [r3, #52]
 2844 004a 002B     		cmp	r3, #0
 2845 004c 13D0     		beq	.L128
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 2846              		.loc 1 1515 0
 2847 004e 7B68     		ldr	r3, [r7, #4]
 2848 0050 5B6B     		ldr	r3, [r3, #52]
 2849 0052 164A     		ldr	r2, .L133
 2850 0054 5A63     		str	r2, [r3, #52]
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2851              		.loc 1 1518 0
 2852 0056 7B68     		ldr	r3, [r7, #4]
 2853 0058 5B6B     		ldr	r3, [r3, #52]
 2854 005a 1846     		mov	r0, r3
 2855 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/ccNHJhAL.s 			page 77


 2856 0060 0346     		mov	r3, r0
 2857 0062 002B     		cmp	r3, #0
 2858 0064 1CD0     		beq	.L131
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 2859              		.loc 1 1521 0
 2860 0066 7B68     		ldr	r3, [r7, #4]
 2861 0068 5B6B     		ldr	r3, [r3, #52]
 2862 006a 5B6B     		ldr	r3, [r3, #52]
 2863 006c 7A68     		ldr	r2, [r7, #4]
 2864 006e 526B     		ldr	r2, [r2, #52]
 2865 0070 1046     		mov	r0, r2
 2866 0072 9847     		blx	r3
 2867              	.LVL1:
 2868 0074 14E0     		b	.L131
 2869              	.L128:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 2870              		.loc 1 1527 0
 2871 0076 7B68     		ldr	r3, [r7, #4]
 2872 0078 0022     		movs	r2, #0
 2873 007a DA85     		strh	r2, [r3, #46]	@ movhi
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 2874              		.loc 1 1530 0
 2875 007c 7B68     		ldr	r3, [r7, #4]
 2876 007e 2022     		movs	r2, #32
 2877 0080 83F83A20 		strb	r2, [r3, #58]
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 2878              		.loc 1 1533 0
 2879 0084 7868     		ldr	r0, [r7, #4]
 2880 0086 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2881 008a 09E0     		b	.L131
 2882              	.L127:
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 2883              		.loc 1 1539 0
 2884 008c 7B68     		ldr	r3, [r7, #4]
 2885 008e 0022     		movs	r2, #0
 2886 0090 DA85     		strh	r2, [r3, #46]	@ movhi
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2887              		.loc 1 1542 0
 2888 0092 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 78


 2889 0094 2022     		movs	r2, #32
 2890 0096 83F83A20 		strb	r2, [r3, #58]
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 2891              		.loc 1 1545 0
 2892 009a 7868     		ldr	r0, [r7, #4]
 2893 009c FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2894              	.L131:
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2895              		.loc 1 1548 0
 2896 00a0 0023     		movs	r3, #0
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2897              		.loc 1 1549 0
 2898 00a2 1846     		mov	r0, r3
 2899 00a4 0837     		adds	r7, r7, #8
 2900              	.LCFI114:
 2901              		.cfi_def_cfa_offset 8
 2902 00a6 BD46     		mov	sp, r7
 2903              	.LCFI115:
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 00a8 80BD     		pop	{r7, pc}
 2907              	.L134:
 2908 00aa 00BF     		.align	2
 2909              	.L133:
 2910 00ac 00000000 		.word	UART_DMARxOnlyAbortCallback
 2911              		.cfi_endproc
 2912              	.LFE87:
 2914              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2915              		.align	1
 2916              		.global	HAL_UART_IRQHandler
 2917              		.syntax unified
 2918              		.thumb
 2919              		.thumb_func
 2920              		.fpu softvfp
 2922              	HAL_UART_IRQHandler:
 2923              	.LFB88:
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2924              		.loc 1 1558 0
 2925              		.cfi_startproc
 2926              		@ args = 0, pretend = 0, frame = 32
 2927              		@ frame_needed = 1, uses_anonymous_args = 0
 2928 0000 80B5     		push	{r7, lr}
 2929              	.LCFI116:
 2930              		.cfi_def_cfa_offset 8
 2931              		.cfi_offset 7, -8
ARM GAS  /tmp/ccNHJhAL.s 			page 79


 2932              		.cfi_offset 14, -4
 2933 0002 88B0     		sub	sp, sp, #32
 2934              	.LCFI117:
 2935              		.cfi_def_cfa_offset 40
 2936 0004 00AF     		add	r7, sp, #0
 2937              	.LCFI118:
 2938              		.cfi_def_cfa_register 7
 2939 0006 7860     		str	r0, [r7, #4]
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2940              		.loc 1 1559 0
 2941 0008 7B68     		ldr	r3, [r7, #4]
 2942 000a 1B68     		ldr	r3, [r3]
 2943 000c 1B68     		ldr	r3, [r3]
 2944 000e FB61     		str	r3, [r7, #28]
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2945              		.loc 1 1560 0
 2946 0010 7B68     		ldr	r3, [r7, #4]
 2947 0012 1B68     		ldr	r3, [r3]
 2948 0014 DB68     		ldr	r3, [r3, #12]
 2949 0016 BB61     		str	r3, [r7, #24]
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2950              		.loc 1 1561 0
 2951 0018 7B68     		ldr	r3, [r7, #4]
 2952 001a 1B68     		ldr	r3, [r3]
 2953 001c 5B69     		ldr	r3, [r3, #20]
 2954 001e 7B61     		str	r3, [r7, #20]
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    uint32_t errorflags = 0x00U;
 2955              		.loc 1 1562 0
 2956 0020 0023     		movs	r3, #0
 2957 0022 3B61     		str	r3, [r7, #16]
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    uint32_t dmarequest = 0x00U;
 2958              		.loc 1 1563 0
 2959 0024 0023     		movs	r3, #0
 2960 0026 FB60     		str	r3, [r7, #12]
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 2961              		.loc 1 1566 0
 2962 0028 FB69     		ldr	r3, [r7, #28]
 2963 002a 03F00F03 		and	r3, r3, #15
 2964 002e 3B61     		str	r3, [r7, #16]
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(errorflags == RESET)
 2965              		.loc 1 1567 0
 2966 0030 3B69     		ldr	r3, [r7, #16]
 2967 0032 002B     		cmp	r3, #0
 2968 0034 0DD1     		bne	.L136
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 2969              		.loc 1 1570 0
 2970 0036 FB69     		ldr	r3, [r7, #28]
 2971 0038 03F02003 		and	r3, r3, #32
 2972 003c 002B     		cmp	r3, #0
 2973 003e 08D0     		beq	.L136
 2974              		.loc 1 1570 0 is_stmt 0 discriminator 1
 2975 0040 BB69     		ldr	r3, [r7, #24]
 2976 0042 03F02003 		and	r3, r3, #32
ARM GAS  /tmp/ccNHJhAL.s 			page 80


 2977 0046 002B     		cmp	r3, #0
 2978 0048 03D0     		beq	.L136
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
 2979              		.loc 1 1572 0 is_stmt 1
 2980 004a 7868     		ldr	r0, [r7, #4]
 2981 004c FFF7FEFF 		bl	UART_Receive_IT
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 2982              		.loc 1 1573 0
 2983 0050 CCE0     		b	.L135
 2984              	.L136:
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
 2985              		.loc 1 1578 0
 2986 0052 3B69     		ldr	r3, [r7, #16]
 2987 0054 002B     		cmp	r3, #0
 2988 0056 00F0AB80 		beq	.L138
 2989              		.loc 1 1578 0 is_stmt 0 discriminator 1
 2990 005a 7B69     		ldr	r3, [r7, #20]
 2991 005c 03F00103 		and	r3, r3, #1
 2992 0060 002B     		cmp	r3, #0
 2993 0062 05D1     		bne	.L139
 2994              		.loc 1 1578 0 discriminator 2
 2995 0064 BB69     		ldr	r3, [r7, #24]
 2996 0066 03F49073 		and	r3, r3, #288
 2997 006a 002B     		cmp	r3, #0
 2998 006c 00F0A080 		beq	.L138
 2999              	.L139:
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3000              		.loc 1 1581 0 is_stmt 1
 3001 0070 FB69     		ldr	r3, [r7, #28]
 3002 0072 03F00103 		and	r3, r3, #1
 3003 0076 002B     		cmp	r3, #0
 3004 0078 0AD0     		beq	.L140
 3005              		.loc 1 1581 0 is_stmt 0 discriminator 1
 3006 007a BB69     		ldr	r3, [r7, #24]
 3007 007c 03F48073 		and	r3, r3, #256
 3008 0080 002B     		cmp	r3, #0
 3009 0082 05D0     		beq	.L140
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3010              		.loc 1 1583 0 is_stmt 1
 3011 0084 7B68     		ldr	r3, [r7, #4]
 3012 0086 DB6B     		ldr	r3, [r3, #60]
 3013 0088 43F00102 		orr	r2, r3, #1
 3014 008c 7B68     		ldr	r3, [r7, #4]
 3015 008e DA63     		str	r2, [r3, #60]
 3016              	.L140:
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
ARM GAS  /tmp/ccNHJhAL.s 			page 81


 3017              		.loc 1 1587 0
 3018 0090 FB69     		ldr	r3, [r7, #28]
 3019 0092 03F00403 		and	r3, r3, #4
 3020 0096 002B     		cmp	r3, #0
 3021 0098 0AD0     		beq	.L141
 3022              		.loc 1 1587 0 is_stmt 0 discriminator 1
 3023 009a 7B69     		ldr	r3, [r7, #20]
 3024 009c 03F00103 		and	r3, r3, #1
 3025 00a0 002B     		cmp	r3, #0
 3026 00a2 05D0     		beq	.L141
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3027              		.loc 1 1589 0 is_stmt 1
 3028 00a4 7B68     		ldr	r3, [r7, #4]
 3029 00a6 DB6B     		ldr	r3, [r3, #60]
 3030 00a8 43F00202 		orr	r2, r3, #2
 3031 00ac 7B68     		ldr	r3, [r7, #4]
 3032 00ae DA63     		str	r2, [r3, #60]
 3033              	.L141:
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3034              		.loc 1 1593 0
 3035 00b0 FB69     		ldr	r3, [r7, #28]
 3036 00b2 03F00203 		and	r3, r3, #2
 3037 00b6 002B     		cmp	r3, #0
 3038 00b8 0AD0     		beq	.L142
 3039              		.loc 1 1593 0 is_stmt 0 discriminator 1
 3040 00ba 7B69     		ldr	r3, [r7, #20]
 3041 00bc 03F00103 		and	r3, r3, #1
 3042 00c0 002B     		cmp	r3, #0
 3043 00c2 05D0     		beq	.L142
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3044              		.loc 1 1595 0 is_stmt 1
 3045 00c4 7B68     		ldr	r3, [r7, #4]
 3046 00c6 DB6B     		ldr	r3, [r3, #60]
 3047 00c8 43F00402 		orr	r2, r3, #4
 3048 00cc 7B68     		ldr	r3, [r7, #4]
 3049 00ce DA63     		str	r2, [r3, #60]
 3050              	.L142:
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3051              		.loc 1 1599 0
 3052 00d0 FB69     		ldr	r3, [r7, #28]
 3053 00d2 03F00803 		and	r3, r3, #8
 3054 00d6 002B     		cmp	r3, #0
 3055 00d8 0AD0     		beq	.L143
 3056              		.loc 1 1599 0 is_stmt 0 discriminator 1
 3057 00da 7B69     		ldr	r3, [r7, #20]
 3058 00dc 03F00103 		and	r3, r3, #1
 3059 00e0 002B     		cmp	r3, #0
 3060 00e2 05D0     		beq	.L143
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     { 
ARM GAS  /tmp/ccNHJhAL.s 			page 82


1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3061              		.loc 1 1601 0 is_stmt 1
 3062 00e4 7B68     		ldr	r3, [r7, #4]
 3063 00e6 DB6B     		ldr	r3, [r3, #60]
 3064 00e8 43F00802 		orr	r2, r3, #8
 3065 00ec 7B68     		ldr	r3, [r7, #4]
 3066 00ee DA63     		str	r2, [r3, #60]
 3067              	.L143:
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 3068              		.loc 1 1605 0
 3069 00f0 7B68     		ldr	r3, [r7, #4]
 3070 00f2 DB6B     		ldr	r3, [r3, #60]
 3071 00f4 002B     		cmp	r3, #0
 3072 00f6 78D0     		beq	.L154
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3073              		.loc 1 1608 0
 3074 00f8 FB69     		ldr	r3, [r7, #28]
 3075 00fa 03F02003 		and	r3, r3, #32
 3076 00fe 002B     		cmp	r3, #0
 3077 0100 07D0     		beq	.L145
 3078              		.loc 1 1608 0 is_stmt 0 discriminator 1
 3079 0102 BB69     		ldr	r3, [r7, #24]
 3080 0104 03F02003 		and	r3, r3, #32
 3081 0108 002B     		cmp	r3, #0
 3082 010a 02D0     		beq	.L145
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 3083              		.loc 1 1610 0 is_stmt 1
 3084 010c 7868     		ldr	r0, [r7, #4]
 3085 010e FFF7FEFF 		bl	UART_Receive_IT
 3086              	.L145:
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 3087              		.loc 1 1615 0
 3088 0112 7B68     		ldr	r3, [r7, #4]
 3089 0114 1B68     		ldr	r3, [r3]
 3090 0116 5B69     		ldr	r3, [r3, #20]
 3091 0118 03F04003 		and	r3, r3, #64
 3092 011c 002B     		cmp	r3, #0
 3093 011e 14BF     		ite	ne
 3094 0120 0123     		movne	r3, #1
 3095 0122 0023     		moveq	r3, #0
 3096 0124 DBB2     		uxtb	r3, r3
 3097 0126 FB60     		str	r3, [r7, #12]
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3098              		.loc 1 1616 0
 3099 0128 7B68     		ldr	r3, [r7, #4]
 3100 012a DB6B     		ldr	r3, [r3, #60]
 3101 012c 03F00803 		and	r3, r3, #8
ARM GAS  /tmp/ccNHJhAL.s 			page 83


 3102 0130 002B     		cmp	r3, #0
 3103 0132 02D1     		bne	.L146
 3104              		.loc 1 1616 0 is_stmt 0 discriminator 1
 3105 0134 FB68     		ldr	r3, [r7, #12]
 3106 0136 002B     		cmp	r3, #0
 3107 0138 31D0     		beq	.L147
 3108              	.L146:
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3109              		.loc 1 1621 0 is_stmt 1
 3110 013a 7868     		ldr	r0, [r7, #4]
 3111 013c FFF7FEFF 		bl	UART_EndRxTransfer
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3112              		.loc 1 1624 0
 3113 0140 7B68     		ldr	r3, [r7, #4]
 3114 0142 1B68     		ldr	r3, [r3]
 3115 0144 5B69     		ldr	r3, [r3, #20]
 3116 0146 03F04003 		and	r3, r3, #64
 3117 014a 002B     		cmp	r3, #0
 3118 014c 23D0     		beq	.L148
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3119              		.loc 1 1626 0
 3120 014e 7B68     		ldr	r3, [r7, #4]
 3121 0150 1B68     		ldr	r3, [r3]
 3122 0152 5A69     		ldr	r2, [r3, #20]
 3123 0154 7B68     		ldr	r3, [r7, #4]
 3124 0156 1B68     		ldr	r3, [r3]
 3125 0158 22F04002 		bic	r2, r2, #64
 3126 015c 5A61     		str	r2, [r3, #20]
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if(huart->hdmarx != NULL)
 3127              		.loc 1 1629 0
 3128 015e 7B68     		ldr	r3, [r7, #4]
 3129 0160 5B6B     		ldr	r3, [r3, #52]
 3130 0162 002B     		cmp	r3, #0
 3131 0164 13D0     		beq	.L149
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback : 
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3132              		.loc 1 1633 0
 3133 0166 7B68     		ldr	r3, [r7, #4]
 3134 0168 5B6B     		ldr	r3, [r3, #52]
 3135 016a 224A     		ldr	r2, .L156
 3136 016c 5A63     		str	r2, [r3, #52]
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3137              		.loc 1 1634 0
 3138 016e 7B68     		ldr	r3, [r7, #4]
 3139 0170 5B6B     		ldr	r3, [r3, #52]
 3140 0172 1846     		mov	r0, r3
ARM GAS  /tmp/ccNHJhAL.s 			page 84


 3141 0174 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3142 0178 0346     		mov	r3, r0
 3143 017a 002B     		cmp	r3, #0
 3144 017c 16D0     		beq	.L155
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3145              		.loc 1 1637 0
 3146 017e 7B68     		ldr	r3, [r7, #4]
 3147 0180 5B6B     		ldr	r3, [r3, #52]
 3148 0182 5B6B     		ldr	r3, [r3, #52]
 3149 0184 7A68     		ldr	r2, [r7, #4]
 3150 0186 526B     		ldr	r2, [r2, #52]
 3151 0188 1046     		mov	r0, r2
 3152 018a 9847     		blx	r3
 3153              	.LVL2:
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3154              		.loc 1 1624 0
 3155 018c 0EE0     		b	.L155
 3156              	.L149:
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3157              		.loc 1 1643 0
 3158 018e 7868     		ldr	r0, [r7, #4]
 3159 0190 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3160              		.loc 1 1624 0
 3161 0194 0AE0     		b	.L155
 3162              	.L148:
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3163              		.loc 1 1649 0
 3164 0196 7868     		ldr	r0, [r7, #4]
 3165 0198 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3166              		.loc 1 1624 0
 3167 019c 06E0     		b	.L155
 3168              	.L147:
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on. 
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3169              		.loc 1 1656 0
 3170 019e 7868     		ldr	r0, [r7, #4]
 3171 01a0 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/ccNHJhAL.s 			page 85


 3172              		.loc 1 1657 0
 3173 01a4 7B68     		ldr	r3, [r7, #4]
 3174 01a6 0022     		movs	r2, #0
 3175 01a8 DA63     		str	r2, [r3, #60]
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3176              		.loc 1 1660 0
 3177 01aa 1EE0     		b	.L154
 3178              	.L155:
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3179              		.loc 1 1624 0
 3180 01ac 00BF     		nop
 3181              		.loc 1 1660 0
 3182 01ae 1CE0     		b	.L154
 3183              	.L138:
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 3184              		.loc 1 1664 0
 3185 01b0 FB69     		ldr	r3, [r7, #28]
 3186 01b2 03F08003 		and	r3, r3, #128
 3187 01b6 002B     		cmp	r3, #0
 3188 01b8 08D0     		beq	.L153
 3189              		.loc 1 1664 0 is_stmt 0 discriminator 1
 3190 01ba BB69     		ldr	r3, [r7, #24]
 3191 01bc 03F08003 		and	r3, r3, #128
 3192 01c0 002B     		cmp	r3, #0
 3193 01c2 03D0     		beq	.L153
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 3194              		.loc 1 1666 0 is_stmt 1
 3195 01c4 7868     		ldr	r0, [r7, #4]
 3196 01c6 FFF7FEFF 		bl	UART_Transmit_IT
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3197              		.loc 1 1667 0
 3198 01ca 0FE0     		b	.L135
 3199              	.L153:
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 3200              		.loc 1 1671 0
 3201 01cc FB69     		ldr	r3, [r7, #28]
 3202 01ce 03F04003 		and	r3, r3, #64
 3203 01d2 002B     		cmp	r3, #0
 3204 01d4 0AD0     		beq	.L135
 3205              		.loc 1 1671 0 is_stmt 0 discriminator 1
 3206 01d6 BB69     		ldr	r3, [r7, #24]
 3207 01d8 03F04003 		and	r3, r3, #64
 3208 01dc 002B     		cmp	r3, #0
 3209 01de 05D0     		beq	.L135
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3210              		.loc 1 1673 0 is_stmt 1
 3211 01e0 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 86


 3212 01e2 FFF7FEFF 		bl	UART_EndTransmit_IT
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3213              		.loc 1 1674 0
 3214 01e6 00BF     		nop
 3215 01e8 00E0     		b	.L135
 3216              	.L154:
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
 3217              		.loc 1 1660 0
 3218 01ea 00BF     		nop
 3219              	.L135:
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3220              		.loc 1 1676 0
 3221 01ec 2037     		adds	r7, r7, #32
 3222              	.LCFI119:
 3223              		.cfi_def_cfa_offset 8
 3224 01ee BD46     		mov	sp, r7
 3225              	.LCFI120:
 3226              		.cfi_def_cfa_register 13
 3227              		@ sp needed
 3228 01f0 80BD     		pop	{r7, pc}
 3229              	.L157:
 3230 01f2 00BF     		.align	2
 3231              	.L156:
 3232 01f4 00000000 		.word	UART_DMAAbortOnError
 3233              		.cfi_endproc
 3234              	.LFE88:
 3236              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3237              		.align	1
 3238              		.weak	HAL_UART_TxCpltCallback
 3239              		.syntax unified
 3240              		.thumb
 3241              		.thumb_func
 3242              		.fpu softvfp
 3244              	HAL_UART_TxCpltCallback:
 3245              	.LFB89:
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3246              		.loc 1 1685 0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 8
 3249              		@ frame_needed = 1, uses_anonymous_args = 0
 3250              		@ link register save eliminated.
 3251 0000 80B4     		push	{r7}
 3252              	.LCFI121:
 3253              		.cfi_def_cfa_offset 4
 3254              		.cfi_offset 7, -4
 3255 0002 83B0     		sub	sp, sp, #12
 3256              	.LCFI122:
 3257              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccNHJhAL.s 			page 87


 3258 0004 00AF     		add	r7, sp, #0
 3259              	.LCFI123:
 3260              		.cfi_def_cfa_register 7
 3261 0006 7860     		str	r0, [r7, #4]
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */ 
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3262              		.loc 1 1691 0
 3263 0008 00BF     		nop
 3264 000a 0C37     		adds	r7, r7, #12
 3265              	.LCFI124:
 3266              		.cfi_def_cfa_offset 4
 3267 000c BD46     		mov	sp, r7
 3268              	.LCFI125:
 3269              		.cfi_def_cfa_register 13
 3270              		@ sp needed
 3271 000e 80BC     		pop	{r7}
 3272              	.LCFI126:
 3273              		.cfi_restore 7
 3274              		.cfi_def_cfa_offset 0
 3275 0010 7047     		bx	lr
 3276              		.cfi_endproc
 3277              	.LFE89:
 3279              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 3280              		.align	1
 3281              		.weak	HAL_UART_TxHalfCpltCallback
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3285              		.fpu softvfp
 3287              	HAL_UART_TxHalfCpltCallback:
 3288              	.LFB90:
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3289              		.loc 1 1700 0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 8
 3292              		@ frame_needed = 1, uses_anonymous_args = 0
 3293              		@ link register save eliminated.
 3294 0000 80B4     		push	{r7}
 3295              	.LCFI127:
 3296              		.cfi_def_cfa_offset 4
 3297              		.cfi_offset 7, -4
 3298 0002 83B0     		sub	sp, sp, #12
 3299              	.LCFI128:
 3300              		.cfi_def_cfa_offset 16
 3301 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNHJhAL.s 			page 88


 3302              	.LCFI129:
 3303              		.cfi_def_cfa_register 7
 3304 0006 7860     		str	r0, [r7, #4]
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */ 
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3305              		.loc 1 1706 0
 3306 0008 00BF     		nop
 3307 000a 0C37     		adds	r7, r7, #12
 3308              	.LCFI130:
 3309              		.cfi_def_cfa_offset 4
 3310 000c BD46     		mov	sp, r7
 3311              	.LCFI131:
 3312              		.cfi_def_cfa_register 13
 3313              		@ sp needed
 3314 000e 80BC     		pop	{r7}
 3315              	.LCFI132:
 3316              		.cfi_restore 7
 3317              		.cfi_def_cfa_offset 0
 3318 0010 7047     		bx	lr
 3319              		.cfi_endproc
 3320              	.LFE90:
 3322              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3323              		.align	1
 3324              		.weak	HAL_UART_RxCpltCallback
 3325              		.syntax unified
 3326              		.thumb
 3327              		.thumb_func
 3328              		.fpu softvfp
 3330              	HAL_UART_RxCpltCallback:
 3331              	.LFB91:
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3332              		.loc 1 1715 0
 3333              		.cfi_startproc
 3334              		@ args = 0, pretend = 0, frame = 8
 3335              		@ frame_needed = 1, uses_anonymous_args = 0
 3336              		@ link register save eliminated.
 3337 0000 80B4     		push	{r7}
 3338              	.LCFI133:
 3339              		.cfi_def_cfa_offset 4
 3340              		.cfi_offset 7, -4
 3341 0002 83B0     		sub	sp, sp, #12
 3342              	.LCFI134:
 3343              		.cfi_def_cfa_offset 16
 3344 0004 00AF     		add	r7, sp, #0
 3345              	.LCFI135:
ARM GAS  /tmp/ccNHJhAL.s 			page 89


 3346              		.cfi_def_cfa_register 7
 3347 0006 7860     		str	r0, [r7, #4]
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3348              		.loc 1 1721 0
 3349 0008 00BF     		nop
 3350 000a 0C37     		adds	r7, r7, #12
 3351              	.LCFI136:
 3352              		.cfi_def_cfa_offset 4
 3353 000c BD46     		mov	sp, r7
 3354              	.LCFI137:
 3355              		.cfi_def_cfa_register 13
 3356              		@ sp needed
 3357 000e 80BC     		pop	{r7}
 3358              	.LCFI138:
 3359              		.cfi_restore 7
 3360              		.cfi_def_cfa_offset 0
 3361 0010 7047     		bx	lr
 3362              		.cfi_endproc
 3363              	.LFE91:
 3365              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 3366              		.align	1
 3367              		.weak	HAL_UART_RxHalfCpltCallback
 3368              		.syntax unified
 3369              		.thumb
 3370              		.thumb_func
 3371              		.fpu softvfp
 3373              	HAL_UART_RxHalfCpltCallback:
 3374              	.LFB92:
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3375              		.loc 1 1730 0
 3376              		.cfi_startproc
 3377              		@ args = 0, pretend = 0, frame = 8
 3378              		@ frame_needed = 1, uses_anonymous_args = 0
 3379              		@ link register save eliminated.
 3380 0000 80B4     		push	{r7}
 3381              	.LCFI139:
 3382              		.cfi_def_cfa_offset 4
 3383              		.cfi_offset 7, -4
 3384 0002 83B0     		sub	sp, sp, #12
 3385              	.LCFI140:
 3386              		.cfi_def_cfa_offset 16
 3387 0004 00AF     		add	r7, sp, #0
 3388              	.LCFI141:
 3389              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccNHJhAL.s 			page 90


 3390 0006 7860     		str	r0, [r7, #4]
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3391              		.loc 1 1736 0
 3392 0008 00BF     		nop
 3393 000a 0C37     		adds	r7, r7, #12
 3394              	.LCFI142:
 3395              		.cfi_def_cfa_offset 4
 3396 000c BD46     		mov	sp, r7
 3397              	.LCFI143:
 3398              		.cfi_def_cfa_register 13
 3399              		@ sp needed
 3400 000e 80BC     		pop	{r7}
 3401              	.LCFI144:
 3402              		.cfi_restore 7
 3403              		.cfi_def_cfa_offset 0
 3404 0010 7047     		bx	lr
 3405              		.cfi_endproc
 3406              	.LFE92:
 3408              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 3409              		.align	1
 3410              		.weak	HAL_UART_ErrorCallback
 3411              		.syntax unified
 3412              		.thumb
 3413              		.thumb_func
 3414              		.fpu softvfp
 3416              	HAL_UART_ErrorCallback:
 3417              	.LFB93:
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3418              		.loc 1 1745 0
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 8
 3421              		@ frame_needed = 1, uses_anonymous_args = 0
 3422              		@ link register save eliminated.
 3423 0000 80B4     		push	{r7}
 3424              	.LCFI145:
 3425              		.cfi_def_cfa_offset 4
 3426              		.cfi_offset 7, -4
 3427 0002 83B0     		sub	sp, sp, #12
 3428              	.LCFI146:
 3429              		.cfi_def_cfa_offset 16
 3430 0004 00AF     		add	r7, sp, #0
 3431              	.LCFI147:
 3432              		.cfi_def_cfa_register 7
 3433 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 91


1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart); 
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */ 
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3434              		.loc 1 1751 0
 3435 0008 00BF     		nop
 3436 000a 0C37     		adds	r7, r7, #12
 3437              	.LCFI148:
 3438              		.cfi_def_cfa_offset 4
 3439 000c BD46     		mov	sp, r7
 3440              	.LCFI149:
 3441              		.cfi_def_cfa_register 13
 3442              		@ sp needed
 3443 000e 80BC     		pop	{r7}
 3444              	.LCFI150:
 3445              		.cfi_restore 7
 3446              		.cfi_def_cfa_offset 0
 3447 0010 7047     		bx	lr
 3448              		.cfi_endproc
 3449              	.LFE93:
 3451              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3452              		.align	1
 3453              		.weak	HAL_UART_AbortCpltCallback
 3454              		.syntax unified
 3455              		.thumb
 3456              		.thumb_func
 3457              		.fpu softvfp
 3459              	HAL_UART_AbortCpltCallback:
 3460              	.LFB94:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3461              		.loc 1 1759 0
 3462              		.cfi_startproc
 3463              		@ args = 0, pretend = 0, frame = 8
 3464              		@ frame_needed = 1, uses_anonymous_args = 0
 3465              		@ link register save eliminated.
 3466 0000 80B4     		push	{r7}
 3467              	.LCFI151:
 3468              		.cfi_def_cfa_offset 4
 3469              		.cfi_offset 7, -4
 3470 0002 83B0     		sub	sp, sp, #12
 3471              	.LCFI152:
 3472              		.cfi_def_cfa_offset 16
 3473 0004 00AF     		add	r7, sp, #0
 3474              	.LCFI153:
 3475              		.cfi_def_cfa_register 7
 3476 0006 7860     		str	r0, [r7, #4]
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/ccNHJhAL.s 			page 92


1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3477              		.loc 1 1766 0
 3478 0008 00BF     		nop
 3479 000a 0C37     		adds	r7, r7, #12
 3480              	.LCFI154:
 3481              		.cfi_def_cfa_offset 4
 3482 000c BD46     		mov	sp, r7
 3483              	.LCFI155:
 3484              		.cfi_def_cfa_register 13
 3485              		@ sp needed
 3486 000e 80BC     		pop	{r7}
 3487              	.LCFI156:
 3488              		.cfi_restore 7
 3489              		.cfi_def_cfa_offset 0
 3490 0010 7047     		bx	lr
 3491              		.cfi_endproc
 3492              	.LFE94:
 3494              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3495              		.align	1
 3496              		.weak	HAL_UART_AbortTransmitCpltCallback
 3497              		.syntax unified
 3498              		.thumb
 3499              		.thumb_func
 3500              		.fpu softvfp
 3502              	HAL_UART_AbortTransmitCpltCallback:
 3503              	.LFB95:
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3504              		.loc 1 1773 0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 8
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508              		@ link register save eliminated.
 3509 0000 80B4     		push	{r7}
 3510              	.LCFI157:
 3511              		.cfi_def_cfa_offset 4
 3512              		.cfi_offset 7, -4
 3513 0002 83B0     		sub	sp, sp, #12
 3514              	.LCFI158:
 3515              		.cfi_def_cfa_offset 16
 3516 0004 00AF     		add	r7, sp, #0
 3517              	.LCFI159:
 3518              		.cfi_def_cfa_register 7
 3519 0006 7860     		str	r0, [r7, #4]
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
ARM GAS  /tmp/ccNHJhAL.s 			page 93


1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3520              		.loc 1 1780 0
 3521 0008 00BF     		nop
 3522 000a 0C37     		adds	r7, r7, #12
 3523              	.LCFI160:
 3524              		.cfi_def_cfa_offset 4
 3525 000c BD46     		mov	sp, r7
 3526              	.LCFI161:
 3527              		.cfi_def_cfa_register 13
 3528              		@ sp needed
 3529 000e 80BC     		pop	{r7}
 3530              	.LCFI162:
 3531              		.cfi_restore 7
 3532              		.cfi_def_cfa_offset 0
 3533 0010 7047     		bx	lr
 3534              		.cfi_endproc
 3535              	.LFE95:
 3537              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3538              		.align	1
 3539              		.weak	HAL_UART_AbortReceiveCpltCallback
 3540              		.syntax unified
 3541              		.thumb
 3542              		.thumb_func
 3543              		.fpu softvfp
 3545              	HAL_UART_AbortReceiveCpltCallback:
 3546              	.LFB96:
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3547              		.loc 1 1788 0
 3548              		.cfi_startproc
 3549              		@ args = 0, pretend = 0, frame = 8
 3550              		@ frame_needed = 1, uses_anonymous_args = 0
 3551              		@ link register save eliminated.
 3552 0000 80B4     		push	{r7}
 3553              	.LCFI163:
 3554              		.cfi_def_cfa_offset 4
 3555              		.cfi_offset 7, -4
 3556 0002 83B0     		sub	sp, sp, #12
 3557              	.LCFI164:
 3558              		.cfi_def_cfa_offset 16
 3559 0004 00AF     		add	r7, sp, #0
 3560              	.LCFI165:
 3561              		.cfi_def_cfa_register 7
 3562 0006 7860     		str	r0, [r7, #4]
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
ARM GAS  /tmp/ccNHJhAL.s 			page 94


1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3563              		.loc 1 1795 0
 3564 0008 00BF     		nop
 3565 000a 0C37     		adds	r7, r7, #12
 3566              	.LCFI166:
 3567              		.cfi_def_cfa_offset 4
 3568 000c BD46     		mov	sp, r7
 3569              	.LCFI167:
 3570              		.cfi_def_cfa_register 13
 3571              		@ sp needed
 3572 000e 80BC     		pop	{r7}
 3573              	.LCFI168:
 3574              		.cfi_restore 7
 3575              		.cfi_def_cfa_offset 0
 3576 0010 7047     		bx	lr
 3577              		.cfi_endproc
 3578              	.LFE96:
 3580              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3581              		.align	1
 3582              		.global	HAL_LIN_SendBreak
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3586              		.fpu softvfp
 3588              	HAL_LIN_SendBreak:
 3589              	.LFB97:
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions 
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions 
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim   
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================  
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode. 
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/ccNHJhAL.s 			page 95


1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3590              		.loc 1 1827 0
 3591              		.cfi_startproc
 3592              		@ args = 0, pretend = 0, frame = 8
 3593              		@ frame_needed = 1, uses_anonymous_args = 0
 3594              		@ link register save eliminated.
 3595 0000 80B4     		push	{r7}
 3596              	.LCFI169:
 3597              		.cfi_def_cfa_offset 4
 3598              		.cfi_offset 7, -4
 3599 0002 83B0     		sub	sp, sp, #12
 3600              	.LCFI170:
 3601              		.cfi_def_cfa_offset 16
 3602 0004 00AF     		add	r7, sp, #0
 3603              	.LCFI171:
 3604              		.cfi_def_cfa_register 7
 3605 0006 7860     		str	r0, [r7, #4]
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 3606              		.loc 1 1832 0
 3607 0008 7B68     		ldr	r3, [r7, #4]
 3608 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3609 000e 012B     		cmp	r3, #1
 3610 0010 01D1     		bne	.L167
 3611              		.loc 1 1832 0 is_stmt 0 discriminator 1
 3612 0012 0223     		movs	r3, #2
 3613 0014 18E0     		b	.L168
 3614              	.L167:
 3615              		.loc 1 1832 0 discriminator 2
 3616 0016 7B68     		ldr	r3, [r7, #4]
 3617 0018 0122     		movs	r2, #1
 3618 001a 83F83820 		strb	r2, [r3, #56]
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3619              		.loc 1 1834 0 is_stmt 1 discriminator 2
 3620 001e 7B68     		ldr	r3, [r7, #4]
 3621 0020 2422     		movs	r2, #36
 3622 0022 83F83920 		strb	r2, [r3, #57]
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 3623              		.loc 1 1837 0 discriminator 2
 3624 0026 7B68     		ldr	r3, [r7, #4]
 3625 0028 1B68     		ldr	r3, [r3]
 3626 002a DA68     		ldr	r2, [r3, #12]
 3627 002c 7B68     		ldr	r3, [r7, #4]
 3628 002e 1B68     		ldr	r3, [r3]
 3629 0030 42F00102 		orr	r2, r2, #1
 3630 0034 DA60     		str	r2, [r3, #12]
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3631              		.loc 1 1839 0 discriminator 2
 3632 0036 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 96


 3633 0038 2022     		movs	r2, #32
 3634 003a 83F83920 		strb	r2, [r3, #57]
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3635              		.loc 1 1842 0 discriminator 2
 3636 003e 7B68     		ldr	r3, [r7, #4]
 3637 0040 0022     		movs	r2, #0
 3638 0042 83F83820 		strb	r2, [r3, #56]
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK; 
 3639              		.loc 1 1844 0 discriminator 2
 3640 0046 0023     		movs	r3, #0
 3641              	.L168:
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3642              		.loc 1 1845 0
 3643 0048 1846     		mov	r0, r3
 3644 004a 0C37     		adds	r7, r7, #12
 3645              	.LCFI172:
 3646              		.cfi_def_cfa_offset 4
 3647 004c BD46     		mov	sp, r7
 3648              	.LCFI173:
 3649              		.cfi_def_cfa_register 13
 3650              		@ sp needed
 3651 004e 80BC     		pop	{r7}
 3652              	.LCFI174:
 3653              		.cfi_restore 7
 3654              		.cfi_def_cfa_offset 0
 3655 0050 7047     		bx	lr
 3656              		.cfi_endproc
 3657              	.LFE97:
 3659              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3660              		.align	1
 3661              		.global	HAL_MultiProcessor_EnterMuteMode
 3662              		.syntax unified
 3663              		.thumb
 3664              		.thumb_func
 3665              		.fpu softvfp
 3667              	HAL_MultiProcessor_EnterMuteMode:
 3668              	.LFB98:
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode. 
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3669              		.loc 1 1854 0
 3670              		.cfi_startproc
 3671              		@ args = 0, pretend = 0, frame = 8
 3672              		@ frame_needed = 1, uses_anonymous_args = 0
 3673              		@ link register save eliminated.
 3674 0000 80B4     		push	{r7}
 3675              	.LCFI175:
 3676              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccNHJhAL.s 			page 97


 3677              		.cfi_offset 7, -4
 3678 0002 83B0     		sub	sp, sp, #12
 3679              	.LCFI176:
 3680              		.cfi_def_cfa_offset 16
 3681 0004 00AF     		add	r7, sp, #0
 3682              	.LCFI177:
 3683              		.cfi_def_cfa_register 7
 3684 0006 7860     		str	r0, [r7, #4]
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 3685              		.loc 1 1859 0
 3686 0008 7B68     		ldr	r3, [r7, #4]
 3687 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3688 000e 012B     		cmp	r3, #1
 3689 0010 01D1     		bne	.L170
 3690              		.loc 1 1859 0 is_stmt 0 discriminator 1
 3691 0012 0223     		movs	r3, #2
 3692 0014 18E0     		b	.L171
 3693              	.L170:
 3694              		.loc 1 1859 0 discriminator 2
 3695 0016 7B68     		ldr	r3, [r7, #4]
 3696 0018 0122     		movs	r2, #1
 3697 001a 83F83820 		strb	r2, [r3, #56]
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3698              		.loc 1 1861 0 is_stmt 1 discriminator 2
 3699 001e 7B68     		ldr	r3, [r7, #4]
 3700 0020 2422     		movs	r2, #36
 3701 0022 83F83920 		strb	r2, [r3, #57]
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3702              		.loc 1 1864 0 discriminator 2
 3703 0026 7B68     		ldr	r3, [r7, #4]
 3704 0028 1B68     		ldr	r3, [r3]
 3705 002a DA68     		ldr	r2, [r3, #12]
 3706 002c 7B68     		ldr	r3, [r7, #4]
 3707 002e 1B68     		ldr	r3, [r3]
 3708 0030 42F00202 		orr	r2, r2, #2
 3709 0034 DA60     		str	r2, [r3, #12]
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3710              		.loc 1 1866 0 discriminator 2
 3711 0036 7B68     		ldr	r3, [r7, #4]
 3712 0038 2022     		movs	r2, #32
 3713 003a 83F83920 		strb	r2, [r3, #57]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3714              		.loc 1 1869 0 discriminator 2
 3715 003e 7B68     		ldr	r3, [r7, #4]
 3716 0040 0022     		movs	r2, #0
 3717 0042 83F83820 		strb	r2, [r3, #56]
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
ARM GAS  /tmp/ccNHJhAL.s 			page 98


1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK; 
 3718              		.loc 1 1871 0 discriminator 2
 3719 0046 0023     		movs	r3, #0
 3720              	.L171:
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3721              		.loc 1 1872 0
 3722 0048 1846     		mov	r0, r3
 3723 004a 0C37     		adds	r7, r7, #12
 3724              	.LCFI178:
 3725              		.cfi_def_cfa_offset 4
 3726 004c BD46     		mov	sp, r7
 3727              	.LCFI179:
 3728              		.cfi_def_cfa_register 13
 3729              		@ sp needed
 3730 004e 80BC     		pop	{r7}
 3731              	.LCFI180:
 3732              		.cfi_restore 7
 3733              		.cfi_def_cfa_offset 0
 3734 0050 7047     		bx	lr
 3735              		.cfi_endproc
 3736              	.LFE98:
 3738              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 3739              		.align	1
 3740              		.global	HAL_MultiProcessor_ExitMuteMode
 3741              		.syntax unified
 3742              		.thumb
 3743              		.thumb_func
 3744              		.fpu softvfp
 3746              	HAL_MultiProcessor_ExitMuteMode:
 3747              	.LFB99:
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software. 
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3748              		.loc 1 1881 0
 3749              		.cfi_startproc
 3750              		@ args = 0, pretend = 0, frame = 8
 3751              		@ frame_needed = 1, uses_anonymous_args = 0
 3752              		@ link register save eliminated.
 3753 0000 80B4     		push	{r7}
 3754              	.LCFI181:
 3755              		.cfi_def_cfa_offset 4
 3756              		.cfi_offset 7, -4
 3757 0002 83B0     		sub	sp, sp, #12
 3758              	.LCFI182:
 3759              		.cfi_def_cfa_offset 16
 3760 0004 00AF     		add	r7, sp, #0
 3761              	.LCFI183:
 3762              		.cfi_def_cfa_register 7
 3763 0006 7860     		str	r0, [r7, #4]
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
ARM GAS  /tmp/ccNHJhAL.s 			page 99


1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 3764              		.loc 1 1886 0
 3765 0008 7B68     		ldr	r3, [r7, #4]
 3766 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3767 000e 012B     		cmp	r3, #1
 3768 0010 01D1     		bne	.L173
 3769              		.loc 1 1886 0 is_stmt 0 discriminator 1
 3770 0012 0223     		movs	r3, #2
 3771 0014 18E0     		b	.L174
 3772              	.L173:
 3773              		.loc 1 1886 0 discriminator 2
 3774 0016 7B68     		ldr	r3, [r7, #4]
 3775 0018 0122     		movs	r2, #1
 3776 001a 83F83820 		strb	r2, [r3, #56]
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3777              		.loc 1 1888 0 is_stmt 1 discriminator 2
 3778 001e 7B68     		ldr	r3, [r7, #4]
 3779 0020 2422     		movs	r2, #36
 3780 0022 83F83920 		strb	r2, [r3, #57]
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3781              		.loc 1 1891 0 discriminator 2
 3782 0026 7B68     		ldr	r3, [r7, #4]
 3783 0028 1B68     		ldr	r3, [r3]
 3784 002a DA68     		ldr	r2, [r3, #12]
 3785 002c 7B68     		ldr	r3, [r7, #4]
 3786 002e 1B68     		ldr	r3, [r3]
 3787 0030 22F00202 		bic	r2, r2, #2
 3788 0034 DA60     		str	r2, [r3, #12]
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3789              		.loc 1 1893 0 discriminator 2
 3790 0036 7B68     		ldr	r3, [r7, #4]
 3791 0038 2022     		movs	r2, #32
 3792 003a 83F83920 		strb	r2, [r3, #57]
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3793              		.loc 1 1896 0 discriminator 2
 3794 003e 7B68     		ldr	r3, [r7, #4]
 3795 0040 0022     		movs	r2, #0
 3796 0042 83F83820 		strb	r2, [r3, #56]
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK; 
 3797              		.loc 1 1898 0 discriminator 2
 3798 0046 0023     		movs	r3, #0
 3799              	.L174:
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3800              		.loc 1 1899 0
 3801 0048 1846     		mov	r0, r3
 3802 004a 0C37     		adds	r7, r7, #12
 3803              	.LCFI184:
 3804              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccNHJhAL.s 			page 100


 3805 004c BD46     		mov	sp, r7
 3806              	.LCFI185:
 3807              		.cfi_def_cfa_register 13
 3808              		@ sp needed
 3809 004e 80BC     		pop	{r7}
 3810              	.LCFI186:
 3811              		.cfi_restore 7
 3812              		.cfi_def_cfa_offset 0
 3813 0050 7047     		bx	lr
 3814              		.cfi_endproc
 3815              	.LFE99:
 3817              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3818              		.align	1
 3819              		.global	HAL_HalfDuplex_EnableTransmitter
 3820              		.syntax unified
 3821              		.thumb
 3822              		.thumb_func
 3823              		.fpu softvfp
 3825              	HAL_HalfDuplex_EnableTransmitter:
 3826              	.LFB100:
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3827              		.loc 1 1908 0
 3828              		.cfi_startproc
 3829              		@ args = 0, pretend = 0, frame = 16
 3830              		@ frame_needed = 1, uses_anonymous_args = 0
 3831              		@ link register save eliminated.
 3832 0000 80B4     		push	{r7}
 3833              	.LCFI187:
 3834              		.cfi_def_cfa_offset 4
 3835              		.cfi_offset 7, -4
 3836 0002 85B0     		sub	sp, sp, #20
 3837              	.LCFI188:
 3838              		.cfi_def_cfa_offset 24
 3839 0004 00AF     		add	r7, sp, #0
 3840              	.LCFI189:
 3841              		.cfi_def_cfa_register 7
 3842 0006 7860     		str	r0, [r7, #4]
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3843              		.loc 1 1909 0
 3844 0008 0023     		movs	r3, #0
 3845 000a FB60     		str	r3, [r7, #12]
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 3846              		.loc 1 1912 0
 3847 000c 7B68     		ldr	r3, [r7, #4]
 3848 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3849 0012 012B     		cmp	r3, #1
 3850 0014 01D1     		bne	.L176
ARM GAS  /tmp/ccNHJhAL.s 			page 101


 3851              		.loc 1 1912 0 is_stmt 0 discriminator 1
 3852 0016 0223     		movs	r3, #2
 3853 0018 20E0     		b	.L177
 3854              	.L176:
 3855              		.loc 1 1912 0 discriminator 2
 3856 001a 7B68     		ldr	r3, [r7, #4]
 3857 001c 0122     		movs	r2, #1
 3858 001e 83F83820 		strb	r2, [r3, #56]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3859              		.loc 1 1914 0 is_stmt 1 discriminator 2
 3860 0022 7B68     		ldr	r3, [r7, #4]
 3861 0024 2422     		movs	r2, #36
 3862 0026 83F83920 		strb	r2, [r3, #57]
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3863              		.loc 1 1917 0 discriminator 2
 3864 002a 7B68     		ldr	r3, [r7, #4]
 3865 002c 1B68     		ldr	r3, [r3]
 3866 002e DB68     		ldr	r3, [r3, #12]
 3867 0030 FB60     		str	r3, [r7, #12]
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3868              		.loc 1 1920 0 discriminator 2
 3869 0032 FB68     		ldr	r3, [r7, #12]
 3870 0034 23F00C03 		bic	r3, r3, #12
 3871 0038 FB60     		str	r3, [r7, #12]
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 3872              		.loc 1 1923 0 discriminator 2
 3873 003a FB68     		ldr	r3, [r7, #12]
 3874 003c 43F00803 		orr	r3, r3, #8
 3875 0040 FB60     		str	r3, [r7, #12]
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3876              		.loc 1 1926 0 discriminator 2
 3877 0042 7B68     		ldr	r3, [r7, #4]
 3878 0044 1B68     		ldr	r3, [r3]
 3879 0046 FA68     		ldr	r2, [r7, #12]
 3880 0048 DA60     		str	r2, [r3, #12]
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3881              		.loc 1 1928 0 discriminator 2
 3882 004a 7B68     		ldr	r3, [r7, #4]
 3883 004c 2022     		movs	r2, #32
 3884 004e 83F83920 		strb	r2, [r3, #57]
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3885              		.loc 1 1931 0 discriminator 2
 3886 0052 7B68     		ldr	r3, [r7, #4]
 3887 0054 0022     		movs	r2, #0
 3888 0056 83F83820 		strb	r2, [r3, #56]
ARM GAS  /tmp/ccNHJhAL.s 			page 102


1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK; 
 3889              		.loc 1 1933 0 discriminator 2
 3890 005a 0023     		movs	r3, #0
 3891              	.L177:
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3892              		.loc 1 1934 0
 3893 005c 1846     		mov	r0, r3
 3894 005e 1437     		adds	r7, r7, #20
 3895              	.LCFI190:
 3896              		.cfi_def_cfa_offset 4
 3897 0060 BD46     		mov	sp, r7
 3898              	.LCFI191:
 3899              		.cfi_def_cfa_register 13
 3900              		@ sp needed
 3901 0062 80BC     		pop	{r7}
 3902              	.LCFI192:
 3903              		.cfi_restore 7
 3904              		.cfi_def_cfa_offset 0
 3905 0064 7047     		bx	lr
 3906              		.cfi_endproc
 3907              	.LFE100:
 3909              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3910              		.align	1
 3911              		.global	HAL_HalfDuplex_EnableReceiver
 3912              		.syntax unified
 3913              		.thumb
 3914              		.thumb_func
 3915              		.fpu softvfp
 3917              	HAL_HalfDuplex_EnableReceiver:
 3918              	.LFB101:
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3919              		.loc 1 1943 0
 3920              		.cfi_startproc
 3921              		@ args = 0, pretend = 0, frame = 16
 3922              		@ frame_needed = 1, uses_anonymous_args = 0
 3923              		@ link register save eliminated.
 3924 0000 80B4     		push	{r7}
 3925              	.LCFI193:
 3926              		.cfi_def_cfa_offset 4
 3927              		.cfi_offset 7, -4
 3928 0002 85B0     		sub	sp, sp, #20
 3929              	.LCFI194:
 3930              		.cfi_def_cfa_offset 24
 3931 0004 00AF     		add	r7, sp, #0
 3932              	.LCFI195:
 3933              		.cfi_def_cfa_register 7
 3934 0006 7860     		str	r0, [r7, #4]
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
ARM GAS  /tmp/ccNHJhAL.s 			page 103


 3935              		.loc 1 1944 0
 3936 0008 0023     		movs	r3, #0
 3937 000a FB60     		str	r3, [r7, #12]
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 3938              		.loc 1 1947 0
 3939 000c 7B68     		ldr	r3, [r7, #4]
 3940 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3941 0012 012B     		cmp	r3, #1
 3942 0014 01D1     		bne	.L179
 3943              		.loc 1 1947 0 is_stmt 0 discriminator 1
 3944 0016 0223     		movs	r3, #2
 3945 0018 20E0     		b	.L180
 3946              	.L179:
 3947              		.loc 1 1947 0 discriminator 2
 3948 001a 7B68     		ldr	r3, [r7, #4]
 3949 001c 0122     		movs	r2, #1
 3950 001e 83F83820 		strb	r2, [r3, #56]
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3951              		.loc 1 1949 0 is_stmt 1 discriminator 2
 3952 0022 7B68     		ldr	r3, [r7, #4]
 3953 0024 2422     		movs	r2, #36
 3954 0026 83F83920 		strb	r2, [r3, #57]
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3955              		.loc 1 1952 0 discriminator 2
 3956 002a 7B68     		ldr	r3, [r7, #4]
 3957 002c 1B68     		ldr	r3, [r3]
 3958 002e DB68     		ldr	r3, [r3, #12]
 3959 0030 FB60     		str	r3, [r7, #12]
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3960              		.loc 1 1955 0 discriminator 2
 3961 0032 FB68     		ldr	r3, [r7, #12]
 3962 0034 23F00C03 		bic	r3, r3, #12
 3963 0038 FB60     		str	r3, [r7, #12]
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 3964              		.loc 1 1958 0 discriminator 2
 3965 003a FB68     		ldr	r3, [r7, #12]
 3966 003c 43F00403 		orr	r3, r3, #4
 3967 0040 FB60     		str	r3, [r7, #12]
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3968              		.loc 1 1961 0 discriminator 2
 3969 0042 7B68     		ldr	r3, [r7, #4]
 3970 0044 1B68     		ldr	r3, [r3]
 3971 0046 FA68     		ldr	r2, [r7, #12]
 3972 0048 DA60     		str	r2, [r3, #12]
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccNHJhAL.s 			page 104


 3973              		.loc 1 1963 0 discriminator 2
 3974 004a 7B68     		ldr	r3, [r7, #4]
 3975 004c 2022     		movs	r2, #32
 3976 004e 83F83920 		strb	r2, [r3, #57]
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3977              		.loc 1 1966 0 discriminator 2
 3978 0052 7B68     		ldr	r3, [r7, #4]
 3979 0054 0022     		movs	r2, #0
 3980 0056 83F83820 		strb	r2, [r3, #56]
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK; 
 3981              		.loc 1 1968 0 discriminator 2
 3982 005a 0023     		movs	r3, #0
 3983              	.L180:
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3984              		.loc 1 1969 0
 3985 005c 1846     		mov	r0, r3
 3986 005e 1437     		adds	r7, r7, #20
 3987              	.LCFI196:
 3988              		.cfi_def_cfa_offset 4
 3989 0060 BD46     		mov	sp, r7
 3990              	.LCFI197:
 3991              		.cfi_def_cfa_register 13
 3992              		@ sp needed
 3993 0062 80BC     		pop	{r7}
 3994              	.LCFI198:
 3995              		.cfi_restore 7
 3996              		.cfi_def_cfa_offset 0
 3997 0064 7047     		bx	lr
 3998              		.cfi_endproc
 3999              	.LFE101:
 4001              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4002              		.align	1
 4003              		.global	HAL_UART_GetState
 4004              		.syntax unified
 4005              		.thumb
 4006              		.thumb_func
 4007              		.fpu softvfp
 4009              	HAL_UART_GetState:
 4010              	.LFB102:
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions 
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions 
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim   
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================  
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication 
ARM GAS  /tmp/ccNHJhAL.s 			page 105


1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication. 
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4011              		.loc 1 2000 0
 4012              		.cfi_startproc
 4013              		@ args = 0, pretend = 0, frame = 16
 4014              		@ frame_needed = 1, uses_anonymous_args = 0
 4015              		@ link register save eliminated.
 4016 0000 80B4     		push	{r7}
 4017              	.LCFI199:
 4018              		.cfi_def_cfa_offset 4
 4019              		.cfi_offset 7, -4
 4020 0002 85B0     		sub	sp, sp, #20
 4021              	.LCFI200:
 4022              		.cfi_def_cfa_offset 24
 4023 0004 00AF     		add	r7, sp, #0
 4024              	.LCFI201:
 4025              		.cfi_def_cfa_register 7
 4026 0006 7860     		str	r0, [r7, #4]
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 4027              		.loc 1 2001 0
 4028 0008 0023     		movs	r3, #0
 4029 000a FB60     		str	r3, [r7, #12]
 4030 000c 0023     		movs	r3, #0
 4031 000e BB60     		str	r3, [r7, #8]
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 4032              		.loc 1 2002 0
 4033 0010 7B68     		ldr	r3, [r7, #4]
 4034 0012 93F83930 		ldrb	r3, [r3, #57]
 4035 0016 DBB2     		uxtb	r3, r3
 4036 0018 FB60     		str	r3, [r7, #12]
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 4037              		.loc 1 2003 0
 4038 001a 7B68     		ldr	r3, [r7, #4]
 4039 001c 93F83A30 		ldrb	r3, [r3, #58]
 4040 0020 DBB2     		uxtb	r3, r3
 4041 0022 BB60     		str	r3, [r7, #8]
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4042              		.loc 1 2005 0
 4043 0024 FB68     		ldr	r3, [r7, #12]
 4044 0026 DAB2     		uxtb	r2, r3
 4045 0028 BB68     		ldr	r3, [r7, #8]
 4046 002a DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccNHJhAL.s 			page 106


 4047 002c 1343     		orrs	r3, r3, r2
 4048 002e DBB2     		uxtb	r3, r3
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4049              		.loc 1 2006 0
 4050 0030 1846     		mov	r0, r3
 4051 0032 1437     		adds	r7, r7, #20
 4052              	.LCFI202:
 4053              		.cfi_def_cfa_offset 4
 4054 0034 BD46     		mov	sp, r7
 4055              	.LCFI203:
 4056              		.cfi_def_cfa_register 13
 4057              		@ sp needed
 4058 0036 80BC     		pop	{r7}
 4059              	.LCFI204:
 4060              		.cfi_restore 7
 4061              		.cfi_def_cfa_offset 0
 4062 0038 7047     		bx	lr
 4063              		.cfi_endproc
 4064              	.LFE102:
 4066              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4067              		.align	1
 4068              		.global	HAL_UART_GetError
 4069              		.syntax unified
 4070              		.thumb
 4071              		.thumb_func
 4072              		.fpu softvfp
 4074              	HAL_UART_GetError:
 4075              	.LFB103:
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart : pointer to a UART_HandleTypeDef structure that contains
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *              the configuration information for the specified UART.
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4076              		.loc 1 2015 0
 4077              		.cfi_startproc
 4078              		@ args = 0, pretend = 0, frame = 8
 4079              		@ frame_needed = 1, uses_anonymous_args = 0
 4080              		@ link register save eliminated.
 4081 0000 80B4     		push	{r7}
 4082              	.LCFI205:
 4083              		.cfi_def_cfa_offset 4
 4084              		.cfi_offset 7, -4
 4085 0002 83B0     		sub	sp, sp, #12
 4086              	.LCFI206:
 4087              		.cfi_def_cfa_offset 16
 4088 0004 00AF     		add	r7, sp, #0
 4089              	.LCFI207:
 4090              		.cfi_def_cfa_register 7
 4091 0006 7860     		str	r0, [r7, #4]
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 4092              		.loc 1 2016 0
 4093 0008 7B68     		ldr	r3, [r7, #4]
 4094 000a DB6B     		ldr	r3, [r3, #60]
ARM GAS  /tmp/ccNHJhAL.s 			page 107


2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4095              		.loc 1 2017 0
 4096 000c 1846     		mov	r0, r3
 4097 000e 0C37     		adds	r7, r7, #12
 4098              	.LCFI208:
 4099              		.cfi_def_cfa_offset 4
 4100 0010 BD46     		mov	sp, r7
 4101              	.LCFI209:
 4102              		.cfi_def_cfa_register 13
 4103              		@ sp needed
 4104 0012 80BC     		pop	{r7}
 4105              	.LCFI210:
 4106              		.cfi_restore 7
 4107              		.cfi_def_cfa_offset 0
 4108 0014 7047     		bx	lr
 4109              		.cfi_endproc
 4110              	.LFE103:
 4112              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4113              		.align	1
 4114              		.syntax unified
 4115              		.thumb
 4116              		.thumb_func
 4117              		.fpu softvfp
 4119              	UART_DMATransmitCplt:
 4120              	.LFB104:
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback. 
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma: DMA handle
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4121              		.loc 1 2029 0
 4122              		.cfi_startproc
 4123              		@ args = 0, pretend = 0, frame = 16
 4124              		@ frame_needed = 1, uses_anonymous_args = 0
 4125 0000 80B5     		push	{r7, lr}
 4126              	.LCFI211:
 4127              		.cfi_def_cfa_offset 8
 4128              		.cfi_offset 7, -8
 4129              		.cfi_offset 14, -4
 4130 0002 84B0     		sub	sp, sp, #16
 4131              	.LCFI212:
 4132              		.cfi_def_cfa_offset 24
 4133 0004 00AF     		add	r7, sp, #0
 4134              	.LCFI213:
 4135              		.cfi_def_cfa_register 7
 4136 0006 7860     		str	r0, [r7, #4]
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4137              		.loc 1 2030 0
 4138 0008 7B68     		ldr	r3, [r7, #4]
 4139 000a 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccNHJhAL.s 			page 108


 4140 000c FB60     		str	r3, [r7, #12]
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 4141              		.loc 1 2032 0
 4142 000e 7B68     		ldr	r3, [r7, #4]
 4143 0010 1B68     		ldr	r3, [r3]
 4144 0012 1B68     		ldr	r3, [r3]
 4145 0014 03F02003 		and	r3, r3, #32
 4146 0018 002B     		cmp	r3, #0
 4147 001a 13D1     		bne	.L186
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4148              		.loc 1 2034 0
 4149 001c FB68     		ldr	r3, [r7, #12]
 4150 001e 0022     		movs	r2, #0
 4151 0020 DA84     		strh	r2, [r3, #38]	@ movhi
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4152              		.loc 1 2038 0
 4153 0022 FB68     		ldr	r3, [r7, #12]
 4154 0024 1B68     		ldr	r3, [r3]
 4155 0026 5A69     		ldr	r2, [r3, #20]
 4156 0028 FB68     		ldr	r3, [r7, #12]
 4157 002a 1B68     		ldr	r3, [r3]
 4158 002c 22F08002 		bic	r2, r2, #128
 4159 0030 5A61     		str	r2, [r3, #20]
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 4160              		.loc 1 2041 0
 4161 0032 FB68     		ldr	r3, [r7, #12]
 4162 0034 1B68     		ldr	r3, [r3]
 4163 0036 DA68     		ldr	r2, [r3, #12]
 4164 0038 FB68     		ldr	r3, [r7, #12]
 4165 003a 1B68     		ldr	r3, [r3]
 4166 003c 42F04002 		orr	r2, r2, #64
 4167 0040 DA60     		str	r2, [r3, #12]
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4168              		.loc 1 2049 0
 4169 0042 02E0     		b	.L188
 4170              	.L186:
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 4171              		.loc 1 2047 0
 4172 0044 F868     		ldr	r0, [r7, #12]
 4173 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4174              	.L188:
 4175              		.loc 1 2049 0
 4176 004a 00BF     		nop
ARM GAS  /tmp/ccNHJhAL.s 			page 109


 4177 004c 1037     		adds	r7, r7, #16
 4178              	.LCFI214:
 4179              		.cfi_def_cfa_offset 8
 4180 004e BD46     		mov	sp, r7
 4181              	.LCFI215:
 4182              		.cfi_def_cfa_register 13
 4183              		@ sp needed
 4184 0050 80BD     		pop	{r7, pc}
 4185              		.cfi_endproc
 4186              	.LFE104:
 4188              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 4189              		.align	1
 4190              		.syntax unified
 4191              		.thumb
 4192              		.thumb_func
 4193              		.fpu softvfp
 4195              	UART_DMATxHalfCplt:
 4196              	.LFB105:
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback 
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4197              		.loc 1 2058 0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 16
 4200              		@ frame_needed = 1, uses_anonymous_args = 0
 4201 0000 80B5     		push	{r7, lr}
 4202              	.LCFI216:
 4203              		.cfi_def_cfa_offset 8
 4204              		.cfi_offset 7, -8
 4205              		.cfi_offset 14, -4
 4206 0002 84B0     		sub	sp, sp, #16
 4207              	.LCFI217:
 4208              		.cfi_def_cfa_offset 24
 4209 0004 00AF     		add	r7, sp, #0
 4210              	.LCFI218:
 4211              		.cfi_def_cfa_register 7
 4212 0006 7860     		str	r0, [r7, #4]
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4213              		.loc 1 2059 0
 4214 0008 7B68     		ldr	r3, [r7, #4]
 4215 000a 5B6A     		ldr	r3, [r3, #36]
 4216 000c FB60     		str	r3, [r7, #12]
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 4217              		.loc 1 2061 0
 4218 000e F868     		ldr	r0, [r7, #12]
 4219 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4220              		.loc 1 2062 0
 4221 0014 00BF     		nop
 4222 0016 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccNHJhAL.s 			page 110


 4223              	.LCFI219:
 4224              		.cfi_def_cfa_offset 8
 4225 0018 BD46     		mov	sp, r7
 4226              	.LCFI220:
 4227              		.cfi_def_cfa_register 13
 4228              		@ sp needed
 4229 001a 80BD     		pop	{r7, pc}
 4230              		.cfi_endproc
 4231              	.LFE105:
 4233              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 4234              		.align	1
 4235              		.syntax unified
 4236              		.thumb
 4237              		.thumb_func
 4238              		.fpu softvfp
 4240              	UART_DMAReceiveCplt:
 4241              	.LFB106:
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback. 
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma: DMA handle
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4242              		.loc 1 2070 0
 4243              		.cfi_startproc
 4244              		@ args = 0, pretend = 0, frame = 16
 4245              		@ frame_needed = 1, uses_anonymous_args = 0
 4246 0000 80B5     		push	{r7, lr}
 4247              	.LCFI221:
 4248              		.cfi_def_cfa_offset 8
 4249              		.cfi_offset 7, -8
 4250              		.cfi_offset 14, -4
 4251 0002 84B0     		sub	sp, sp, #16
 4252              	.LCFI222:
 4253              		.cfi_def_cfa_offset 24
 4254 0004 00AF     		add	r7, sp, #0
 4255              	.LCFI223:
 4256              		.cfi_def_cfa_register 7
 4257 0006 7860     		str	r0, [r7, #4]
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4258              		.loc 1 2071 0
 4259 0008 7B68     		ldr	r3, [r7, #4]
 4260 000a 5B6A     		ldr	r3, [r3, #36]
 4261 000c FB60     		str	r3, [r7, #12]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 4262              		.loc 1 2073 0
 4263 000e 7B68     		ldr	r3, [r7, #4]
 4264 0010 1B68     		ldr	r3, [r3]
 4265 0012 1B68     		ldr	r3, [r3]
 4266 0014 03F02003 		and	r3, r3, #32
 4267 0018 002B     		cmp	r3, #0
 4268 001a 1ED1     		bne	.L191
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
ARM GAS  /tmp/ccNHJhAL.s 			page 111


 4269              		.loc 1 2075 0
 4270 001c FB68     		ldr	r3, [r7, #12]
 4271 001e 0022     		movs	r2, #0
 4272 0020 DA85     		strh	r2, [r3, #46]	@ movhi
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 4273              		.loc 1 2078 0
 4274 0022 FB68     		ldr	r3, [r7, #12]
 4275 0024 1B68     		ldr	r3, [r3]
 4276 0026 DA68     		ldr	r2, [r3, #12]
 4277 0028 FB68     		ldr	r3, [r7, #12]
 4278 002a 1B68     		ldr	r3, [r3]
 4279 002c 22F48072 		bic	r2, r2, #256
 4280 0030 DA60     		str	r2, [r3, #12]
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4281              		.loc 1 2079 0
 4282 0032 FB68     		ldr	r3, [r7, #12]
 4283 0034 1B68     		ldr	r3, [r3]
 4284 0036 5A69     		ldr	r2, [r3, #20]
 4285 0038 FB68     		ldr	r3, [r7, #12]
 4286 003a 1B68     		ldr	r3, [r3]
 4287 003c 22F00102 		bic	r2, r2, #1
 4288 0040 5A61     		str	r2, [r3, #20]
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4289              		.loc 1 2083 0
 4290 0042 FB68     		ldr	r3, [r7, #12]
 4291 0044 1B68     		ldr	r3, [r3]
 4292 0046 5A69     		ldr	r2, [r3, #20]
 4293 0048 FB68     		ldr	r3, [r7, #12]
 4294 004a 1B68     		ldr	r3, [r3]
 4295 004c 22F04002 		bic	r2, r2, #64
 4296 0050 5A61     		str	r2, [r3, #20]
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4297              		.loc 1 2086 0
 4298 0052 FB68     		ldr	r3, [r7, #12]
 4299 0054 2022     		movs	r2, #32
 4300 0056 83F83A20 		strb	r2, [r3, #58]
 4301              	.L191:
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 4302              		.loc 1 2088 0
 4303 005a F868     		ldr	r0, [r7, #12]
 4304 005c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4305              		.loc 1 2089 0
 4306 0060 00BF     		nop
 4307 0062 1037     		adds	r7, r7, #16
 4308              	.LCFI224:
 4309              		.cfi_def_cfa_offset 8
 4310 0064 BD46     		mov	sp, r7
 4311              	.LCFI225:
ARM GAS  /tmp/ccNHJhAL.s 			page 112


 4312              		.cfi_def_cfa_register 13
 4313              		@ sp needed
 4314 0066 80BD     		pop	{r7, pc}
 4315              		.cfi_endproc
 4316              	.LFE106:
 4318              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 4319              		.align	1
 4320              		.syntax unified
 4321              		.thumb
 4322              		.thumb_func
 4323              		.fpu softvfp
 4325              	UART_DMARxHalfCplt:
 4326              	.LFB107:
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback 
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4327              		.loc 1 2098 0
 4328              		.cfi_startproc
 4329              		@ args = 0, pretend = 0, frame = 16
 4330              		@ frame_needed = 1, uses_anonymous_args = 0
 4331 0000 80B5     		push	{r7, lr}
 4332              	.LCFI226:
 4333              		.cfi_def_cfa_offset 8
 4334              		.cfi_offset 7, -8
 4335              		.cfi_offset 14, -4
 4336 0002 84B0     		sub	sp, sp, #16
 4337              	.LCFI227:
 4338              		.cfi_def_cfa_offset 24
 4339 0004 00AF     		add	r7, sp, #0
 4340              	.LCFI228:
 4341              		.cfi_def_cfa_register 7
 4342 0006 7860     		str	r0, [r7, #4]
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4343              		.loc 1 2099 0
 4344 0008 7B68     		ldr	r3, [r7, #4]
 4345 000a 5B6A     		ldr	r3, [r3, #36]
 4346 000c FB60     		str	r3, [r7, #12]
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart); 
 4347              		.loc 1 2100 0
 4348 000e F868     		ldr	r0, [r7, #12]
 4349 0010 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4350              		.loc 1 2101 0
 4351 0014 00BF     		nop
 4352 0016 1037     		adds	r7, r7, #16
 4353              	.LCFI229:
 4354              		.cfi_def_cfa_offset 8
 4355 0018 BD46     		mov	sp, r7
 4356              	.LCFI230:
 4357              		.cfi_def_cfa_register 13
 4358              		@ sp needed
ARM GAS  /tmp/ccNHJhAL.s 			page 113


 4359 001a 80BD     		pop	{r7, pc}
 4360              		.cfi_endproc
 4361              	.LFE107:
 4363              		.section	.text.UART_DMAError,"ax",%progbits
 4364              		.align	1
 4365              		.syntax unified
 4366              		.thumb
 4367              		.thumb_func
 4368              		.fpu softvfp
 4370              	UART_DMAError:
 4371              	.LFB108:
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma: DMA handle
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4372              		.loc 1 2109 0
 4373              		.cfi_startproc
 4374              		@ args = 0, pretend = 0, frame = 16
 4375              		@ frame_needed = 1, uses_anonymous_args = 0
 4376 0000 80B5     		push	{r7, lr}
 4377              	.LCFI231:
 4378              		.cfi_def_cfa_offset 8
 4379              		.cfi_offset 7, -8
 4380              		.cfi_offset 14, -4
 4381 0002 84B0     		sub	sp, sp, #16
 4382              	.LCFI232:
 4383              		.cfi_def_cfa_offset 24
 4384 0004 00AF     		add	r7, sp, #0
 4385              	.LCFI233:
 4386              		.cfi_def_cfa_register 7
 4387 0006 7860     		str	r0, [r7, #4]
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 4388              		.loc 1 2110 0
 4389 0008 0023     		movs	r3, #0
 4390 000a FB60     		str	r3, [r7, #12]
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4391              		.loc 1 2111 0
 4392 000c 7B68     		ldr	r3, [r7, #4]
 4393 000e 5B6A     		ldr	r3, [r3, #36]
 4394 0010 BB60     		str	r3, [r7, #8]
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 4395              		.loc 1 2114 0
 4396 0012 BB68     		ldr	r3, [r7, #8]
 4397 0014 1B68     		ldr	r3, [r3]
 4398 0016 5B69     		ldr	r3, [r3, #20]
 4399 0018 03F08003 		and	r3, r3, #128
 4400 001c 002B     		cmp	r3, #0
 4401 001e 14BF     		ite	ne
 4402 0020 0123     		movne	r3, #1
 4403 0022 0023     		moveq	r3, #0
 4404 0024 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccNHJhAL.s 			page 114


 4405 0026 FB60     		str	r3, [r7, #12]
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 4406              		.loc 1 2115 0
 4407 0028 BB68     		ldr	r3, [r7, #8]
 4408 002a 93F83930 		ldrb	r3, [r3, #57]
 4409 002e DBB2     		uxtb	r3, r3
 4410 0030 212B     		cmp	r3, #33
 4411 0032 08D1     		bne	.L194
 4412              		.loc 1 2115 0 is_stmt 0 discriminator 1
 4413 0034 FB68     		ldr	r3, [r7, #12]
 4414 0036 002B     		cmp	r3, #0
 4415 0038 05D0     		beq	.L194
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4416              		.loc 1 2117 0 is_stmt 1
 4417 003a BB68     		ldr	r3, [r7, #8]
 4418 003c 0022     		movs	r2, #0
 4419 003e DA84     		strh	r2, [r3, #38]	@ movhi
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 4420              		.loc 1 2118 0
 4421 0040 B868     		ldr	r0, [r7, #8]
 4422 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 4423              	.L194:
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 4424              		.loc 1 2122 0
 4425 0046 BB68     		ldr	r3, [r7, #8]
 4426 0048 1B68     		ldr	r3, [r3]
 4427 004a 5B69     		ldr	r3, [r3, #20]
 4428 004c 03F04003 		and	r3, r3, #64
 4429 0050 002B     		cmp	r3, #0
 4430 0052 14BF     		ite	ne
 4431 0054 0123     		movne	r3, #1
 4432 0056 0023     		moveq	r3, #0
 4433 0058 DBB2     		uxtb	r3, r3
 4434 005a FB60     		str	r3, [r7, #12]
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 4435              		.loc 1 2123 0
 4436 005c BB68     		ldr	r3, [r7, #8]
 4437 005e 93F83A30 		ldrb	r3, [r3, #58]
 4438 0062 DBB2     		uxtb	r3, r3
 4439 0064 222B     		cmp	r3, #34
 4440 0066 08D1     		bne	.L195
 4441              		.loc 1 2123 0 is_stmt 0 discriminator 1
 4442 0068 FB68     		ldr	r3, [r7, #12]
 4443 006a 002B     		cmp	r3, #0
 4444 006c 05D0     		beq	.L195
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
 4445              		.loc 1 2125 0 is_stmt 1
 4446 006e BB68     		ldr	r3, [r7, #8]
 4447 0070 0022     		movs	r2, #0
 4448 0072 DA85     		strh	r2, [r3, #46]	@ movhi
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 4449              		.loc 1 2126 0
ARM GAS  /tmp/ccNHJhAL.s 			page 115


 4450 0074 B868     		ldr	r0, [r7, #8]
 4451 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 4452              	.L195:
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 4453              		.loc 1 2129 0
 4454 007a BB68     		ldr	r3, [r7, #8]
 4455 007c DB6B     		ldr	r3, [r3, #60]
 4456 007e 43F01002 		orr	r2, r3, #16
 4457 0082 BB68     		ldr	r3, [r7, #8]
 4458 0084 DA63     		str	r2, [r3, #60]
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4459              		.loc 1 2130 0
 4460 0086 B868     		ldr	r0, [r7, #8]
 4461 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4462              		.loc 1 2131 0
 4463 008c 00BF     		nop
 4464 008e 1037     		adds	r7, r7, #16
 4465              	.LCFI234:
 4466              		.cfi_def_cfa_offset 8
 4467 0090 BD46     		mov	sp, r7
 4468              	.LCFI235:
 4469              		.cfi_def_cfa_register 13
 4470              		@ sp needed
 4471 0092 80BD     		pop	{r7, pc}
 4472              		.cfi_endproc
 4473              	.LFE108:
 4475              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4476              		.align	1
 4477              		.syntax unified
 4478              		.thumb
 4479              		.thumb_func
 4480              		.fpu softvfp
 4482              	UART_WaitOnFlagUntilTimeout:
 4483              	.LFB109:
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag: specifies the UART flag to check.
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status: The new Flag status (SET or RESET).
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout: Timeout duration
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4484              		.loc 1 2144 0
 4485              		.cfi_startproc
 4486              		@ args = 4, pretend = 0, frame = 16
 4487              		@ frame_needed = 1, uses_anonymous_args = 0
 4488 0000 80B5     		push	{r7, lr}
 4489              	.LCFI236:
 4490              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNHJhAL.s 			page 116


 4491              		.cfi_offset 7, -8
 4492              		.cfi_offset 14, -4
 4493 0002 84B0     		sub	sp, sp, #16
 4494              	.LCFI237:
 4495              		.cfi_def_cfa_offset 24
 4496 0004 00AF     		add	r7, sp, #0
 4497              	.LCFI238:
 4498              		.cfi_def_cfa_register 7
 4499 0006 F860     		str	r0, [r7, #12]
 4500 0008 B960     		str	r1, [r7, #8]
 4501 000a 3B60     		str	r3, [r7]
 4502 000c 1346     		mov	r3, r2
 4503 000e FB71     		strb	r3, [r7, #7]
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 4504              		.loc 1 2146 0
 4505 0010 2CE0     		b	.L197
 4506              	.L200:
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(Timeout != HAL_MAX_DELAY)
 4507              		.loc 1 2149 0
 4508 0012 BB69     		ldr	r3, [r7, #24]
 4509 0014 B3F1FF3F 		cmp	r3, #-1
 4510 0018 28D0     		beq	.L197
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 4511              		.loc 1 2151 0
 4512 001a BB69     		ldr	r3, [r7, #24]
 4513 001c 002B     		cmp	r3, #0
 4514 001e 07D0     		beq	.L198
 4515              		.loc 1 2151 0 is_stmt 0 discriminator 1
 4516 0020 FFF7FEFF 		bl	HAL_GetTick
 4517 0024 0246     		mov	r2, r0
 4518 0026 3B68     		ldr	r3, [r7]
 4519 0028 D31A     		subs	r3, r2, r3
 4520 002a BA69     		ldr	r2, [r7, #24]
 4521 002c 9A42     		cmp	r2, r3
 4522 002e 1DD2     		bcs	.L197
 4523              	.L198:
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4524              		.loc 1 2154 0 is_stmt 1
 4525 0030 FB68     		ldr	r3, [r7, #12]
 4526 0032 1B68     		ldr	r3, [r3]
 4527 0034 DA68     		ldr	r2, [r3, #12]
 4528 0036 FB68     		ldr	r3, [r7, #12]
 4529 0038 1B68     		ldr	r3, [r3]
 4530 003a 22F4D072 		bic	r2, r2, #416
 4531 003e DA60     		str	r2, [r3, #12]
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4532              		.loc 1 2155 0
 4533 0040 FB68     		ldr	r3, [r7, #12]
 4534 0042 1B68     		ldr	r3, [r3]
 4535 0044 5A69     		ldr	r2, [r3, #20]
 4536 0046 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccNHJhAL.s 			page 117


 4537 0048 1B68     		ldr	r3, [r3]
 4538 004a 22F00102 		bic	r2, r2, #1
 4539 004e 5A61     		str	r2, [r3, #20]
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 4540              		.loc 1 2157 0
 4541 0050 FB68     		ldr	r3, [r7, #12]
 4542 0052 2022     		movs	r2, #32
 4543 0054 83F83920 		strb	r2, [r3, #57]
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4544              		.loc 1 2158 0
 4545 0058 FB68     		ldr	r3, [r7, #12]
 4546 005a 2022     		movs	r2, #32
 4547 005c 83F83A20 		strb	r2, [r3, #58]
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 4548              		.loc 1 2161 0
 4549 0060 FB68     		ldr	r3, [r7, #12]
 4550 0062 0022     		movs	r2, #0
 4551 0064 83F83820 		strb	r2, [r3, #56]
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 4552              		.loc 1 2163 0
 4553 0068 0323     		movs	r3, #3
 4554 006a 0FE0     		b	.L199
 4555              	.L197:
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 4556              		.loc 1 2146 0
 4557 006c FB68     		ldr	r3, [r7, #12]
 4558 006e 1B68     		ldr	r3, [r3]
 4559 0070 1A68     		ldr	r2, [r3]
 4560 0072 BB68     		ldr	r3, [r7, #8]
 4561 0074 1340     		ands	r3, r3, r2
 4562 0076 BA68     		ldr	r2, [r7, #8]
 4563 0078 9A42     		cmp	r2, r3
 4564 007a 0CBF     		ite	eq
 4565 007c 0123     		moveq	r3, #1
 4566 007e 0023     		movne	r3, #0
 4567 0080 DBB2     		uxtb	r3, r3
 4568 0082 1A46     		mov	r2, r3
 4569 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4570 0086 9A42     		cmp	r2, r3
 4571 0088 C3D0     		beq	.L200
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4572              		.loc 1 2168 0
 4573 008a 0023     		movs	r3, #0
 4574              	.L199:
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4575              		.loc 1 2169 0
 4576 008c 1846     		mov	r0, r3
 4577 008e 1037     		adds	r7, r7, #16
 4578              	.LCFI239:
ARM GAS  /tmp/ccNHJhAL.s 			page 118


 4579              		.cfi_def_cfa_offset 8
 4580 0090 BD46     		mov	sp, r7
 4581              	.LCFI240:
 4582              		.cfi_def_cfa_register 13
 4583              		@ sp needed
 4584 0092 80BD     		pop	{r7, pc}
 4585              		.cfi_endproc
 4586              	.LFE109:
 4588              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 4589              		.align	1
 4590              		.syntax unified
 4591              		.thumb
 4592              		.thumb_func
 4593              		.fpu softvfp
 4595              	UART_EndTxTransfer:
 4596              	.LFB110:
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: UART handle.
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4597              		.loc 1 2177 0
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 8
 4600              		@ frame_needed = 1, uses_anonymous_args = 0
 4601              		@ link register save eliminated.
 4602 0000 80B4     		push	{r7}
 4603              	.LCFI241:
 4604              		.cfi_def_cfa_offset 4
 4605              		.cfi_offset 7, -4
 4606 0002 83B0     		sub	sp, sp, #12
 4607              	.LCFI242:
 4608              		.cfi_def_cfa_offset 16
 4609 0004 00AF     		add	r7, sp, #0
 4610              	.LCFI243:
 4611              		.cfi_def_cfa_register 7
 4612 0006 7860     		str	r0, [r7, #4]
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4613              		.loc 1 2179 0
 4614 0008 7B68     		ldr	r3, [r7, #4]
 4615 000a 1B68     		ldr	r3, [r3]
 4616 000c DA68     		ldr	r2, [r3, #12]
 4617 000e 7B68     		ldr	r3, [r7, #4]
 4618 0010 1B68     		ldr	r3, [r3]
 4619 0012 22F0C002 		bic	r2, r2, #192
 4620 0016 DA60     		str	r2, [r3, #12]
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4621              		.loc 1 2182 0
 4622 0018 7B68     		ldr	r3, [r7, #4]
 4623 001a 2022     		movs	r2, #32
 4624 001c 83F83920 		strb	r2, [r3, #57]
ARM GAS  /tmp/ccNHJhAL.s 			page 119


2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4625              		.loc 1 2183 0
 4626 0020 00BF     		nop
 4627 0022 0C37     		adds	r7, r7, #12
 4628              	.LCFI244:
 4629              		.cfi_def_cfa_offset 4
 4630 0024 BD46     		mov	sp, r7
 4631              	.LCFI245:
 4632              		.cfi_def_cfa_register 13
 4633              		@ sp needed
 4634 0026 80BC     		pop	{r7}
 4635              	.LCFI246:
 4636              		.cfi_restore 7
 4637              		.cfi_def_cfa_offset 0
 4638 0028 7047     		bx	lr
 4639              		.cfi_endproc
 4640              	.LFE110:
 4642              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 4643              		.align	1
 4644              		.syntax unified
 4645              		.thumb
 4646              		.thumb_func
 4647              		.fpu softvfp
 4649              	UART_EndRxTransfer:
 4650              	.LFB111:
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: UART handle.
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4651              		.loc 1 2191 0
 4652              		.cfi_startproc
 4653              		@ args = 0, pretend = 0, frame = 8
 4654              		@ frame_needed = 1, uses_anonymous_args = 0
 4655              		@ link register save eliminated.
 4656 0000 80B4     		push	{r7}
 4657              	.LCFI247:
 4658              		.cfi_def_cfa_offset 4
 4659              		.cfi_offset 7, -4
 4660 0002 83B0     		sub	sp, sp, #12
 4661              	.LCFI248:
 4662              		.cfi_def_cfa_offset 16
 4663 0004 00AF     		add	r7, sp, #0
 4664              	.LCFI249:
 4665              		.cfi_def_cfa_register 7
 4666 0006 7860     		str	r0, [r7, #4]
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4667              		.loc 1 2193 0
 4668 0008 7B68     		ldr	r3, [r7, #4]
 4669 000a 1B68     		ldr	r3, [r3]
 4670 000c DA68     		ldr	r2, [r3, #12]
 4671 000e 7B68     		ldr	r3, [r7, #4]
 4672 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNHJhAL.s 			page 120


 4673 0012 22F49072 		bic	r2, r2, #288
 4674 0016 DA60     		str	r2, [r3, #12]
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4675              		.loc 1 2194 0
 4676 0018 7B68     		ldr	r3, [r7, #4]
 4677 001a 1B68     		ldr	r3, [r3]
 4678 001c 5A69     		ldr	r2, [r3, #20]
 4679 001e 7B68     		ldr	r3, [r7, #4]
 4680 0020 1B68     		ldr	r3, [r3]
 4681 0022 22F00102 		bic	r2, r2, #1
 4682 0026 5A61     		str	r2, [r3, #20]
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4683              		.loc 1 2197 0
 4684 0028 7B68     		ldr	r3, [r7, #4]
 4685 002a 2022     		movs	r2, #32
 4686 002c 83F83A20 		strb	r2, [r3, #58]
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4687              		.loc 1 2198 0
 4688 0030 00BF     		nop
 4689 0032 0C37     		adds	r7, r7, #12
 4690              	.LCFI250:
 4691              		.cfi_def_cfa_offset 4
 4692 0034 BD46     		mov	sp, r7
 4693              	.LCFI251:
 4694              		.cfi_def_cfa_register 13
 4695              		@ sp needed
 4696 0036 80BC     		pop	{r7}
 4697              	.LCFI252:
 4698              		.cfi_restore 7
 4699              		.cfi_def_cfa_offset 0
 4700 0038 7047     		bx	lr
 4701              		.cfi_endproc
 4702              	.LFE111:
 4704              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 4705              		.align	1
 4706              		.syntax unified
 4707              		.thumb
 4708              		.thumb_func
 4709              		.fpu softvfp
 4711              	UART_DMAAbortOnError:
 4712              	.LFB112:
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma DMA handle.
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4713              		.loc 1 2207 0
 4714              		.cfi_startproc
 4715              		@ args = 0, pretend = 0, frame = 16
 4716              		@ frame_needed = 1, uses_anonymous_args = 0
 4717 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccNHJhAL.s 			page 121


 4718              	.LCFI253:
 4719              		.cfi_def_cfa_offset 8
 4720              		.cfi_offset 7, -8
 4721              		.cfi_offset 14, -4
 4722 0002 84B0     		sub	sp, sp, #16
 4723              	.LCFI254:
 4724              		.cfi_def_cfa_offset 24
 4725 0004 00AF     		add	r7, sp, #0
 4726              	.LCFI255:
 4727              		.cfi_def_cfa_register 7
 4728 0006 7860     		str	r0, [r7, #4]
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4729              		.loc 1 2208 0
 4730 0008 7B68     		ldr	r3, [r7, #4]
 4731 000a 5B6A     		ldr	r3, [r3, #36]
 4732 000c FB60     		str	r3, [r7, #12]
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4733              		.loc 1 2209 0
 4734 000e FB68     		ldr	r3, [r7, #12]
 4735 0010 0022     		movs	r2, #0
 4736 0012 DA85     		strh	r2, [r3, #46]	@ movhi
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4737              		.loc 1 2210 0
 4738 0014 FB68     		ldr	r3, [r7, #12]
 4739 0016 0022     		movs	r2, #0
 4740 0018 DA84     		strh	r2, [r3, #38]	@ movhi
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4741              		.loc 1 2212 0
 4742 001a F868     		ldr	r0, [r7, #12]
 4743 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4744              		.loc 1 2213 0
 4745 0020 00BF     		nop
 4746 0022 1037     		adds	r7, r7, #16
 4747              	.LCFI256:
 4748              		.cfi_def_cfa_offset 8
 4749 0024 BD46     		mov	sp, r7
 4750              	.LCFI257:
 4751              		.cfi_def_cfa_register 13
 4752              		@ sp needed
 4753 0026 80BD     		pop	{r7, pc}
 4754              		.cfi_endproc
 4755              	.LFE112:
 4757              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 4758              		.align	1
 4759              		.syntax unified
 4760              		.thumb
 4761              		.thumb_func
 4762              		.fpu softvfp
 4764              	UART_DMATxAbortCallback:
 4765              	.LFB113:
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
ARM GAS  /tmp/ccNHJhAL.s 			page 122


2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma DMA handle.
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4766              		.loc 1 2224 0
 4767              		.cfi_startproc
 4768              		@ args = 0, pretend = 0, frame = 16
 4769              		@ frame_needed = 1, uses_anonymous_args = 0
 4770 0000 80B5     		push	{r7, lr}
 4771              	.LCFI258:
 4772              		.cfi_def_cfa_offset 8
 4773              		.cfi_offset 7, -8
 4774              		.cfi_offset 14, -4
 4775 0002 84B0     		sub	sp, sp, #16
 4776              	.LCFI259:
 4777              		.cfi_def_cfa_offset 24
 4778 0004 00AF     		add	r7, sp, #0
 4779              	.LCFI260:
 4780              		.cfi_def_cfa_register 7
 4781 0006 7860     		str	r0, [r7, #4]
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4782              		.loc 1 2225 0
 4783 0008 7B68     		ldr	r3, [r7, #4]
 4784 000a 5B6A     		ldr	r3, [r3, #36]
 4785 000c FB60     		str	r3, [r7, #12]
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 4786              		.loc 1 2227 0
 4787 000e FB68     		ldr	r3, [r7, #12]
 4788 0010 1B6B     		ldr	r3, [r3, #48]
 4789 0012 0022     		movs	r2, #0
 4790 0014 5A63     		str	r2, [r3, #52]
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 4791              		.loc 1 2230 0
 4792 0016 FB68     		ldr	r3, [r7, #12]
 4793 0018 5B6B     		ldr	r3, [r3, #52]
 4794 001a 002B     		cmp	r3, #0
 4795 001c 04D0     		beq	.L205
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmarx->XferAbortCallback != NULL)
 4796              		.loc 1 2232 0
 4797 001e FB68     		ldr	r3, [r7, #12]
 4798 0020 5B6B     		ldr	r3, [r3, #52]
 4799 0022 5B6B     		ldr	r3, [r3, #52]
 4800 0024 002B     		cmp	r3, #0
 4801 0026 14D1     		bne	.L207
 4802              	.L205:
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
ARM GAS  /tmp/ccNHJhAL.s 			page 123


2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4803              		.loc 1 2239 0
 4804 0028 FB68     		ldr	r3, [r7, #12]
 4805 002a 0022     		movs	r2, #0
 4806 002c DA84     		strh	r2, [r3, #38]	@ movhi
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4807              		.loc 1 2240 0
 4808 002e FB68     		ldr	r3, [r7, #12]
 4809 0030 0022     		movs	r2, #0
 4810 0032 DA85     		strh	r2, [r3, #46]	@ movhi
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4811              		.loc 1 2243 0
 4812 0034 FB68     		ldr	r3, [r7, #12]
 4813 0036 0022     		movs	r2, #0
 4814 0038 DA63     		str	r2, [r3, #60]
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4815              		.loc 1 2246 0
 4816 003a FB68     		ldr	r3, [r7, #12]
 4817 003c 2022     		movs	r2, #32
 4818 003e 83F83920 		strb	r2, [r3, #57]
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4819              		.loc 1 2247 0
 4820 0042 FB68     		ldr	r3, [r7, #12]
 4821 0044 2022     		movs	r2, #32
 4822 0046 83F83A20 		strb	r2, [r3, #58]
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4823              		.loc 1 2250 0
 4824 004a F868     		ldr	r0, [r7, #12]
 4825 004c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4826 0050 00E0     		b	.L204
 4827              	.L207:
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4828              		.loc 1 2234 0
 4829 0052 00BF     		nop
 4830              	.L204:
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4831              		.loc 1 2251 0
 4832 0054 1037     		adds	r7, r7, #16
 4833              	.LCFI261:
 4834              		.cfi_def_cfa_offset 8
 4835 0056 BD46     		mov	sp, r7
 4836              	.LCFI262:
 4837              		.cfi_def_cfa_register 13
 4838              		@ sp needed
 4839 0058 80BD     		pop	{r7, pc}
 4840              		.cfi_endproc
 4841              	.LFE113:
 4843              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 4844              		.align	1
 4845              		.syntax unified
 4846              		.thumb
ARM GAS  /tmp/ccNHJhAL.s 			page 124


 4847              		.thumb_func
 4848              		.fpu softvfp
 4850              	UART_DMARxAbortCallback:
 4851              	.LFB114:
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma DMA handle.
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4852              		.loc 1 2262 0
 4853              		.cfi_startproc
 4854              		@ args = 0, pretend = 0, frame = 16
 4855              		@ frame_needed = 1, uses_anonymous_args = 0
 4856 0000 80B5     		push	{r7, lr}
 4857              	.LCFI263:
 4858              		.cfi_def_cfa_offset 8
 4859              		.cfi_offset 7, -8
 4860              		.cfi_offset 14, -4
 4861 0002 84B0     		sub	sp, sp, #16
 4862              	.LCFI264:
 4863              		.cfi_def_cfa_offset 24
 4864 0004 00AF     		add	r7, sp, #0
 4865              	.LCFI265:
 4866              		.cfi_def_cfa_register 7
 4867 0006 7860     		str	r0, [r7, #4]
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4868              		.loc 1 2263 0
 4869 0008 7B68     		ldr	r3, [r7, #4]
 4870 000a 5B6A     		ldr	r3, [r3, #36]
 4871 000c FB60     		str	r3, [r7, #12]
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 4872              		.loc 1 2265 0
 4873 000e FB68     		ldr	r3, [r7, #12]
 4874 0010 5B6B     		ldr	r3, [r3, #52]
 4875 0012 0022     		movs	r2, #0
 4876 0014 5A63     		str	r2, [r3, #52]
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 4877              		.loc 1 2268 0
 4878 0016 FB68     		ldr	r3, [r7, #12]
 4879 0018 1B6B     		ldr	r3, [r3, #48]
 4880 001a 002B     		cmp	r3, #0
 4881 001c 04D0     		beq	.L209
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->hdmatx->XferAbortCallback != NULL)
 4882              		.loc 1 2270 0
 4883 001e FB68     		ldr	r3, [r7, #12]
 4884 0020 1B6B     		ldr	r3, [r3, #48]
 4885 0022 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccNHJhAL.s 			page 125


 4886 0024 002B     		cmp	r3, #0
 4887 0026 14D1     		bne	.L211
 4888              	.L209:
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4889              		.loc 1 2277 0
 4890 0028 FB68     		ldr	r3, [r7, #12]
 4891 002a 0022     		movs	r2, #0
 4892 002c DA84     		strh	r2, [r3, #38]	@ movhi
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4893              		.loc 1 2278 0
 4894 002e FB68     		ldr	r3, [r7, #12]
 4895 0030 0022     		movs	r2, #0
 4896 0032 DA85     		strh	r2, [r3, #46]	@ movhi
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4897              		.loc 1 2281 0
 4898 0034 FB68     		ldr	r3, [r7, #12]
 4899 0036 0022     		movs	r2, #0
 4900 0038 DA63     		str	r2, [r3, #60]
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4901              		.loc 1 2284 0
 4902 003a FB68     		ldr	r3, [r7, #12]
 4903 003c 2022     		movs	r2, #32
 4904 003e 83F83920 		strb	r2, [r3, #57]
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4905              		.loc 1 2285 0
 4906 0042 FB68     		ldr	r3, [r7, #12]
 4907 0044 2022     		movs	r2, #32
 4908 0046 83F83A20 		strb	r2, [r3, #58]
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4909              		.loc 1 2288 0
 4910 004a F868     		ldr	r0, [r7, #12]
 4911 004c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4912 0050 00E0     		b	.L208
 4913              	.L211:
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4914              		.loc 1 2272 0
 4915 0052 00BF     		nop
 4916              	.L208:
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4917              		.loc 1 2289 0
 4918 0054 1037     		adds	r7, r7, #16
 4919              	.LCFI266:
 4920              		.cfi_def_cfa_offset 8
 4921 0056 BD46     		mov	sp, r7
 4922              	.LCFI267:
ARM GAS  /tmp/ccNHJhAL.s 			page 126


 4923              		.cfi_def_cfa_register 13
 4924              		@ sp needed
 4925 0058 80BD     		pop	{r7, pc}
 4926              		.cfi_endproc
 4927              	.LFE114:
 4929              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 4930              		.align	1
 4931              		.syntax unified
 4932              		.thumb
 4933              		.thumb_func
 4934              		.fpu softvfp
 4936              	UART_DMATxOnlyAbortCallback:
 4937              	.LFB115:
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma DMA handle.
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4938              		.loc 1 2300 0
 4939              		.cfi_startproc
 4940              		@ args = 0, pretend = 0, frame = 16
 4941              		@ frame_needed = 1, uses_anonymous_args = 0
 4942 0000 80B5     		push	{r7, lr}
 4943              	.LCFI268:
 4944              		.cfi_def_cfa_offset 8
 4945              		.cfi_offset 7, -8
 4946              		.cfi_offset 14, -4
 4947 0002 84B0     		sub	sp, sp, #16
 4948              	.LCFI269:
 4949              		.cfi_def_cfa_offset 24
 4950 0004 00AF     		add	r7, sp, #0
 4951              	.LCFI270:
 4952              		.cfi_def_cfa_register 7
 4953 0006 7860     		str	r0, [r7, #4]
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4954              		.loc 1 2301 0
 4955 0008 7B68     		ldr	r3, [r7, #4]
 4956 000a 5B6A     		ldr	r3, [r3, #36]
 4957 000c FB60     		str	r3, [r7, #12]
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4958              		.loc 1 2303 0
 4959 000e FB68     		ldr	r3, [r7, #12]
 4960 0010 0022     		movs	r2, #0
 4961 0012 DA84     		strh	r2, [r3, #38]	@ movhi
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4962              		.loc 1 2306 0
 4963 0014 FB68     		ldr	r3, [r7, #12]
 4964 0016 2022     		movs	r2, #32
ARM GAS  /tmp/ccNHJhAL.s 			page 127


 4965 0018 83F83920 		strb	r2, [r3, #57]
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 4966              		.loc 1 2309 0
 4967 001c F868     		ldr	r0, [r7, #12]
 4968 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4969              		.loc 1 2310 0
 4970 0022 00BF     		nop
 4971 0024 1037     		adds	r7, r7, #16
 4972              	.LCFI271:
 4973              		.cfi_def_cfa_offset 8
 4974 0026 BD46     		mov	sp, r7
 4975              	.LCFI272:
 4976              		.cfi_def_cfa_register 13
 4977              		@ sp needed
 4978 0028 80BD     		pop	{r7, pc}
 4979              		.cfi_endproc
 4980              	.LFE115:
 4982              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 4983              		.align	1
 4984              		.syntax unified
 4985              		.thumb
 4986              		.thumb_func
 4987              		.fpu softvfp
 4989              	UART_DMARxOnlyAbortCallback:
 4990              	.LFB116:
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma DMA handle.
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4991              		.loc 1 2321 0
 4992              		.cfi_startproc
 4993              		@ args = 0, pretend = 0, frame = 16
 4994              		@ frame_needed = 1, uses_anonymous_args = 0
 4995 0000 80B5     		push	{r7, lr}
 4996              	.LCFI273:
 4997              		.cfi_def_cfa_offset 8
 4998              		.cfi_offset 7, -8
 4999              		.cfi_offset 14, -4
 5000 0002 84B0     		sub	sp, sp, #16
 5001              	.LCFI274:
 5002              		.cfi_def_cfa_offset 24
 5003 0004 00AF     		add	r7, sp, #0
 5004              	.LCFI275:
 5005              		.cfi_def_cfa_register 7
 5006 0006 7860     		str	r0, [r7, #4]
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 5007              		.loc 1 2322 0
ARM GAS  /tmp/ccNHJhAL.s 			page 128


 5008 0008 7B68     		ldr	r3, [r7, #4]
 5009 000a 5B6A     		ldr	r3, [r3, #36]
 5010 000c FB60     		str	r3, [r7, #12]
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5011              		.loc 1 2324 0
 5012 000e FB68     		ldr	r3, [r7, #12]
 5013 0010 0022     		movs	r2, #0
 5014 0012 DA85     		strh	r2, [r3, #46]	@ movhi
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5015              		.loc 1 2327 0
 5016 0014 FB68     		ldr	r3, [r7, #12]
 5017 0016 2022     		movs	r2, #32
 5018 0018 83F83A20 		strb	r2, [r3, #58]
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 5019              		.loc 1 2330 0
 5020 001c F868     		ldr	r0, [r7, #12]
 5021 001e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5022              		.loc 1 2331 0
 5023 0022 00BF     		nop
 5024 0024 1037     		adds	r7, r7, #16
 5025              	.LCFI276:
 5026              		.cfi_def_cfa_offset 8
 5027 0026 BD46     		mov	sp, r7
 5028              	.LCFI277:
 5029              		.cfi_def_cfa_register 13
 5030              		@ sp needed
 5031 0028 80BD     		pop	{r7, pc}
 5032              		.cfi_endproc
 5033              	.LFE116:
 5035              		.section	.text.UART_Transmit_IT,"ax",%progbits
 5036              		.align	1
 5037              		.syntax unified
 5038              		.thumb
 5039              		.thumb_func
 5040              		.fpu softvfp
 5042              	UART_Transmit_IT:
 5043              	.LFB117:
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5044              		.loc 1 2340 0
 5045              		.cfi_startproc
 5046              		@ args = 0, pretend = 0, frame = 16
 5047              		@ frame_needed = 1, uses_anonymous_args = 0
 5048              		@ link register save eliminated.
ARM GAS  /tmp/ccNHJhAL.s 			page 129


 5049 0000 80B4     		push	{r7}
 5050              	.LCFI278:
 5051              		.cfi_def_cfa_offset 4
 5052              		.cfi_offset 7, -4
 5053 0002 85B0     		sub	sp, sp, #20
 5054              	.LCFI279:
 5055              		.cfi_def_cfa_offset 24
 5056 0004 00AF     		add	r7, sp, #0
 5057              	.LCFI280:
 5058              		.cfi_def_cfa_register 7
 5059 0006 7860     		str	r0, [r7, #4]
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t* tmp;
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 5060              		.loc 1 2344 0
 5061 0008 7B68     		ldr	r3, [r7, #4]
 5062 000a 93F83930 		ldrb	r3, [r3, #57]
 5063 000e DBB2     		uxtb	r3, r3
 5064 0010 212B     		cmp	r3, #33
 5065 0012 44D1     		bne	.L215
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 5066              		.loc 1 2346 0
 5067 0014 7B68     		ldr	r3, [r7, #4]
 5068 0016 9B68     		ldr	r3, [r3, #8]
 5069 0018 B3F5805F 		cmp	r3, #4096
 5070 001c 1AD1     		bne	.L216
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t*) huart->pTxBuffPtr;
 5071              		.loc 1 2348 0
 5072 001e 7B68     		ldr	r3, [r7, #4]
 5073 0020 1B6A     		ldr	r3, [r3, #32]
 5074 0022 FB60     		str	r3, [r7, #12]
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 5075              		.loc 1 2349 0
 5076 0024 FB68     		ldr	r3, [r7, #12]
 5077 0026 1B88     		ldrh	r3, [r3]
 5078 0028 1A46     		mov	r2, r3
 5079 002a 7B68     		ldr	r3, [r7, #4]
 5080 002c 1B68     		ldr	r3, [r3]
 5081 002e C2F30802 		ubfx	r2, r2, #0, #9
 5082 0032 5A60     		str	r2, [r3, #4]
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5083              		.loc 1 2350 0
 5084 0034 7B68     		ldr	r3, [r7, #4]
 5085 0036 1B69     		ldr	r3, [r3, #16]
 5086 0038 002B     		cmp	r3, #0
 5087 003a 05D1     		bne	.L217
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 5088              		.loc 1 2352 0
 5089 003c 7B68     		ldr	r3, [r7, #4]
 5090 003e 1B6A     		ldr	r3, [r3, #32]
 5091 0040 9A1C     		adds	r2, r3, #2
 5092 0042 7B68     		ldr	r3, [r7, #4]
 5093 0044 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccNHJhAL.s 			page 130


 5094 0046 0EE0     		b	.L219
 5095              	.L217:
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
 5096              		.loc 1 2356 0
 5097 0048 7B68     		ldr	r3, [r7, #4]
 5098 004a 1B6A     		ldr	r3, [r3, #32]
 5099 004c 5A1C     		adds	r2, r3, #1
 5100 004e 7B68     		ldr	r3, [r7, #4]
 5101 0050 1A62     		str	r2, [r3, #32]
 5102 0052 08E0     		b	.L219
 5103              	.L216:
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     } 
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 5104              		.loc 1 2361 0
 5105 0054 7B68     		ldr	r3, [r7, #4]
 5106 0056 1B6A     		ldr	r3, [r3, #32]
 5107 0058 591C     		adds	r1, r3, #1
 5108 005a 7A68     		ldr	r2, [r7, #4]
 5109 005c 1162     		str	r1, [r2, #32]
 5110 005e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5111 0060 7B68     		ldr	r3, [r7, #4]
 5112 0062 1B68     		ldr	r3, [r3]
 5113 0064 5A60     		str	r2, [r3, #4]
 5114              	.L219:
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(--huart->TxXferCount == 0U)
 5115              		.loc 1 2364 0
 5116 0066 7B68     		ldr	r3, [r7, #4]
 5117 0068 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 5118 006a 9BB2     		uxth	r3, r3
 5119 006c 013B     		subs	r3, r3, #1
 5120 006e 9BB2     		uxth	r3, r3
 5121 0070 7A68     		ldr	r2, [r7, #4]
 5122 0072 1946     		mov	r1, r3	@ movhi
 5123 0074 D184     		strh	r1, [r2, #38]	@ movhi
 5124 0076 002B     		cmp	r3, #0
 5125 0078 0FD1     		bne	.L220
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 5126              		.loc 1 2367 0
 5127 007a 7B68     		ldr	r3, [r7, #4]
 5128 007c 1B68     		ldr	r3, [r3]
 5129 007e DA68     		ldr	r2, [r3, #12]
 5130 0080 7B68     		ldr	r3, [r7, #4]
 5131 0082 1B68     		ldr	r3, [r3]
 5132 0084 22F08002 		bic	r2, r2, #128
 5133 0088 DA60     		str	r2, [r3, #12]
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */    
ARM GAS  /tmp/ccNHJhAL.s 			page 131


2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 5134              		.loc 1 2370 0
 5135 008a 7B68     		ldr	r3, [r7, #4]
 5136 008c 1B68     		ldr	r3, [r3]
 5137 008e DA68     		ldr	r2, [r3, #12]
 5138 0090 7B68     		ldr	r3, [r7, #4]
 5139 0092 1B68     		ldr	r3, [r3]
 5140 0094 42F04002 		orr	r2, r2, #64
 5141 0098 DA60     		str	r2, [r3, #12]
 5142              	.L220:
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 5143              		.loc 1 2372 0
 5144 009a 0023     		movs	r3, #0
 5145 009c 00E0     		b	.L221
 5146              	.L215:
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 5147              		.loc 1 2376 0
 5148 009e 0223     		movs	r3, #2
 5149              	.L221:
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5150              		.loc 1 2378 0
 5151 00a0 1846     		mov	r0, r3
 5152 00a2 1437     		adds	r7, r7, #20
 5153              	.LCFI281:
 5154              		.cfi_def_cfa_offset 4
 5155 00a4 BD46     		mov	sp, r7
 5156              	.LCFI282:
 5157              		.cfi_def_cfa_register 13
 5158              		@ sp needed
 5159 00a6 80BC     		pop	{r7}
 5160              	.LCFI283:
 5161              		.cfi_restore 7
 5162              		.cfi_def_cfa_offset 0
 5163 00a8 7047     		bx	lr
 5164              		.cfi_endproc
 5165              	.LFE117:
 5167              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 5168              		.align	1
 5169              		.syntax unified
 5170              		.thumb
 5171              		.thumb_func
 5172              		.fpu softvfp
 5174              	UART_EndTransmit_IT:
 5175              	.LFB118:
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccNHJhAL.s 			page 132


2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5176              		.loc 1 2387 0
 5177              		.cfi_startproc
 5178              		@ args = 0, pretend = 0, frame = 8
 5179              		@ frame_needed = 1, uses_anonymous_args = 0
 5180 0000 80B5     		push	{r7, lr}
 5181              	.LCFI284:
 5182              		.cfi_def_cfa_offset 8
 5183              		.cfi_offset 7, -8
 5184              		.cfi_offset 14, -4
 5185 0002 82B0     		sub	sp, sp, #8
 5186              	.LCFI285:
 5187              		.cfi_def_cfa_offset 16
 5188 0004 00AF     		add	r7, sp, #0
 5189              	.LCFI286:
 5190              		.cfi_def_cfa_register 7
 5191 0006 7860     		str	r0, [r7, #4]
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */    
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 5192              		.loc 1 2389 0
 5193 0008 7B68     		ldr	r3, [r7, #4]
 5194 000a 1B68     		ldr	r3, [r3]
 5195 000c DA68     		ldr	r2, [r3, #12]
 5196 000e 7B68     		ldr	r3, [r7, #4]
 5197 0010 1B68     		ldr	r3, [r3]
 5198 0012 22F04002 		bic	r2, r2, #64
 5199 0016 DA60     		str	r2, [r3, #12]
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5200              		.loc 1 2392 0
 5201 0018 7B68     		ldr	r3, [r7, #4]
 5202 001a 2022     		movs	r2, #32
 5203 001c 83F83920 		strb	r2, [r3, #57]
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 5204              		.loc 1 2393 0
 5205 0020 7868     		ldr	r0, [r7, #4]
 5206 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5207              		.loc 1 2395 0
 5208 0026 0023     		movs	r3, #0
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5209              		.loc 1 2396 0
 5210 0028 1846     		mov	r0, r3
 5211 002a 0837     		adds	r7, r7, #8
 5212              	.LCFI287:
 5213              		.cfi_def_cfa_offset 8
 5214 002c BD46     		mov	sp, r7
 5215              	.LCFI288:
 5216              		.cfi_def_cfa_register 13
 5217              		@ sp needed
 5218 002e 80BD     		pop	{r7, pc}
 5219              		.cfi_endproc
 5220              	.LFE118:
 5222              		.section	.text.UART_Receive_IT,"ax",%progbits
 5223              		.align	1
ARM GAS  /tmp/ccNHJhAL.s 			page 133


 5224              		.syntax unified
 5225              		.thumb
 5226              		.thumb_func
 5227              		.fpu softvfp
 5229              	UART_Receive_IT:
 5230              	.LFB119:
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5231              		.loc 1 2405 0
 5232              		.cfi_startproc
 5233              		@ args = 0, pretend = 0, frame = 16
 5234              		@ frame_needed = 1, uses_anonymous_args = 0
 5235 0000 80B5     		push	{r7, lr}
 5236              	.LCFI289:
 5237              		.cfi_def_cfa_offset 8
 5238              		.cfi_offset 7, -8
 5239              		.cfi_offset 14, -4
 5240 0002 84B0     		sub	sp, sp, #16
 5241              	.LCFI290:
 5242              		.cfi_def_cfa_offset 24
 5243 0004 00AF     		add	r7, sp, #0
 5244              	.LCFI291:
 5245              		.cfi_def_cfa_register 7
 5246 0006 7860     		str	r0, [r7, #4]
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t* tmp;
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 5247              		.loc 1 2409 0
 5248 0008 7B68     		ldr	r3, [r7, #4]
 5249 000a 93F83A30 		ldrb	r3, [r3, #58]
 5250 000e DBB2     		uxtb	r3, r3
 5251 0010 222B     		cmp	r3, #34
 5252 0012 71D1     		bne	.L225
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 5253              		.loc 1 2411 0
 5254 0014 7B68     		ldr	r3, [r7, #4]
 5255 0016 9B68     		ldr	r3, [r3, #8]
 5256 0018 B3F5805F 		cmp	r3, #4096
 5257 001c 23D1     		bne	.L226
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr;
 5258              		.loc 1 2413 0
 5259 001e 7B68     		ldr	r3, [r7, #4]
 5260 0020 9B6A     		ldr	r3, [r3, #40]
 5261 0022 FB60     		str	r3, [r7, #12]
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5262              		.loc 1 2414 0
 5263 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNHJhAL.s 			page 134


 5264 0026 1B69     		ldr	r3, [r3, #16]
 5265 0028 002B     		cmp	r3, #0
 5266 002a 0ED1     		bne	.L227
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 5267              		.loc 1 2416 0
 5268 002c 7B68     		ldr	r3, [r7, #4]
 5269 002e 1B68     		ldr	r3, [r3]
 5270 0030 5B68     		ldr	r3, [r3, #4]
 5271 0032 9BB2     		uxth	r3, r3
 5272 0034 C3F30803 		ubfx	r3, r3, #0, #9
 5273 0038 9AB2     		uxth	r2, r3
 5274 003a FB68     		ldr	r3, [r7, #12]
 5275 003c 1A80     		strh	r2, [r3]	@ movhi
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 5276              		.loc 1 2417 0
 5277 003e 7B68     		ldr	r3, [r7, #4]
 5278 0040 9B6A     		ldr	r3, [r3, #40]
 5279 0042 9A1C     		adds	r2, r3, #2
 5280 0044 7B68     		ldr	r3, [r7, #4]
 5281 0046 9A62     		str	r2, [r3, #40]
 5282 0048 29E0     		b	.L229
 5283              	.L227:
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 5284              		.loc 1 2421 0
 5285 004a 7B68     		ldr	r3, [r7, #4]
 5286 004c 1B68     		ldr	r3, [r3]
 5287 004e 5B68     		ldr	r3, [r3, #4]
 5288 0050 9BB2     		uxth	r3, r3
 5289 0052 DBB2     		uxtb	r3, r3
 5290 0054 9AB2     		uxth	r2, r3
 5291 0056 FB68     		ldr	r3, [r7, #12]
 5292 0058 1A80     		strh	r2, [r3]	@ movhi
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 5293              		.loc 1 2422 0
 5294 005a 7B68     		ldr	r3, [r7, #4]
 5295 005c 9B6A     		ldr	r3, [r3, #40]
 5296 005e 5A1C     		adds	r2, r3, #1
 5297 0060 7B68     		ldr	r3, [r7, #4]
 5298 0062 9A62     		str	r2, [r3, #40]
 5299 0064 1BE0     		b	.L229
 5300              	.L226:
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5301              		.loc 1 2427 0
 5302 0066 7B68     		ldr	r3, [r7, #4]
 5303 0068 1B69     		ldr	r3, [r3, #16]
 5304 006a 002B     		cmp	r3, #0
 5305 006c 0AD1     		bne	.L230
2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
ARM GAS  /tmp/ccNHJhAL.s 			page 135


 5306              		.loc 1 2429 0
 5307 006e 7B68     		ldr	r3, [r7, #4]
 5308 0070 1B68     		ldr	r3, [r3]
 5309 0072 5868     		ldr	r0, [r3, #4]
 5310 0074 7B68     		ldr	r3, [r7, #4]
 5311 0076 9B6A     		ldr	r3, [r3, #40]
 5312 0078 591C     		adds	r1, r3, #1
 5313 007a 7A68     		ldr	r2, [r7, #4]
 5314 007c 9162     		str	r1, [r2, #40]
 5315 007e C2B2     		uxtb	r2, r0
 5316 0080 1A70     		strb	r2, [r3]
 5317 0082 0CE0     		b	.L229
 5318              	.L230:
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 5319              		.loc 1 2433 0
 5320 0084 7B68     		ldr	r3, [r7, #4]
 5321 0086 1B68     		ldr	r3, [r3]
 5322 0088 5B68     		ldr	r3, [r3, #4]
 5323 008a DAB2     		uxtb	r2, r3
 5324 008c 7B68     		ldr	r3, [r7, #4]
 5325 008e 9B6A     		ldr	r3, [r3, #40]
 5326 0090 581C     		adds	r0, r3, #1
 5327 0092 7968     		ldr	r1, [r7, #4]
 5328 0094 8862     		str	r0, [r1, #40]
 5329 0096 02F07F02 		and	r2, r2, #127
 5330 009a D2B2     		uxtb	r2, r2
 5331 009c 1A70     		strb	r2, [r3]
 5332              	.L229:
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(--huart->RxXferCount == 0U)
 5333              		.loc 1 2437 0
 5334 009e 7B68     		ldr	r3, [r7, #4]
 5335 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5336 00a2 9BB2     		uxth	r3, r3
 5337 00a4 013B     		subs	r3, r3, #1
 5338 00a6 9BB2     		uxth	r3, r3
 5339 00a8 7A68     		ldr	r2, [r7, #4]
 5340 00aa 1946     		mov	r1, r3	@ movhi
 5341 00ac D185     		strh	r1, [r2, #46]	@ movhi
 5342 00ae 002B     		cmp	r3, #0
 5343 00b0 20D1     		bne	.L231
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 5344              		.loc 1 2440 0
 5345 00b2 7B68     		ldr	r3, [r7, #4]
 5346 00b4 1B68     		ldr	r3, [r3]
 5347 00b6 DA68     		ldr	r2, [r3, #12]
 5348 00b8 7B68     		ldr	r3, [r7, #4]
 5349 00ba 1B68     		ldr	r3, [r3]
 5350 00bc 22F02002 		bic	r2, r2, #32
 5351 00c0 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccNHJhAL.s 			page 136


2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 5352              		.loc 1 2443 0
 5353 00c2 7B68     		ldr	r3, [r7, #4]
 5354 00c4 1B68     		ldr	r3, [r3]
 5355 00c6 DA68     		ldr	r2, [r3, #12]
 5356 00c8 7B68     		ldr	r3, [r7, #4]
 5357 00ca 1B68     		ldr	r3, [r3]
 5358 00cc 22F48072 		bic	r2, r2, #256
 5359 00d0 DA60     		str	r2, [r3, #12]
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 5360              		.loc 1 2445 0
 5361 00d2 7B68     		ldr	r3, [r7, #4]
 5362 00d4 1B68     		ldr	r3, [r3]
 5363 00d6 5A69     		ldr	r2, [r3, #20]
 5364 00d8 7B68     		ldr	r3, [r7, #4]
 5365 00da 1B68     		ldr	r3, [r3]
 5366 00dc 22F00102 		bic	r2, r2, #1
 5367 00e0 5A61     		str	r2, [r3, #20]
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5368              		.loc 1 2448 0
 5369 00e2 7B68     		ldr	r3, [r7, #4]
 5370 00e4 2022     		movs	r2, #32
 5371 00e6 83F83A20 		strb	r2, [r3, #58]
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 5372              		.loc 1 2450 0
 5373 00ea 7868     		ldr	r0, [r7, #4]
 5374 00ec FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 5375              		.loc 1 2452 0
 5376 00f0 0023     		movs	r3, #0
 5377 00f2 02E0     		b	.L232
 5378              	.L231:
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 5379              		.loc 1 2454 0
 5380 00f4 0023     		movs	r3, #0
 5381 00f6 00E0     		b	.L232
 5382              	.L225:
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 5383              		.loc 1 2458 0
 5384 00f8 0223     		movs	r3, #2
 5385              	.L232:
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5386              		.loc 1 2460 0
 5387 00fa 1846     		mov	r0, r3
 5388 00fc 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccNHJhAL.s 			page 137


 5389              	.LCFI292:
 5390              		.cfi_def_cfa_offset 8
 5391 00fe BD46     		mov	sp, r7
 5392              	.LCFI293:
 5393              		.cfi_def_cfa_register 13
 5394              		@ sp needed
 5395 0100 80BD     		pop	{r7, pc}
 5396              		.cfi_endproc
 5397              	.LFE119:
 5399              		.section	.text.UART_SetConfig,"ax",%progbits
 5400              		.align	1
 5401              		.syntax unified
 5402              		.thumb
 5403              		.thumb_func
 5404              		.fpu softvfp
 5406              	UART_SetConfig:
 5407              	.LFB120:
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral. 
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5408              		.loc 1 2469 0
 5409              		.cfi_startproc
 5410              		@ args = 0, pretend = 0, frame = 16
 5411              		@ frame_needed = 1, uses_anonymous_args = 0
 5412 0000 B0B5     		push	{r4, r5, r7, lr}
 5413              	.LCFI294:
 5414              		.cfi_def_cfa_offset 16
 5415              		.cfi_offset 4, -16
 5416              		.cfi_offset 5, -12
 5417              		.cfi_offset 7, -8
 5418              		.cfi_offset 14, -4
 5419 0002 84B0     		sub	sp, sp, #16
 5420              	.LCFI295:
 5421              		.cfi_def_cfa_offset 32
 5422 0004 00AF     		add	r7, sp, #0
 5423              	.LCFI296:
 5424              		.cfi_def_cfa_register 7
 5425 0006 7860     		str	r0, [r7, #4]
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 5426              		.loc 1 2470 0
 5427 0008 0023     		movs	r3, #0
 5428 000a FB60     		str	r3, [r7, #12]
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*------- UART-associated USART registers setting : CR2 Configuration ------*/
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
ARM GAS  /tmp/ccNHJhAL.s 			page 138


2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    * to huart->Init.StopBits value */
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 5429              		.loc 1 2481 0
 5430 000c 7B68     		ldr	r3, [r7, #4]
 5431 000e 1B68     		ldr	r3, [r3]
 5432 0010 1B69     		ldr	r3, [r3, #16]
 5433 0012 23F44051 		bic	r1, r3, #12288
 5434 0016 7B68     		ldr	r3, [r7, #4]
 5435 0018 DA68     		ldr	r2, [r3, #12]
 5436 001a 7B68     		ldr	r3, [r7, #4]
 5437 001c 1B68     		ldr	r3, [r3]
 5438 001e 0A43     		orrs	r2, r2, r1
 5439 0020 1A61     		str	r2, [r3, #16]
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*------- UART-associated USART registers setting : CR1 Configuration ------*/
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode: 
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value 
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, 
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 5440              		.loc 1 2496 0
 5441 0022 7B68     		ldr	r3, [r7, #4]
 5442 0024 9A68     		ldr	r2, [r3, #8]
 5443 0026 7B68     		ldr	r3, [r7, #4]
 5444 0028 1B69     		ldr	r3, [r3, #16]
 5445 002a 1A43     		orrs	r2, r2, r3
 5446 002c 7B68     		ldr	r3, [r7, #4]
 5447 002e 5B69     		ldr	r3, [r3, #20]
 5448 0030 1343     		orrs	r3, r3, r2
 5449 0032 FA68     		ldr	r2, [r7, #12]
 5450 0034 1343     		orrs	r3, r3, r2
 5451 0036 FB60     		str	r3, [r7, #12]
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, 
 5452              		.loc 1 2497 0
 5453 0038 7B68     		ldr	r3, [r7, #4]
 5454 003a 1B68     		ldr	r3, [r3]
 5455 003c DB68     		ldr	r3, [r3, #12]
 5456 003e 23F4B053 		bic	r3, r3, #5632
 5457 0042 23F00C03 		bic	r3, r3, #12
 5458 0046 7A68     		ldr	r2, [r7, #4]
 5459 0048 1268     		ldr	r2, [r2]
 5460 004a F968     		ldr	r1, [r7, #12]
 5461 004c 0B43     		orrs	r3, r3, r1
 5462 004e D360     		str	r3, [r2, #12]
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*------- UART-associated USART registers setting : CR3 Configuration ------*/
ARM GAS  /tmp/ccNHJhAL.s 			page 139


2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 5463              		.loc 1 2504 0
 5464 0050 7B68     		ldr	r3, [r7, #4]
 5465 0052 1B68     		ldr	r3, [r3]
 5466 0054 5B69     		ldr	r3, [r3, #20]
 5467 0056 23F44071 		bic	r1, r3, #768
 5468 005a 7B68     		ldr	r3, [r7, #4]
 5469 005c 9A69     		ldr	r2, [r3, #24]
 5470 005e 7B68     		ldr	r3, [r7, #4]
 5471 0060 1B68     		ldr	r3, [r3]
 5472 0062 0A43     		orrs	r2, r2, r1
 5473 0064 5A61     		str	r2, [r3, #20]
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Over Sampling */
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 5474              		.loc 1 2534 0
 5475 0066 7B68     		ldr	r3, [r7, #4]
 5476 0068 1B68     		ldr	r3, [r3]
 5477 006a 6F4A     		ldr	r2, .L237
 5478 006c 9342     		cmp	r3, r2
 5479 006e 6BD1     		bne	.L234
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 5480              		.loc 1 2536 0
 5481 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5482 0074 0246     		mov	r2, r0
 5483 0076 1346     		mov	r3, r2
 5484 0078 9B00     		lsls	r3, r3, #2
 5485 007a 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccNHJhAL.s 			page 140


 5486 007c 9A00     		lsls	r2, r3, #2
 5487 007e 1A44     		add	r2, r2, r3
 5488 0080 7B68     		ldr	r3, [r7, #4]
 5489 0082 5B68     		ldr	r3, [r3, #4]
 5490 0084 9B00     		lsls	r3, r3, #2
 5491 0086 B2FBF3F3 		udiv	r3, r2, r3
 5492 008a 684A     		ldr	r2, .L237+4
 5493 008c A2FB0323 		umull	r2, r3, r2, r3
 5494 0090 5B09     		lsrs	r3, r3, #5
 5495 0092 1C01     		lsls	r4, r3, #4
 5496 0094 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5497 0098 0246     		mov	r2, r0
 5498 009a 1346     		mov	r3, r2
 5499 009c 9B00     		lsls	r3, r3, #2
 5500 009e 1344     		add	r3, r3, r2
 5501 00a0 9A00     		lsls	r2, r3, #2
 5502 00a2 1A44     		add	r2, r2, r3
 5503 00a4 7B68     		ldr	r3, [r7, #4]
 5504 00a6 5B68     		ldr	r3, [r3, #4]
 5505 00a8 9B00     		lsls	r3, r3, #2
 5506 00aa B2FBF3F5 		udiv	r5, r2, r3
 5507 00ae FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5508 00b2 0246     		mov	r2, r0
 5509 00b4 1346     		mov	r3, r2
 5510 00b6 9B00     		lsls	r3, r3, #2
 5511 00b8 1344     		add	r3, r3, r2
 5512 00ba 9A00     		lsls	r2, r3, #2
 5513 00bc 1A44     		add	r2, r2, r3
 5514 00be 7B68     		ldr	r3, [r7, #4]
 5515 00c0 5B68     		ldr	r3, [r3, #4]
 5516 00c2 9B00     		lsls	r3, r3, #2
 5517 00c4 B2FBF3F3 		udiv	r3, r2, r3
 5518 00c8 584A     		ldr	r2, .L237+4
 5519 00ca A2FB0323 		umull	r2, r3, r2, r3
 5520 00ce 5B09     		lsrs	r3, r3, #5
 5521 00d0 6422     		movs	r2, #100
 5522 00d2 02FB03F3 		mul	r3, r2, r3
 5523 00d6 EB1A     		subs	r3, r5, r3
 5524 00d8 1B01     		lsls	r3, r3, #4
 5525 00da 3233     		adds	r3, r3, #50
 5526 00dc 534A     		ldr	r2, .L237+4
 5527 00de A2FB0323 		umull	r2, r3, r2, r3
 5528 00e2 5B09     		lsrs	r3, r3, #5
 5529 00e4 03F0F003 		and	r3, r3, #240
 5530 00e8 1C44     		add	r4, r4, r3
 5531 00ea FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5532 00ee 0246     		mov	r2, r0
 5533 00f0 1346     		mov	r3, r2
 5534 00f2 9B00     		lsls	r3, r3, #2
 5535 00f4 1344     		add	r3, r3, r2
 5536 00f6 9A00     		lsls	r2, r3, #2
 5537 00f8 1A44     		add	r2, r2, r3
 5538 00fa 7B68     		ldr	r3, [r7, #4]
 5539 00fc 5B68     		ldr	r3, [r3, #4]
 5540 00fe 9B00     		lsls	r3, r3, #2
 5541 0100 B2FBF3F5 		udiv	r5, r2, r3
 5542 0104 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
ARM GAS  /tmp/ccNHJhAL.s 			page 141


 5543 0108 0246     		mov	r2, r0
 5544 010a 1346     		mov	r3, r2
 5545 010c 9B00     		lsls	r3, r3, #2
 5546 010e 1344     		add	r3, r3, r2
 5547 0110 9A00     		lsls	r2, r3, #2
 5548 0112 1A44     		add	r2, r2, r3
 5549 0114 7B68     		ldr	r3, [r7, #4]
 5550 0116 5B68     		ldr	r3, [r3, #4]
 5551 0118 9B00     		lsls	r3, r3, #2
 5552 011a B2FBF3F3 		udiv	r3, r2, r3
 5553 011e 434A     		ldr	r2, .L237+4
 5554 0120 A2FB0323 		umull	r2, r3, r2, r3
 5555 0124 5B09     		lsrs	r3, r3, #5
 5556 0126 6422     		movs	r2, #100
 5557 0128 02FB03F3 		mul	r3, r2, r3
 5558 012c EB1A     		subs	r3, r5, r3
 5559 012e 1B01     		lsls	r3, r3, #4
 5560 0130 3233     		adds	r3, r3, #50
 5561 0132 3E4A     		ldr	r2, .L237+4
 5562 0134 A2FB0323 		umull	r2, r3, r2, r3
 5563 0138 5B09     		lsrs	r3, r3, #5
 5564 013a 03F00F02 		and	r2, r3, #15
 5565 013e 7B68     		ldr	r3, [r7, #4]
 5566 0140 1B68     		ldr	r3, [r3]
 5567 0142 2244     		add	r2, r2, r4
 5568 0144 9A60     		str	r2, [r3, #8]
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5569              		.loc 1 2543 0
 5570 0146 6AE0     		b	.L236
 5571              	.L234:
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 5572              		.loc 1 2540 0
 5573 0148 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5574 014c 0246     		mov	r2, r0
 5575 014e 1346     		mov	r3, r2
 5576 0150 9B00     		lsls	r3, r3, #2
 5577 0152 1344     		add	r3, r3, r2
 5578 0154 9A00     		lsls	r2, r3, #2
 5579 0156 1A44     		add	r2, r2, r3
 5580 0158 7B68     		ldr	r3, [r7, #4]
 5581 015a 5B68     		ldr	r3, [r3, #4]
 5582 015c 9B00     		lsls	r3, r3, #2
 5583 015e B2FBF3F3 		udiv	r3, r2, r3
 5584 0162 324A     		ldr	r2, .L237+4
 5585 0164 A2FB0323 		umull	r2, r3, r2, r3
 5586 0168 5B09     		lsrs	r3, r3, #5
 5587 016a 1C01     		lsls	r4, r3, #4
 5588 016c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5589 0170 0246     		mov	r2, r0
 5590 0172 1346     		mov	r3, r2
 5591 0174 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccNHJhAL.s 			page 142


 5592 0176 1344     		add	r3, r3, r2
 5593 0178 9A00     		lsls	r2, r3, #2
 5594 017a 1A44     		add	r2, r2, r3
 5595 017c 7B68     		ldr	r3, [r7, #4]
 5596 017e 5B68     		ldr	r3, [r3, #4]
 5597 0180 9B00     		lsls	r3, r3, #2
 5598 0182 B2FBF3F5 		udiv	r5, r2, r3
 5599 0186 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5600 018a 0246     		mov	r2, r0
 5601 018c 1346     		mov	r3, r2
 5602 018e 9B00     		lsls	r3, r3, #2
 5603 0190 1344     		add	r3, r3, r2
 5604 0192 9A00     		lsls	r2, r3, #2
 5605 0194 1A44     		add	r2, r2, r3
 5606 0196 7B68     		ldr	r3, [r7, #4]
 5607 0198 5B68     		ldr	r3, [r3, #4]
 5608 019a 9B00     		lsls	r3, r3, #2
 5609 019c B2FBF3F3 		udiv	r3, r2, r3
 5610 01a0 224A     		ldr	r2, .L237+4
 5611 01a2 A2FB0323 		umull	r2, r3, r2, r3
 5612 01a6 5B09     		lsrs	r3, r3, #5
 5613 01a8 6422     		movs	r2, #100
 5614 01aa 02FB03F3 		mul	r3, r2, r3
 5615 01ae EB1A     		subs	r3, r5, r3
 5616 01b0 1B01     		lsls	r3, r3, #4
 5617 01b2 3233     		adds	r3, r3, #50
 5618 01b4 1D4A     		ldr	r2, .L237+4
 5619 01b6 A2FB0323 		umull	r2, r3, r2, r3
 5620 01ba 5B09     		lsrs	r3, r3, #5
 5621 01bc 03F0F003 		and	r3, r3, #240
 5622 01c0 1C44     		add	r4, r4, r3
 5623 01c2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5624 01c6 0246     		mov	r2, r0
 5625 01c8 1346     		mov	r3, r2
 5626 01ca 9B00     		lsls	r3, r3, #2
 5627 01cc 1344     		add	r3, r3, r2
 5628 01ce 9A00     		lsls	r2, r3, #2
 5629 01d0 1A44     		add	r2, r2, r3
 5630 01d2 7B68     		ldr	r3, [r7, #4]
 5631 01d4 5B68     		ldr	r3, [r3, #4]
 5632 01d6 9B00     		lsls	r3, r3, #2
 5633 01d8 B2FBF3F5 		udiv	r5, r2, r3
 5634 01dc FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5635 01e0 0246     		mov	r2, r0
 5636 01e2 1346     		mov	r3, r2
 5637 01e4 9B00     		lsls	r3, r3, #2
 5638 01e6 1344     		add	r3, r3, r2
 5639 01e8 9A00     		lsls	r2, r3, #2
 5640 01ea 1A44     		add	r2, r2, r3
 5641 01ec 7B68     		ldr	r3, [r7, #4]
 5642 01ee 5B68     		ldr	r3, [r3, #4]
 5643 01f0 9B00     		lsls	r3, r3, #2
 5644 01f2 B2FBF3F3 		udiv	r3, r2, r3
 5645 01f6 0D4A     		ldr	r2, .L237+4
 5646 01f8 A2FB0323 		umull	r2, r3, r2, r3
 5647 01fc 5B09     		lsrs	r3, r3, #5
 5648 01fe 6422     		movs	r2, #100
ARM GAS  /tmp/ccNHJhAL.s 			page 143


 5649 0200 02FB03F3 		mul	r3, r2, r3
 5650 0204 EB1A     		subs	r3, r5, r3
 5651 0206 1B01     		lsls	r3, r3, #4
 5652 0208 3233     		adds	r3, r3, #50
 5653 020a 084A     		ldr	r2, .L237+4
 5654 020c A2FB0323 		umull	r2, r3, r2, r3
 5655 0210 5B09     		lsrs	r3, r3, #5
 5656 0212 03F00F02 		and	r2, r3, #15
 5657 0216 7B68     		ldr	r3, [r7, #4]
 5658 0218 1B68     		ldr	r3, [r3]
 5659 021a 2244     		add	r2, r2, r4
 5660 021c 9A60     		str	r2, [r3, #8]
 5661              	.L236:
 5662              		.loc 1 2543 0
 5663 021e 00BF     		nop
 5664 0220 1037     		adds	r7, r7, #16
 5665              	.LCFI297:
 5666              		.cfi_def_cfa_offset 16
 5667 0222 BD46     		mov	sp, r7
 5668              	.LCFI298:
 5669              		.cfi_def_cfa_register 13
 5670              		@ sp needed
 5671 0224 B0BD     		pop	{r4, r5, r7, pc}
 5672              	.L238:
 5673 0226 00BF     		.align	2
 5674              	.L237:
 5675 0228 00380140 		.word	1073821696
 5676 022c 1F85EB51 		.word	1374389535
 5677              		.cfi_endproc
 5678              	.LFE120:
 5680              		.text
 5681              	.Letext0:
 5682              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5683              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5684              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 5685              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 5686              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 5687              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 5688              		.file 8 "/usr/include/newlib/sys/lock.h"
 5689              		.file 9 "/usr/include/newlib/sys/_types.h"
 5690              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 5691              		.file 11 "/usr/include/newlib/sys/reent.h"
 5692              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 5693              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 5694              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
ARM GAS  /tmp/ccNHJhAL.s 			page 144


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/ccNHJhAL.s:16     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccNHJhAL.s:23     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccNHJhAL.s:607    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccNHJhAL.s:5406   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccNHJhAL.s:132    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccNHJhAL.s:139    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccNHJhAL.s:255    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccNHJhAL.s:262    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccNHJhAL.s:389    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccNHJhAL.s:396    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccNHJhAL.s:527    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccNHJhAL.s:534    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccNHJhAL.s:650    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccNHJhAL.s:600    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccNHJhAL.s:643    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccNHJhAL.s:686    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccNHJhAL.s:693    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccNHJhAL.s:4482   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccNHJhAL.s:902    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccNHJhAL.s:909    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccNHJhAL.s:1132   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:1139   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccNHJhAL.s:1249   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:1256   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccNHJhAL.s:1382   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccNHJhAL.s:1389   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccNHJhAL.s:1533   .text.HAL_UART_Transmit_DMA:00000000000000cc $d
     /tmp/ccNHJhAL.s:4119   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccNHJhAL.s:4195   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccNHJhAL.s:4370   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccNHJhAL.s:1540   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccNHJhAL.s:1547   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccNHJhAL.s:1712   .text.HAL_UART_Receive_DMA:00000000000000f4 $d
     /tmp/ccNHJhAL.s:4240   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccNHJhAL.s:4325   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccNHJhAL.s:1719   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccNHJhAL.s:1726   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccNHJhAL.s:1861   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccNHJhAL.s:1868   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccNHJhAL.s:1984   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccNHJhAL.s:1991   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccNHJhAL.s:4595   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccNHJhAL.s:4649   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccNHJhAL.s:2116   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccNHJhAL.s:2123   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccNHJhAL.s:2255   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccNHJhAL.s:2262   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccNHJhAL.s:2343   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccNHJhAL.s:2350   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccNHJhAL.s:2439   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:2446   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccNHJhAL.s:3459   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccNHJhAL.s:2657   .text.HAL_UART_Abort_IT:0000000000000140 $d
     /tmp/ccNHJhAL.s:4764   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccNHJhAL.s:4850   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
ARM GAS  /tmp/ccNHJhAL.s 			page 145


     /tmp/ccNHJhAL.s:2663   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:2670   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccNHJhAL.s:3502   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccNHJhAL.s:2780   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
     /tmp/ccNHJhAL.s:4936   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccNHJhAL.s:2785   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:2792   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccNHJhAL.s:3545   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccNHJhAL.s:2910   .text.HAL_UART_AbortReceive_IT:00000000000000ac $d
     /tmp/ccNHJhAL.s:4989   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccNHJhAL.s:2915   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccNHJhAL.s:2922   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccNHJhAL.s:5229   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccNHJhAL.s:3416   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccNHJhAL.s:5042   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccNHJhAL.s:5174   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccNHJhAL.s:3232   .text.HAL_UART_IRQHandler:00000000000001f4 $d
     /tmp/ccNHJhAL.s:4711   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccNHJhAL.s:3237   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3244   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccNHJhAL.s:3280   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3287   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccNHJhAL.s:3323   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3330   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccNHJhAL.s:3366   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3373   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccNHJhAL.s:3409   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3452   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3495   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3538   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:3581   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccNHJhAL.s:3588   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccNHJhAL.s:3660   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccNHJhAL.s:3667   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccNHJhAL.s:3739   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccNHJhAL.s:3746   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccNHJhAL.s:3818   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccNHJhAL.s:3825   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccNHJhAL.s:3910   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccNHJhAL.s:3917   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccNHJhAL.s:4002   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccNHJhAL.s:4009   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccNHJhAL.s:4067   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccNHJhAL.s:4074   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccNHJhAL.s:4113   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccNHJhAL.s:4189   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccNHJhAL.s:4234   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccNHJhAL.s:4319   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccNHJhAL.s:4364   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccNHJhAL.s:4476   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccNHJhAL.s:4589   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccNHJhAL.s:4643   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccNHJhAL.s:4705   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccNHJhAL.s:4758   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:4844   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:4930   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccNHJhAL.s:4983   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
ARM GAS  /tmp/ccNHJhAL.s 			page 146


     /tmp/ccNHJhAL.s:5036   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:5168   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:5223   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccNHJhAL.s:5400   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccNHJhAL.s:5675   .text.UART_SetConfig:0000000000000228 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
