ARM GAS  /tmp/cc18e8EB.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB66:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/cc18e8EB.s 			page 2


  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f1xx_it.c **** 
  40:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32f1xx_it.c **** 
  42:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32f1xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  44:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  45:Src/stm32f1xx_it.c **** /* UART handler declared in "main.c" file */
  46:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef UartHandle;
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /******************************************************************************/
  49:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  50:Src/stm32f1xx_it.c **** /******************************************************************************/
  51:Src/stm32f1xx_it.c **** 
  52:Src/stm32f1xx_it.c **** /**
  53:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  54:Src/stm32f1xx_it.c **** */
  55:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  56:Src/stm32f1xx_it.c **** {
  26              		.loc 1 56 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
  57:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  58:Src/stm32f1xx_it.c **** 
  59:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  60:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  63:Src/stm32f1xx_it.c **** }
  38              		.loc 1 63 0
  39 0004 00BF     		nop
  40 0006 BD46     		mov	sp, r7
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 13
  43              		@ sp needed
  44 0008 80BC     		pop	{r7}
  45              	.LCFI3:
  46              		.cfi_restore 7
  47              		.cfi_def_cfa_offset 0
  48 000a 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE66:
  52              		.section	.text.HardFault_Handler,"ax",%progbits
  53              		.align	1
ARM GAS  /tmp/cc18e8EB.s 			page 3


  54              		.global	HardFault_Handler
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu softvfp
  60              	HardFault_Handler:
  61              	.LFB67:
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /**
  66:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  67:Src/stm32f1xx_it.c **** */
  68:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  69:Src/stm32f1xx_it.c **** {
  62              		.loc 1 69 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              	.LCFI4:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 7, -4
  71 0002 00AF     		add	r7, sp, #0
  72              	.LCFI5:
  73              		.cfi_def_cfa_register 7
  74              	.L3:
  70:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  71:Src/stm32f1xx_it.c **** 
  72:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  73:Src/stm32f1xx_it.c ****   while (1)
  75              		.loc 1 73 0 discriminator 1
  76 0004 FEE7     		b	.L3
  77              		.cfi_endproc
  78              	.LFE67:
  80              		.section	.text.MemManage_Handler,"ax",%progbits
  81              		.align	1
  82              		.global	MemManage_Handler
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu softvfp
  88              	MemManage_Handler:
  89              	.LFB68:
  74:Src/stm32f1xx_it.c ****   {
  75:Src/stm32f1xx_it.c ****   }
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  79:Src/stm32f1xx_it.c **** }
  80:Src/stm32f1xx_it.c **** 
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  83:Src/stm32f1xx_it.c **** */
  84:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  90              		.loc 1 85 0
  91              		.cfi_startproc
ARM GAS  /tmp/cc18e8EB.s 			page 4


  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95 0000 80B4     		push	{r7}
  96              	.LCFI6:
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 7, -4
  99 0002 00AF     		add	r7, sp, #0
 100              	.LCFI7:
 101              		.cfi_def_cfa_register 7
 102              	.L5:
  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   while (1)
 103              		.loc 1 89 0 discriminator 1
 104 0004 FEE7     		b	.L5
 105              		.cfi_endproc
 106              	.LFE68:
 108              		.section	.text.BusFault_Handler,"ax",%progbits
 109              		.align	1
 110              		.global	BusFault_Handler
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu softvfp
 116              	BusFault_Handler:
 117              	.LFB69:
  90:Src/stm32f1xx_it.c ****   {
  91:Src/stm32f1xx_it.c ****   }
  92:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  95:Src/stm32f1xx_it.c **** }
  96:Src/stm32f1xx_it.c **** 
  97:Src/stm32f1xx_it.c **** /**
  98:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
  99:Src/stm32f1xx_it.c **** */
 100:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 101:Src/stm32f1xx_it.c **** {
 118              		.loc 1 101 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0000 80B4     		push	{r7}
 124              	.LCFI8:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0002 00AF     		add	r7, sp, #0
 128              	.LCFI9:
 129              		.cfi_def_cfa_register 7
 130              	.L7:
 102:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 103:Src/stm32f1xx_it.c **** 
 104:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 105:Src/stm32f1xx_it.c ****   while (1)
ARM GAS  /tmp/cc18e8EB.s 			page 5


 131              		.loc 1 105 0 discriminator 1
 132 0004 FEE7     		b	.L7
 133              		.cfi_endproc
 134              	.LFE69:
 136              		.section	.text.UsageFault_Handler,"ax",%progbits
 137              		.align	1
 138              		.global	UsageFault_Handler
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu softvfp
 144              	UsageFault_Handler:
 145              	.LFB70:
 106:Src/stm32f1xx_it.c ****   {
 107:Src/stm32f1xx_it.c ****   }
 108:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 109:Src/stm32f1xx_it.c **** 
 110:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 111:Src/stm32f1xx_it.c **** }
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c **** /**
 114:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 115:Src/stm32f1xx_it.c **** */
 116:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 117:Src/stm32f1xx_it.c **** {
 146              		.loc 1 117 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151 0000 80B4     		push	{r7}
 152              	.LCFI10:
 153              		.cfi_def_cfa_offset 4
 154              		.cfi_offset 7, -4
 155 0002 00AF     		add	r7, sp, #0
 156              	.LCFI11:
 157              		.cfi_def_cfa_register 7
 158              	.L9:
 118:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 119:Src/stm32f1xx_it.c **** 
 120:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   while (1)
 159              		.loc 1 121 0 discriminator 1
 160 0004 FEE7     		b	.L9
 161              		.cfi_endproc
 162              	.LFE70:
 164              		.section	.text.SVC_Handler,"ax",%progbits
 165              		.align	1
 166              		.global	SVC_Handler
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	SVC_Handler:
 173              	.LFB71:
 122:Src/stm32f1xx_it.c ****   {
 123:Src/stm32f1xx_it.c ****   }
ARM GAS  /tmp/cc18e8EB.s 			page 6


 124:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 125:Src/stm32f1xx_it.c **** 
 126:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 127:Src/stm32f1xx_it.c **** }
 128:Src/stm32f1xx_it.c **** 
 129:Src/stm32f1xx_it.c **** /**
 130:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 131:Src/stm32f1xx_it.c **** */
 132:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 133:Src/stm32f1xx_it.c **** {
 174              		.loc 1 133 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179 0000 80B4     		push	{r7}
 180              	.LCFI12:
 181              		.cfi_def_cfa_offset 4
 182              		.cfi_offset 7, -4
 183 0002 00AF     		add	r7, sp, #0
 184              	.LCFI13:
 185              		.cfi_def_cfa_register 7
 134:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 135:Src/stm32f1xx_it.c **** 
 136:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 140:Src/stm32f1xx_it.c **** }
 186              		.loc 1 140 0
 187 0004 00BF     		nop
 188 0006 BD46     		mov	sp, r7
 189              	.LCFI14:
 190              		.cfi_def_cfa_register 13
 191              		@ sp needed
 192 0008 80BC     		pop	{r7}
 193              	.LCFI15:
 194              		.cfi_restore 7
 195              		.cfi_def_cfa_offset 0
 196 000a 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE71:
 200              		.section	.text.DebugMon_Handler,"ax",%progbits
 201              		.align	1
 202              		.global	DebugMon_Handler
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu softvfp
 208              	DebugMon_Handler:
 209              	.LFB72:
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c **** /**
 143:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 144:Src/stm32f1xx_it.c **** */
 145:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 146:Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/cc18e8EB.s 			page 7


 210              		.loc 1 146 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 80B4     		push	{r7}
 216              	.LCFI16:
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 0002 00AF     		add	r7, sp, #0
 220              	.LCFI17:
 221              		.cfi_def_cfa_register 7
 147:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 148:Src/stm32f1xx_it.c **** 
 149:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 150:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 151:Src/stm32f1xx_it.c **** 
 152:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 153:Src/stm32f1xx_it.c **** }
 222              		.loc 1 153 0
 223 0004 00BF     		nop
 224 0006 BD46     		mov	sp, r7
 225              	.LCFI18:
 226              		.cfi_def_cfa_register 13
 227              		@ sp needed
 228 0008 80BC     		pop	{r7}
 229              	.LCFI19:
 230              		.cfi_restore 7
 231              		.cfi_def_cfa_offset 0
 232 000a 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE72:
 236              		.section	.text.PendSV_Handler,"ax",%progbits
 237              		.align	1
 238              		.global	PendSV_Handler
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	PendSV_Handler:
 245              	.LFB73:
 154:Src/stm32f1xx_it.c **** 
 155:Src/stm32f1xx_it.c **** /**
 156:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 157:Src/stm32f1xx_it.c **** */
 158:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 159:Src/stm32f1xx_it.c **** {
 246              		.loc 1 159 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251 0000 80B4     		push	{r7}
 252              	.LCFI20:
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc18e8EB.s 			page 8


 256              	.LCFI21:
 257              		.cfi_def_cfa_register 7
 160:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 161:Src/stm32f1xx_it.c **** 
 162:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 163:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 164:Src/stm32f1xx_it.c **** 
 165:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 166:Src/stm32f1xx_it.c **** }
 258              		.loc 1 166 0
 259 0004 00BF     		nop
 260 0006 BD46     		mov	sp, r7
 261              	.LCFI22:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0008 80BC     		pop	{r7}
 265              	.LCFI23:
 266              		.cfi_restore 7
 267              		.cfi_def_cfa_offset 0
 268 000a 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE73:
 272              		.section	.text.SysTick_Handler,"ax",%progbits
 273              		.align	1
 274              		.global	SysTick_Handler
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu softvfp
 280              	SysTick_Handler:
 281              	.LFB74:
 167:Src/stm32f1xx_it.c **** 
 168:Src/stm32f1xx_it.c **** /**
 169:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 170:Src/stm32f1xx_it.c **** */
 171:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 172:Src/stm32f1xx_it.c **** {
 282              		.loc 1 172 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286 0000 80B5     		push	{r7, lr}
 287              	.LCFI24:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 7, -8
 290              		.cfi_offset 14, -4
 291 0002 00AF     		add	r7, sp, #0
 292              	.LCFI25:
 293              		.cfi_def_cfa_register 7
 173:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 174:Src/stm32f1xx_it.c **** 
 175:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 176:Src/stm32f1xx_it.c ****   HAL_IncTick();
 294              		.loc 1 176 0
 295 0004 FFF7FEFF 		bl	HAL_IncTick
 177:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 296              		.loc 1 177 0
ARM GAS  /tmp/cc18e8EB.s 			page 9


 297 0008 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 178:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 181:Src/stm32f1xx_it.c **** }
 298              		.loc 1 181 0
 299 000c 00BF     		nop
 300 000e 80BD     		pop	{r7, pc}
 301              		.cfi_endproc
 302              	.LFE74:
 304              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 305              		.align	1
 306              		.global	USB_LP_CAN1_RX0_IRQHandler
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	USB_LP_CAN1_RX0_IRQHandler:
 313              	.LFB75:
 182:Src/stm32f1xx_it.c **** 
 183:Src/stm32f1xx_it.c **** /******************************************************************************/
 184:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 185:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 186:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 187:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 188:Src/stm32f1xx_it.c **** /******************************************************************************/
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c **** /**
 191:Src/stm32f1xx_it.c **** * @brief This function handles USB low priority or CAN RX0 interrupts.
 192:Src/stm32f1xx_it.c **** */
 193:Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 194:Src/stm32f1xx_it.c **** {
 314              		.loc 1 194 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0000 80B5     		push	{r7, lr}
 319              	.LCFI26:
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 00AF     		add	r7, sp, #0
 324              	.LCFI27:
 325              		.cfi_def_cfa_register 7
 195:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 196:Src/stm32f1xx_it.c **** 
 197:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 198:Src/stm32f1xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 326              		.loc 1 198 0
 327 0004 0248     		ldr	r0, .L15
 328 0006 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 199:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 202:Src/stm32f1xx_it.c **** }
 329              		.loc 1 202 0
 330 000a 00BF     		nop
ARM GAS  /tmp/cc18e8EB.s 			page 10


 331 000c 80BD     		pop	{r7, pc}
 332              	.L16:
 333 000e 00BF     		.align	2
 334              	.L15:
 335 0010 00000000 		.word	hpcd_USB_FS
 336              		.cfi_endproc
 337              	.LFE75:
 339              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 340              		.align	1
 341              		.global	TIM4_IRQHandler
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu softvfp
 347              	TIM4_IRQHandler:
 348              	.LFB76:
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c **** /**
 205:Src/stm32f1xx_it.c **** * @brief This function handles TIM4 global interrupt.
 206:Src/stm32f1xx_it.c **** */
 207:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 208:Src/stm32f1xx_it.c **** {
 349              		.loc 1 208 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353 0000 80B5     		push	{r7, lr}
 354              	.LCFI28:
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 7, -8
 357              		.cfi_offset 14, -4
 358 0002 00AF     		add	r7, sp, #0
 359              	.LCFI29:
 360              		.cfi_def_cfa_register 7
 209:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 210:Src/stm32f1xx_it.c **** 
 211:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 212:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 361              		.loc 1 212 0
 362 0004 0248     		ldr	r0, .L18
 363 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 213:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 214:Src/stm32f1xx_it.c **** 
 215:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 216:Src/stm32f1xx_it.c **** }
 364              		.loc 1 216 0
 365 000a 00BF     		nop
 366 000c 80BD     		pop	{r7, pc}
 367              	.L19:
 368 000e 00BF     		.align	2
 369              	.L18:
 370 0010 00000000 		.word	htim4
 371              		.cfi_endproc
 372              	.LFE76:
 374              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 375              		.align	1
 376              		.global	DMA1_Channel5_IRQHandler
ARM GAS  /tmp/cc18e8EB.s 			page 11


 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	DMA1_Channel5_IRQHandler:
 383              	.LFB77:
 217:Src/stm32f1xx_it.c **** 
 218:Src/stm32f1xx_it.c **** /**
 219:Src/stm32f1xx_it.c ****   * @brief  This function handles DMA RX interrupt request.
 220:Src/stm32f1xx_it.c ****   * @param  None
 221:Src/stm32f1xx_it.c ****   * @retval None
 222:Src/stm32f1xx_it.c ****   * @Note   This function is redefined in "main.h" and related to DMA stream
 223:Src/stm32f1xx_it.c ****   *         used for USART data transmission
 224:Src/stm32f1xx_it.c ****   */
 225:Src/stm32f1xx_it.c **** void USARTx_DMA_RX_IRQHandler(void)
 226:Src/stm32f1xx_it.c **** {
 384              		.loc 1 226 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0000 80B5     		push	{r7, lr}
 389              	.LCFI30:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 00AF     		add	r7, sp, #0
 394              	.LCFI31:
 395              		.cfi_def_cfa_register 7
 227:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(UartHandle.hdmarx);
 396              		.loc 1 227 0
 397 0004 034B     		ldr	r3, .L21
 398 0006 5B6B     		ldr	r3, [r3, #52]
 399 0008 1846     		mov	r0, r3
 400 000a FFF7FEFF 		bl	HAL_DMA_IRQHandler
 228:Src/stm32f1xx_it.c **** }
 401              		.loc 1 228 0
 402 000e 00BF     		nop
 403 0010 80BD     		pop	{r7, pc}
 404              	.L22:
 405 0012 00BF     		.align	2
 406              	.L21:
 407 0014 00000000 		.word	UartHandle
 408              		.cfi_endproc
 409              	.LFE77:
 411              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 412              		.align	1
 413              		.global	DMA1_Channel4_IRQHandler
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu softvfp
 419              	DMA1_Channel4_IRQHandler:
 420              	.LFB78:
 229:Src/stm32f1xx_it.c **** 
 230:Src/stm32f1xx_it.c **** /**
 231:Src/stm32f1xx_it.c ****   * @brief  This function handles DMA TX interrupt request.
 232:Src/stm32f1xx_it.c ****   * @param  None
ARM GAS  /tmp/cc18e8EB.s 			page 12


 233:Src/stm32f1xx_it.c ****   * @retval None
 234:Src/stm32f1xx_it.c ****   * @Note   This function is redefined in "main.h" and related to DMA stream
 235:Src/stm32f1xx_it.c ****   *         used for USART data reception
 236:Src/stm32f1xx_it.c ****   */
 237:Src/stm32f1xx_it.c **** void USARTx_DMA_TX_IRQHandler(void)
 238:Src/stm32f1xx_it.c **** {
 421              		.loc 1 238 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0000 80B5     		push	{r7, lr}
 426              	.LCFI32:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              	.LCFI33:
 432              		.cfi_def_cfa_register 7
 239:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(UartHandle.hdmatx);
 433              		.loc 1 239 0
 434 0004 034B     		ldr	r3, .L24
 435 0006 1B6B     		ldr	r3, [r3, #48]
 436 0008 1846     		mov	r0, r3
 437 000a FFF7FEFF 		bl	HAL_DMA_IRQHandler
 240:Src/stm32f1xx_it.c **** }
 438              		.loc 1 240 0
 439 000e 00BF     		nop
 440 0010 80BD     		pop	{r7, pc}
 441              	.L25:
 442 0012 00BF     		.align	2
 443              	.L24:
 444 0014 00000000 		.word	UartHandle
 445              		.cfi_endproc
 446              	.LFE78:
 448              		.section	.text.USART1_IRQHandler,"ax",%progbits
 449              		.align	1
 450              		.global	USART1_IRQHandler
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu softvfp
 456              	USART1_IRQHandler:
 457              	.LFB79:
 241:Src/stm32f1xx_it.c **** 
 242:Src/stm32f1xx_it.c **** /**
 243:Src/stm32f1xx_it.c ****   * @brief  This function handles USARTx interrupt request.  
 244:Src/stm32f1xx_it.c ****   * @param  None
 245:Src/stm32f1xx_it.c ****   * @retval None
 246:Src/stm32f1xx_it.c ****   * @Note   This function is redefined in "main.h" and related to DMA  
 247:Src/stm32f1xx_it.c ****   *         used for USART data transmission     
 248:Src/stm32f1xx_it.c ****   */
 249:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 250:Src/stm32f1xx_it.c **** {
 458              		.loc 1 250 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc18e8EB.s 			page 13


 462 0000 80B5     		push	{r7, lr}
 463              	.LCFI34:
 464              		.cfi_def_cfa_offset 8
 465              		.cfi_offset 7, -8
 466              		.cfi_offset 14, -4
 467 0002 00AF     		add	r7, sp, #0
 468              	.LCFI35:
 469              		.cfi_def_cfa_register 7
 251:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&UartHandle);
 470              		.loc 1 251 0
 471 0004 0248     		ldr	r0, .L27
 472 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 252:Src/stm32f1xx_it.c **** }
 473              		.loc 1 252 0
 474 000a 00BF     		nop
 475 000c 80BD     		pop	{r7, pc}
 476              	.L28:
 477 000e 00BF     		.align	2
 478              	.L27:
 479 0010 00000000 		.word	UartHandle
 480              		.cfi_endproc
 481              	.LFE79:
 483              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 484              		.align	1
 485              		.global	EXTI15_10_IRQHandler
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu softvfp
 491              	EXTI15_10_IRQHandler:
 492              	.LFB80:
 253:Src/stm32f1xx_it.c **** 
 254:Src/stm32f1xx_it.c **** /**
 255:Src/stm32f1xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 256:Src/stm32f1xx_it.c ****   */
 257:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 258:Src/stm32f1xx_it.c **** {
 493              		.loc 1 258 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 80B5     		push	{r7, lr}
 498              	.LCFI36:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 7, -8
 501              		.cfi_offset 14, -4
 502 0002 00AF     		add	r7, sp, #0
 503              	.LCFI37:
 504              		.cfi_def_cfa_register 7
 259:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 260:Src/stm32f1xx_it.c **** 
 261:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 262:Src/stm32f1xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 505              		.loc 1 262 0
 506 0004 4FF40040 		mov	r0, #32768
 507 0008 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 263:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
ARM GAS  /tmp/cc18e8EB.s 			page 14


 264:Src/stm32f1xx_it.c **** 
 265:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 266:Src/stm32f1xx_it.c **** }
 508              		.loc 1 266 0
 509 000c 00BF     		nop
 510 000e 80BD     		pop	{r7, pc}
 511              		.cfi_endproc
 512              	.LFE80:
 514              		.text
 515              	.Letext0:
 516              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 517              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 518              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 519              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 520              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 521              		.file 7 "/usr/include/newlib/sys/lock.h"
 522              		.file 8 "/usr/include/newlib/sys/_types.h"
 523              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 524              		.file 10 "/usr/include/newlib/sys/reent.h"
 525              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 526              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 527              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 528              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 529              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usb.h"
 530              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h"
ARM GAS  /tmp/cc18e8EB.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/cc18e8EB.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cc18e8EB.s:53     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:60     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cc18e8EB.s:81     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:88     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cc18e8EB.s:109    .text.BusFault_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:116    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cc18e8EB.s:137    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:144    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cc18e8EB.s:165    .text.SVC_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:172    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cc18e8EB.s:201    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:208    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cc18e8EB.s:237    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:244    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cc18e8EB.s:273    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cc18e8EB.s:280    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cc18e8EB.s:305    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:312    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/cc18e8EB.s:335    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000010 $d
     /tmp/cc18e8EB.s:340    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:347    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/cc18e8EB.s:370    .text.TIM4_IRQHandler:0000000000000010 $d
     /tmp/cc18e8EB.s:375    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:382    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/cc18e8EB.s:407    .text.DMA1_Channel5_IRQHandler:0000000000000014 $d
     /tmp/cc18e8EB.s:412    .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:419    .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
     /tmp/cc18e8EB.s:444    .text.DMA1_Channel4_IRQHandler:0000000000000014 $d
     /tmp/cc18e8EB.s:449    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:456    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/cc18e8EB.s:479    .text.USART1_IRQHandler:0000000000000010 $d
     /tmp/cc18e8EB.s:484    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/cc18e8EB.s:491    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_PCD_IRQHandler
hpcd_USB_FS
HAL_TIM_IRQHandler
htim4
HAL_DMA_IRQHandler
UartHandle
HAL_UART_IRQHandler
HAL_GPIO_EXTI_IRQHandler
